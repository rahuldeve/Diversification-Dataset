CSE 373 Lecture 5: Lists, Stacks, and Queues

List Operations: Run time analysis

 We will review:

 More lists and applications
 Stack ADT and applications
 Queue ADT and applications
 Introduction to Trees

 Covered in Chapter 3 of the text

Operation
isEmpty
Insert

FindPrev
Delete
Find

FindNext

First
Kth
Last
Length

Array-Based

Pointer-Based

O(1)
O(N)
O(1)
O(N)
O(N)
O(1)
O(1)
O(1)
O(1)
O(1)

O(1)
O(1)
O(N)
O(N)
O(N)
O(1)
O(1)
O(N)
O(N)
O(N)

R. Rao, CSE 373 Lecture 1

1

R. Rao, CSE 373 Lecture 1

Pointer-Based Linked List

Doubly Linked Lists

pL

node

Value Next

node

Value NULL

 FindPrev (and hence Delete) is O(N) because we cannot go to previous

node

 Solution: Keep a back-pointer at each node

 Doubly Linked List

head

prev

prev

prev

P

 Advantages: Delete and FindPrev are O(1) operations

To delete the node pointed to by P,
need a pointer to the previous node

 Disadvantages:

 More space used up (double the number of pointers at each node)
 More book-keeping for updating the two pointers at each node

R. Rao, CSE 373 Lecture 1

3

R. Rao, CSE 373 Lecture 1

2

4

Circularly Linked Lists

Applications of Linked Lists

 Set the pointer of the last node to first node instead of NULL

 Polynomial ADT: store and manipulate single variable

 Useful when you want to iterate through whole list starting

from any node
 No need to write special code to wrap around at the end

 Circular doubly linked lists speed up both the Delete and

Last operations
 O(1) time for both instead of O(N)

polynomials with non-negative exponents
 E.g. 10X3 + 4X2 + 7 = 10X3 + 4 X2 + 0 X1 + 7 X0
 Data structure: stores coefficients Ci and exponents i

 Array Implementation: C[i] = Ci

 E.g. C[3] = 10, C[2] = 4, C[1] = 0, C[0] = 7

 ADT operations: Input polynomials in arrays A and B

 Addition: C[i] = ?
 Multiplication: ?

R. Rao, CSE 373 Lecture 1

5

R. Rao, CSE 373 Lecture 1

Applications of Linked Lists

Applications of Linked Lists

 Polynomial ADT: store and manipulate single variable

polynomials with non-negative exponents
 E.g. 10X3 + 4X2 + 7 = 10X3 + 4 X2 + 0 X1 + 7 X0
 Data structure: stores coefficients Ci and exponents i

 Array Implementation: C[i] = Ci

 E.g. C[3] = 10, C[2] = 4, C[1] = 0, C[0] = 7

 ADT operations: Input polynomials in arrays A and B

 Addition: C[i] = A[i] + B[i];
 Multiplication: C[i+j] = C[i+j] + A[i]*B[j];

 Problem with Array implementation: Sparse polynomials

 E.g. 10X3000 + 4 X2+ 7 ! Waste of space and time (Ci are mostly 0s)
 Use singly linked list, sorted in decreasing order of exponents

 Radix Sort: Sorting integers in O(N) time
 Bucket sort: N integers in the range 0 to B-1

 Array Count has B elements (buckets), initialized to 0
 Given input integer i, Count[i]++
 Time: O(B+N) (= O(N) if B is (N))

 Radix sort = bucket sort on digits of integers

 Bucket-sort from least significant to most significant digit
 Use linked list to store numbers that are in same bucket
 Takes O(P(B+N)) time where P = number of digits

 Multilists: Two (or more) lists combined into one

 E.g. Students and course registrations
 Two inter-linked circularly linked lists  one for students in course,

other for courses taken by student

R. Rao, CSE 373 Lecture 1

7

R. Rao, CSE 373 Lecture 1

6

8

Stacks

 Recall: Array implementation of Lists

 Insert and Delete take O(N) time (need to shift elements)

 What if we avoid shifting by inserting and deleting only at

the end of the list?
 Both operations take O(1) time!

 Stack: Same as list except that Insert/Delete allowed only at

the end of the list (the top).

 LIFO  Last in, First out
 Push: Insert element at top
 Pop: Return and delete top element

Stack ADT

 Operations:

 void push(Stack S, ElementType E)
 ElementType pop(Stack S)
 ElementType top(Stack S)
 int isEmpty(Stack S)
 void MakeEmpty(Stack S)

 Implementations:

 Pointer-based: Linked list with header, S->Next points to top of stack
 Array-based: Pre-allocate array, top is Stack[TopofStack]

 Run time: All operations are O(1) (except MakeEmpty for

pointer implementation which takes (N)).

R. Rao, CSE 373 Lecture 1

9

R. Rao, CSE 373 Lecture 1

10

Applications of Stacks I

Applications of Stacks II

 Compilers and Word Processors: Balancing symbols

 E.g. (i + 5*(17  j/(6*k)) is not balanced  ) is missing

 Balance Checker using Stacks:

 Make an empty stack and start reading symbols
 If input is an opening symbol, Push onto stack
 If input is a closing symbol

 If stack is empty, report error
 Else, Pop the stack

Report error if popped symbol is not corresponding open symbol

 If EOF and stack is not empty, report error

 Run time: O(N) for N symbols

 Handling function calls in programming languages

 Example: Two functions f and g calling each other: need to store current

environment (input parameters, local variables, address to return to, etc.)

function f( int x, int y) {

int a;
if ( term_cond ) return ...;
a = ....;
return g( a );
}

function g( int z ) {

int p, q;
p = .... ; q = .... ;
return f(p,q);
}

Current environment

R. Rao, CSE 373 Lecture 1

11

R. Rao, CSE 373 Lecture 1

12

Queues

Queue ADT

 Consider a list ADT that inserts only at one end and deletes

 Operations:

only at other end  this results in a Queue

 Queues are FIFO  first in, first out

 Instead of Push and Pop, we have Enqueue and Dequeue

 Why not just use stacks?

 Items can get buried in stacks and do not appear at the top for a long

time  not fair to old items.

 A queue ensures fairness e.g. callers waiting on a customer hotline

 void Enqueue(ElementType E, Queue Q)
 ElementType Dequeue(Queue Q)
 int IsEmpty(Queue Q)
 int MakeEmpty(Queue Q)
 ElementType Front(Queue Q)

 Implementations:

 Pointer-based is natural  what pointers do you need to keep track of

for O(1) implementation of Enqueue and Dequeue?

 Array-based: can use List operatons Insert and Delete, but O(N) time
 How can you make array-based Enqueue and Dequeue O(1) time?

R. Rao, CSE 373 Lecture 1

13

R. Rao, CSE 373 Lecture 1

14

Queue ADT

 Operations:

 void Enqueue(ElementType E, Queue Q)
 ElementType Dequeue(Queue Q)
 int IsEmpty(Queue Q)
 int MakeEmpty(Queue Q)
 ElementType Front(Queue Q)

 Implementations:

 Pointer-based is natural  what pointers do you need to keep track of

for O(1) implementation of Enqueue and Dequeue?

 Array-based: can use List operatons Insert and Delete, but O(N) time
 How can you make array-based Enqueue and Dequeue O(1) time?
 Use Front and Rear indices: Rear incremented for Enqueue and

Front incremented for Dequeue

Applications of Queues

 File servers: Users needing access to their files on a shared

file server machine are given access on a FIFO basis

 Printer Queue: Jobs submitted to a printer are printed in

order of arrival

 Phone calls made to customer service hotlines are usually

placed in a queue

 Expected wait-time of real-life queues such as customers on

phone lines or ticket counters may be too hard to solve
analytically ! use queue ADT for simulation

R. Rao, CSE 373 Lecture 1

15

R. Rao, CSE 373 Lecture 1

16

Introduction to Trees

 Basic terminology:

(cid:127) root
(cid:127) leaves
(cid:127) parent
(cid:127) children, siblings
(cid:127) path
(cid:127) ancestors
(cid:127) descendants
(cid:127) path length
(cid:127) depth / level
(cid:127) height
(cid:127) subtrees

depth=0, height = 2

B

A

C

D

depth = 2, height=0

E

F

Next class:

Gardening 101: Algorithms for growing, examining, and

pruning trees (on your computer)

To do:

Finish Homework no. 1 (due Friday)

Finish reading Chapter 3

Start reading Chapter 4

R. Rao, CSE 373 Lecture 1

17

R. Rao, CSE 373 Lecture 1

18

