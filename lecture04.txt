Lecture 4

Balanced Binary Search Trees

6.006 Fall 2009

Lecture 4: Balanced Binary Search Trees

Lecture Overview

 The importance of being balanced
 AVL trees

 Definition
 Balance
 Insert

 Other balanced trees
 Data structures in general

Readings

CLRS Chapter 13. 1 and 13. 2 (but different approach: red-black trees)

Recall: Binary Search Trees (BSTs)

 rooted binary tree
 each node has

 key
 left pointer
 right pointer
 parent pointer

See Fig. 1

Figure 1: Heights of nodes in a BST

1

654120115029263211Lecture 4

Balanced Binary Search Trees

6.006 Fall 2009

Figure 2: BST property

 BST property (see Fig. 2).
 height of node = length (] edges) of longest downward path to a leaf (see CLRS B.5

for details).

The Importance of Being Balanced:

 BSTs support insert, min, delete, rank, etc. in O(h) time, where h = height of tree

(= height of root).

 h is between lg(n) and n: (see Fig. 3).

Figure 3: Balancing BSTs

 balanced BST maintains h = O(lg n)  all operations run in O(lg n) time.

2

xxxvs.Perfectly BalancedPathLecture 4

Balanced Binary Search Trees

6.006 Fall 2009

AVL Trees:

Definition

AVL trees are self-balancing binary search trees. These trees are named after their two
inventors G.M. Adelson-Velskii and E.M. Landis.1
An AVL tree is one that requires heights of left and right children of every node to differ
by at most 1. This is illustrated in Fig. 4)

Figure 4: AVL Tree Concept

In order to implement an AVL tree, follow two critical steps:
 Treat nil tree as height 1.
 Each node stores its height. This is inherently a DATA STRUCTURE AUGMENTATION

procedure, similar to augmenting subtree size. Alternatively, one can just store dif-
ference in heights.

A good animation applet for AVL trees is available at this link. To compare Binary Search
Trees and AVL balancing of trees use code provided here.

1Original Russian article: Adelson-Velskii, G.; E. M. Landis (1962). An algorithm for the organization
of information. Proceedings of the USSR Academy of Sciences 146: 263266. (English translation by Myron
J. Ricci in Soviet Math. Doklady, 3:12591263, 1962.)

3

kk-1Lecture 4

Balance:

Balanced Binary Search Trees

6.006 Fall 2009

The balance is the worst when every node differs by 1.
Let Nh = min (] nodes).

 Nh = Nh1 + Nh2 + 1

> 2Nh2

 Nh > 2h/2
= h < 2 lg Nh

Alternatively:

Nh > Fn

In fact, Nh = Fn+2  1

Fh = h
5

1 +
2

where,  =

(nth Fibonacci number)
(simple induction)

(rounded to nearest integer)

5

 1.618

(golden ratio)

= max h  log(n)  1.440 lg(n)

AVL Insert:

1. insert as in simple BST.

2. work your way up tree, restoring AVL property (and updating heights as you go).

Each Step:

 suppose x is lowest node violating AVL
 assume x is right-heavy (left case symmetric)
 if xs right child is right-heavy or balanced: follow steps in Fig. 5
 else follow steps in Fig. 6
 then continue up to xs grandparent, greatgrandparent . . .

4

Lecture 4

Balanced Binary Search Trees

6.006 Fall 2009

Figure 5: AVL Insert Balancing (FIX: Node z should be y)

Figure 6: AVL Insert Balancing

5

xyABCk+1kk-1k-1xzABCk+1k-1Left-Rotate(x)kkyxCABk+1kkk-1yxCABkkk-1k-1Left-Rotate(x)xzADk+1k-1Left-Rotate(x)k-1yxABkk-1yBCkk-1  ork-2Right-Rotate(z)zCDkk-1k+1k-1  ork-2Lecture 4

Balanced Binary Search Trees

6.006 Fall 2009

Example: An example implementation of the AVL Insert process is illustrated in Fig. 7.

Figure 7: Illustration of AVL Tree Insert Process. Note that node x is left-heavy.

Comment 1. In general, process may need several rotations before an Insert is completed.

Comment 2. Delete(-min) harder but possible.

6

6541201150292632116541201150292621123Insert(23)x = 29: left-left case65412011502623321165412011501DoneInsert(55)293226231296541201150222623129x=65: left-right case551554120115012262312965Done3Lecture 4

Balanced Binary Search Trees

6.006 Fall 2009

Balanced Search Trees:

There are many balanced search trees.

Adelson-Velsii and Landis 1962

AVL Trees
B-Trees/2-3-4 Trees Bayer and McCreight 1972 (see CLRS 18)
BB[] Trees
Red-black Trees
Splay-Trees
Skip Lists
Scapegoat Trees
Treaps

Nievergelt and Reingold 1973
CLRS Chapter 13
Sleator and Tarjan 1985
Pugh 1989
Galperin and Rivest 1993
Seidel and Aragon 1996

Note 1. Skip Lists and Treaps use random numbers to make decisions fast with high
probability.
Note 2. Splay Trees and Scapegoat Trees are amortized: adding up costs for several
operations = fast on average.

7

Lecture 4

Balanced Binary Search Trees

6.006 Fall 2009

Splay Trees

Upon access (search or insert), move node to root by sequence of rotations and/or double-
rotations (just like AVL trees). Height can be linear but still O(lg n) per operation on
average (amortized)

Note: We will see more on amortization in a couple of lectures.

Optimality

 For BSTs, cannot do better than O(lg n) per search in worst case.
 In some cases, can do better e.g.

 in-order traversal takes (n) time for n elements.
 put more frequent items near root

A Conjecture: Splay trees are O(best BST) for every access pattern.

 With fancier tricks, can achieve O(lg lg u) performance for integers 1 u [Van Ernde

Boas; see 6.854 or 6.851 (Advanced Data Structures)]

Big Picture:

Abstract Data Type(ADT): interface spec.

e.g. Priority Queue:

 Q = new-empty-queue()
 Q.insert(x)
 x = Q.deletemin()

vs.

Data Structure (DS): algorithm for each op.

There are many possible DSs for one ADT. One example that we will discuss much later in
the course is the heap priority queue.

8

