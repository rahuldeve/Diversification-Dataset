A N A L Y T I C   C O M B I N A T O R I C S
P A R T   O N E 

6. Trees

http://aofa.cs.princeton.edu

Review
First half of class

 Introduced analysis of algoritihms.
 Surveyed basic mathematics needed for scientific studies. 
 Introduced analytic combinatorics. 

1

2

3

4

5

Analysis of Algorithms

Recurrences

Generating Functions

Asymptotics

Analytic Combinatorics

Note: Many applications beyond analysis of algorithms.

2

ALGORITHMSANALYSISOFSECOND EDITIONAN INTRODUCTION TO THEROBERT SEDGEWICK PHILIPPE FLAJOLETOrientation
Second half of class

 Surveys fundamental combinatorial classes.
 Considers techniques from analytic combinatorics to study them .
 Includes applications to the analysis of algorithms.

chapter

combinatorial classes

type of class

type of GF
type of GF

6

7

8

9

Trees

unlabeled
unlabeled

Permutations

labeled
labeled

Strings and Tries

unlabeled
unlabeled

Words and Mappings

labeled
labeled

OGFs

EGFs

OGFs

EGFs

Note: Many more examples in book than in lectures.

3

ALGORITHMSANALYSISOFSECOND EDITIONAN INTRODUCTION TO THEROBERT SEDGEWICK PHILIPPE FLAJOLETA N A L Y T I C   C O M B I N A T O R I C S
P A R T   O N E 

6. Trees

Trees and forests
Binary search trees
Path length
Other types of trees

OF

http://aofa.cs.princeton.edu

6a.Trees.Trees

Anatomy of a binary tree

Definition. A binary tree is an external node or an internal node and two binary trees.  

root

level
(depth)

internal

node

external

node

leaf

0

1

2

3

4

5

6

height

h(t )

5

Binary tree enumeration (quick review)

How many binary trees with N nodes?

T1 = 1

T2 = 2

T3 = 5

T4 = 14

6

Symbolic method: binary trees

How many binary trees with N nodes?

Class

T, the class of all binary trees

Atoms

type

class

size

GF

Size

|t |, the number of internal nodes in t

OGF

(cid:59)((cid:97)) =(cid:91)(cid:59)

(cid:97)|(cid:91)|

=(cid:53)(cid:23)

(cid:59)(cid:53)(cid:97)(cid:53)

Construction

OGF equation

(cid:59) = (cid:65) + (cid:59)  (cid:65)  (cid:59)
(cid:59)((cid:97)) = (cid:24) + (cid:97)(cid:59)((cid:97))(cid:25)

external node

internal node

(cid:65)
(cid:65)

0

1

1

z

a binary tree is an external node 
or an internal node connected to 

two binary trees

or

[(cid:97)(cid:53)](cid:59)((cid:97)) =

(cid:24)

(cid:53) + (cid:24)(cid:25)(cid:53)
(cid:53) 

(cid:27)(cid:53)

(cid:159)(cid:53)(cid:26)

7

Forest and trees

Each forest with N nodes corresponds to 

A tree with N +1 nodes

add a root

[(cid:97)(cid:53)](cid:45)((cid:97)) = [(cid:97)(cid:53)+(cid:24)](cid:46)((cid:97))

(cid:97)(cid:45)((cid:97)) = (cid:46)((cid:97))

GF that 

enumerates forests

GF that 

enumerates trees

8

Anatomy of a (general) tree

Definition. A forest is a sequence of disjoint trees.

Definition. A tree is a node (called the root )  connected to the roots of trees in a forest.

root

node

leaf

level
(depth)

0

1

2

3

4

height

h(t )

9

Forest enumeration

How many forests with N nodes?

F1 = 1

F2 = 2

F3 = 5

F4 = 14

10

Tree enumeration

How many trees with N nodes?

G1 = 1

G2 = 1

G3 = 2

G3 = 5

G4 = 14

11

Symbolic method: forests and trees

How many forests and trees with N nodes?

Class

F, the class of all forests

Size

|f |, the number of nodes in f

Class

G, the class of all trees

Size

|g |, the number of nodes in g

Construction

(cid:45) = (cid:58)(cid:44)(cid:56)((cid:46))

OGF equations

(cid:45)((cid:97)) =

(cid:24)

(cid:24)  (cid:46)((cid:97))

Atoms

type

class

size

GF

node

Z

1

z

(cid:72)(cid:85)(cid:75) (cid:46) = (cid:65)  (cid:45)
(cid:72)(cid:85)(cid:75) (cid:46)((cid:97)) = (cid:97)(cid:45)((cid:97))

Solution

Extract coefficients

(cid:45)((cid:97))  (cid:97)(cid:45)((cid:97))(cid:25) = (cid:24)
(cid:53) + (cid:24)(cid:25)(cid:53)
(cid:53) 

(cid:24)

(cid:45)(cid:53) = (cid:59)(cid:53) =

(cid:27)(cid:53)
(cid:159)(cid:53)(cid:26) (cid:46)(cid:53) = (cid:45)(cid:53)(cid:24) 

(cid:27)(cid:53)(cid:24)
(cid:159)(cid:53)(cid:26)

12

Forest and binary trees

Each forest with N nodes corresponds to 

"rotation" correspondence

A binary tree with N nodes

Connect each node to its 

 left child
 right sibling

13

Aside: Drawing a binary tree

Approach 1:

 y-coordinate: height minus node depth
 x-coordinate: inorder node rank

Problem: distracting long edges

10

9

8

7
.
.
.

0 1 2 3 4 5 ....

Design decision:
           Reduce visual clutter by omitting external nodes

14

Aside: Drawing a binary tree

Approach 2:

 y-coordinate: height minus node depth
 x-coordinate: centered and evenly spaced by level

Drawing shows tree profile

15

Typical random binary tree shapes (400 nodes)

Challenge: characterize analytically

16

A N A L Y T I C   C O M B I N A T O R I C S
P A R T   O N E 

6. Trees

Trees and forests
Binary search trees
Path length
Other types of trees

OF

http://aofa.cs.princeton.edu

6b.Trees.BSTs

Binary search tree (BST)

Fundamental data structure in computer science:
 Each node has a key, with comparable values.
 Keys are all distinct.
 Each nodes left subtree has smaller keys. 
 Each nodes right subtree has larger keys.

v

Section 3.2

smaller
than v

larger
than v

18

BST representation in Java

Java definition: A BST is a reference to a root Node.

A Node is comprised of four fields:

 A Key and a Value.
 A reference to the left and right subtree. 

smaller keys

larger keys

Notes:

 Key and Value are generic types.
 Key is Comparable.

private class Node
{
   private Key key;
   private Value val;
   private Node left, right;
   public Node(Key key, Value val)
   {
      this.key = key;
      this.val = val;
   }
}

BST

Node

key

val

left

right

BST with smaller keys

BST with larger keys

Binary search tree

19

BST implementation (search)

public class BST<Key extends Comparable<Key>, Value>
{
   private Node root;
   private class Node
   {  /* see previous slide */  }

   public Value get(Key key)
   {
      Node x = root;
      while (x != null)
      {
         int cmp = key.compareTo(x.key);
         if      (cmp  < 0) x = x.left;
         else if (cmp  > 0) x = x.right;
         else if (cmp == 0) return x.val;
      }
      return null;
   }

   public void put(Key key, Value val)
   {  /* see next slide */  }

}

to search for M

go left

S

E

then right

X

A

M

successful!

C

H

to search for Q

go left

S

E

then right

X

A

M

then right

C

H

unsuccessful

20

BST implementation (insert)

 public void put(Key key, Value val)
 {  root = put(root, key, val);  }

 private Node put(Node x, Key key, Value val)
 {
    if (x == null) return new Node(key, val);
    int cmp = key.compareTo(x.key);
    if      (cmp  < 0) x.left  = put(x.left,  key, val);
    else if (cmp  > 0) x.right = put(x.right, key, val);
    else if (cmp == 0) x.val = val;
    return x;
 }

concise, but tricky, 

recursive code

to insert Q

go left

S

E

then right

X

A

M

then right

C

H

Q

then attach

Q here

21

Key fact
The shape of a BST depends on the order of insertion of the keys.

Best case

H

Typical case

C

S

E

S

X

A

E

M

X

A

M

Worst case

A

C

E

search cost guaranteed ~lg N

C

H

Average search cost ?

H

M

S

X

Average search cost  ~N/2 (a problem)

Reasonable model: Analyze BST built from inserting keys in random order.

22

Typical random BSTs (80 nodes)

Challenge: characterize analytically (explain difference from random binary trees)

23

BST shape
is a property of permutations, not trees (!)

1

1

1

1

3

3

1

3

1

2

1

4

1

4

1

3

3

2

2

4

2

1

3

3

3

4

2

4

Note: Balanced shapes are more likely.

24

Mapping permutations to trees via BST insertion

Q. How many permutations map to this tree?
    

"result in this tree shape 
when inserted into an 
initially empty BST"

2 1 3
2 3 1

A.  2

Q. How many permutations map to this tree?

root must be 4

ways to mix
left and right

A.

(cid:28)
(cid:25)  (cid:25)  (cid:24) = (cid:25)(cid:23)

perms mapping
to left subtree

perms mapping
to right subtree

1, 2, and 3
on the left

5 and 6

on the right

4 2 1 3 5 6
4 2 1 5 3 6
4 2 1 5 6 3
4 2 5 1 3 6
4 2 5 1 6 3
4 2 5 6 1 3
4 5 2 1 3 6
4 5 2 1 6 3
4 5 2 6 1 3
4 5 6 2 1 3

4 2 3 1 5 6
4 2 3 5 1 6
4 2 3 5 6 1
4 2 5 3 1 6
4 2 5 3 6 1
4 2 5 6 3 1
4 5 2 3 1 6
4 5 2 3 6 1
4 5 2 6 3 1
4 5 6 2 3 1

25

Mapping permutations to trees via BST insertion

Q. How many permutations map to a general binary tree t ?

root is |tL| + 1

left subtree tL

right subtree tR

|tL| nodes

|tR| nodes

A.  Let Pt  be the number of perms that map to t

(cid:55)(cid:91) =|(cid:91)(cid:51)| + |(cid:91)(cid:57)|

|(cid:91)(cid:51)|   (cid:55)(cid:91)(cid:51)  (cid:55)(cid:91)(cid:57)

much, much larger when tL  tR than when tL  tR
(explains why balanced shapes are more likely)

first element

must be
 |tL| + 1

 |tL| smaller
elements

 |tR| larger
elements

26

Two binary tree models
that are fundamental (and fundamentally different)

BST model 

 Balanced shapes much more likely.
 Probability root is of rank k:  1/N.

Catalan model 

 Each tree shape equally likely.
 Probability root is of rank k: 
(cid:24)

(cid:24)

(cid:82)(cid:25)(cid:82)  (cid:25)
(cid:82) 

(cid:53)  (cid:82) + (cid:24)(cid:25)(cid:53)  (cid:25)(cid:82)
(cid:53)  (cid:82) 
(cid:53) + (cid:24)(cid:25)(cid:53)
(cid:53)

(cid:24)

27

Catalan distribution
Probability that the root is of rank k in a randomly-chosen binary tree with N nodes.

.4
.357

.25

0

0

(cid:24)

(cid:82)(cid:25)(cid:82)  (cid:25)
(cid:82) 

(cid:24)

(cid:53)  (cid:82) + (cid:24)(cid:25)(cid:53)  (cid:25)(cid:82)
(cid:53)  (cid:82) 
(cid:53) + (cid:24)(cid:25)(cid:53)
(cid:53)

(cid:24)

N/ 2

N

k (scaled by a factor of N )

public static double[][] catalan(int N)
{
   double[] T = new double[N];
   double[][] cat = new double[N-1][];
   T[0] = 1;
   for (int i = 1; i < N; i++)
       T[i] = T[i-1]*(4*i-2)/(i+1);      

   cat[0] = new double[1];
   cat[0][0] = 1; 
   for (int i = 1; i < N-1; i++)
   {
      cat[i] = new double[i];
      for (int j = 0; j < i; j++)
         cat[i][j] = T[j]*T[i-j-1]/T[i];
   }
   return cat;
}

Note: Small subtrees are extremely likely.

Ex. Probability that at least one of the two subtrees is empty: ~1/2

28

Aside: Generating random binary trees

public class RandomBST
{
   private Node root;
   private int h;
   private int w;

   private class Node
   {
      private Node left, right;
      private int N;
      private int rank, depth;
   }

   public RandomBST(int N)
   {  root = generate(N, 0);  }

   private Node generate(int N, int d)
   { // See code at right. }

   public static void main(String[] args)
   {
      int N = Integer.parseInt(args[0]);
      RandomBST t = new RandomBST(N);
      t.show();
   }
}

stay tuned

Note: rank field includes external nodes: x.rank = 2*k+1

private Node generate(int N, int d)
{
   Node x = new Node();
   x.N = N; x.depth = d;
   if (h < d) h = d;
   if (N == 0) x.rank = w++;  else
   {
      int k = // internal rank of root
      x.left = generate(k-1, d+1);
      x.rank = w++;
      x.right = generate (N-k, d+1);
   }
   return x;
}

random BST:
random binary tree:

StdRandom.uniform(N)+1
StdRandom.discrete(cat[N]) + 1;

29

Aside: Drawing binary trees

   public void show()
   {  show(root);  }

   private double scaleX(Node t)
   {  return 1.0*t.rank/(w+1);  }
   private double scaleY(Node t)
   {  return 3.0*(h - t.depth)/(w+1);  }

   private void show(Node t)
   {
      if (t.N == 0) return;
      show(t.left); 
      show(t.right); 
      double x = scaleX(t);
      double y = scaleY(t);
      double xl = scaleX(t.left);
      double yl = scaleY(t.left);
      double xr = scaleX(t.right);
      double yr = scaleY(t.right);
      StdDraw.filledCircle(x, y, .005);
      StdDraw.line(x, y, xl, yl);
      StdDraw.line(x, y, xr, yr);
   }

Exercise: Implement centered by level approach.

30

A N A L Y T I C   C O M B I N A T O R I C S
P A R T   O N E 

6. Trees

Trees and forests
Binary search trees
Path length
Other types of trees

OF

http://aofa.cs.princeton.edu

6c.Trees.Paths

Path length in binary trees

Definition. A binary tree is an external node or an internal node and two binary trees.  

internal

node

external

node

leaf

root

level
(depth)

0

1

2

3

4

5

6

01
+
12
+
24
+
33
+
41
+
51
=
28

internal path length:

external path length:

(cid:80)(cid:87)(cid:83)((cid:91)) =(cid:82)(cid:23)
(cid:95)(cid:87)(cid:83)((cid:91)) =(cid:82)(cid:23)

(cid:82)  {(cid:10)(cid:3)(cid:80)(cid:85)(cid:91)(cid:76)(cid:89)(cid:85)(cid:72)(cid:83)(cid:3)(cid:85)(cid:86)(cid:75)(cid:76)(cid:90)(cid:3)(cid:72)(cid:91)(cid:3)(cid:75)(cid:76)(cid:87)(cid:91)(cid:79)(cid:3)(cid:82)}

(cid:82)  {(cid:10)(cid:3)(cid:76)(cid:95)(cid:91)(cid:76)(cid:89)(cid:85)(cid:72)(cid:83)(cid:3)(cid:85)(cid:86)(cid:75)(cid:76)(cid:90)(cid:3)(cid:72)(cid:91)(cid:3)(cid:75)(cid:76)(cid:87)(cid:91)(cid:79)(cid:3)(cid:82)}

height

h(t )

internal
path 
length
ipl (t )

00
+
10
+
20
+
35
+
45
+
51
+
62
=
52

external
path 
length
xpl (t )

32

Path length in binary trees

notation

t

|t |

t

definition

binary tree

# internal nodes in t

# external nodes in t

tL and tR

left and right subtrees of t

ipl (t )

xpl (t )

internal path length of t

external path length of t

recursive relationships

| (cid:91)| = | (cid:91)(cid:51) | + | (cid:91)(cid:57) | + (cid:24)

(cid:91) = (cid:91)(cid:51) + (cid:91)(cid:57)

(cid:80)(cid:87)(cid:83)((cid:91)) = (cid:80)(cid:87)(cid:83)((cid:91)(cid:51)) + (cid:80)(cid:87)(cid:83)((cid:91)(cid:57)) + | (cid:91)|  (cid:24)
(cid:95)(cid:87)(cid:83)((cid:91)) = (cid:95)(cid:87)(cid:83)((cid:91)(cid:51)) + (cid:95)(cid:87)(cid:83)((cid:91)(cid:57)) +(cid:91)

Lemma 1.                   
Proof. Induction.

(cid:91) = | (cid:91)| + (cid:24)

(cid:91) = (cid:91)(cid:51) + (cid:91)(cid:57)

= | (cid:91)(cid:51) | + (cid:24) + | (cid:91)(cid:57) | + (cid:24)
= | (cid:91)| + (cid:24)

Lemma 2.                                   
Proof. Induction.

(cid:95)(cid:87)(cid:83)((cid:91)) = (cid:80)(cid:87)(cid:83)((cid:91)) + (cid:25)| (cid:91)|

(cid:95)(cid:87)(cid:83)((cid:91)) = (cid:95)(cid:87)(cid:83)((cid:91)(cid:51)) + (cid:95)(cid:87)(cid:83)((cid:91)(cid:57)) + (cid:91)

= (cid:80)(cid:87)(cid:83)((cid:91)(cid:51)) + (cid:25)| (cid:91)(cid:51) | + (cid:80)(cid:87)(cid:83)((cid:91)(cid:57)) + (cid:25)| (cid:91)(cid:57) | + | (cid:91)| + (cid:24)
= (cid:80)(cid:87)(cid:83)((cid:91)) + (cid:25)| (cid:91)|

33

Problem 1: What is the expected path length of a random binary tree?

QNk  = # trees with N nodes and ipl k
TN    = # trees
QN    = cumulated cost (total ipl)

Q10 = 1

T1 = 1
Q1 = 0
Q1/ T1 = 0

1

1

Q21 = 2
T2 = 2
Q2 = 2
Q2/ T2 = 1

3

3

2

3

3

6

6

5

6

6

4

4

4

4

6

6

5

6

6

Q32 = 1
Q33 = 4
T3 = 2
Q3 = 1(cid:331)2 + 4(cid:331)3 = 14   

Q3/ T3 = 2.8

Q44 = 4
Q45 = 2
Q46 = 8

T4 = 14
Q4 = 4(cid:331)4 + 2(cid:331)5 + 8(cid:331)6 = 74   

Q4/ T4  5.286

34

Average path length in a random binary tree

T is the set of all binary trees.
|t | is the number of internal nodes in t. 
ipl(t ) is the internal path length of t.
TN is the # of binary trees of size N (Catalan).
QN is the total ipl of all binary trees of size N.

Counting GF.

Cumulative cost GF.

(cid:59)((cid:97)) =(cid:91)T

(cid:97)|(cid:91)| =(cid:53)(cid:23)
(cid:56)((cid:97)) =(cid:91)(cid:59)

(cid:59)(cid:53)(cid:97)(cid:53) =(cid:53)(cid:23)

(cid:80)(cid:87)(cid:83)((cid:91))(cid:97)|(cid:91)|

Average ipl of a  random 
N-node binary tree. 

[(cid:97)(cid:53)](cid:56)((cid:97))
[(cid:97)(cid:53)](cid:59)((cid:97))

=

[(cid:97)(cid:53)](cid:56)((cid:97))

(cid:59)(cid:53)

(cid:24)

(cid:53) + (cid:24)(cid:25)(cid:53)

(cid:53)(cid:97)(cid:53) 

(cid:27)(cid:53)
(cid:159)(cid:53)(cid:26)

Next: Derive a functional equation for the CGF.

35

z^{|t_L|

CGF functional equation for path length in binary trees

Counting GF.

CGF.

(cid:59)((cid:97)) =(cid:91)(cid:59)
(cid:56)((cid:97)) =(cid:91)(cid:59)

(cid:97)|(cid:91)|

(cid:80)(cid:87)(cid:83)((cid:91))(cid:97)|(cid:91)|

|tL| nodes

ipl(tL )

|tR| nodes

ipl(tR )

empty tree

(cid:80)(cid:87)(cid:83)((cid:91)) = (cid:80)(cid:87)(cid:83)((cid:91)(cid:51)) + (cid:80)(cid:87)(cid:83)((cid:91)(cid:57)) + | (cid:91)(cid:51) | + | (cid:91)(cid:57) |

root

Decompose from de!nition.

(cid:56)((cid:97)) = (cid:24) +(cid:91)(cid:51)(cid:59)(cid:91)(cid:57)(cid:59)(cid:80)(cid:87)(cid:83)((cid:91)(cid:51)) + (cid:80)(cid:87)(cid:83)((cid:91)(cid:57)) + |(cid:91)(cid:51)| + |(cid:91)(cid:57)|(cid:97)|(cid:91)(cid:51)|+|(cid:91)(cid:57)|+(cid:24)
(cid:80)(cid:87)(cid:83)((cid:91)(cid:51))(cid:97)|(cid:91)(cid:51)|(cid:91)(cid:57)(cid:59)
(cid:91)(cid:51)(cid:59)
|(cid:91)(cid:51)|(cid:97)|(cid:91)(cid:51)|(cid:91)(cid:57)(cid:59)
(cid:91)(cid:51)(cid:59)

(cid:97)|(cid:91)(cid:57)| = (cid:56)((cid:97))(cid:59)((cid:97))

(cid:97)|(cid:91)(cid:57)| = (cid:97)(cid:59)((cid:97))(cid:59)((cid:97))

= (cid:24) + (cid:25)(cid:97)(cid:56)((cid:97))(cid:59)((cid:97)) + (cid:25)(cid:97)(cid:25)(cid:59)((cid:97))(cid:59)((cid:97))

36

Expected path length of a random binary tree: full derivation

(cid:80)(cid:87)(cid:83)((cid:91))(cid:97)|(cid:91)|

(cid:56)((cid:97)) =(cid:91)(cid:59)
(cid:56)((cid:97)) = (cid:24) +(cid:91)(cid:51)(cid:59)(cid:91)(cid:57)(cid:59)(cid:80)(cid:87)(cid:83)((cid:91)(cid:51)) + (cid:80)(cid:87)(cid:83)((cid:91)(cid:57)) + |(cid:91)(cid:51)| + |(cid:91)(cid:57)|(cid:97)|(cid:91)(cid:51)|+|(cid:91)(cid:57)|+(cid:24)

CGF.

Decompose from de!nition.

Solve.

(cid:56)((cid:97)) =

= (cid:25)(cid:97)(cid:59)((cid:97))(cid:56)((cid:97)) + (cid:97)(cid:59)((cid:97))

(cid:25)(cid:97)(cid:25)(cid:59)((cid:97))(cid:59)((cid:97))
(cid:24)  (cid:25)(cid:97)(cid:59)((cid:97))
(cid:97)
(cid:24)  (cid:27)(cid:97) 

(cid:24)  (cid:97)
(cid:24)  (cid:27)(cid:97)

Do some algebra (omitted)

(cid:97)(cid:56)((cid:97)) =

+ (cid:24)

Expand.

Compute average internal path length.

(cid:56)(cid:53)  [(cid:97)(cid:53)](cid:56)((cid:97))  (cid:27)(cid:53)
(cid:56)(cid:53)/(cid:59)(cid:53)  (cid:53)(cid:159)(cid:53)

(cid:59)((cid:97)) =

(cid:59)((cid:97)) = 

(cid:24)  (cid:24)  (cid:27)(cid:97)
(cid:24)  (cid:24)  (cid:27)(cid:97)

(cid:25)(cid:97)

(cid:25)(cid:97)(cid:25)

(cid:59)(cid:53) 
+

(cid:27)(cid:53)
(cid:53)(cid:159)(cid:53)
(cid:24)
(cid:97)(cid:24)  (cid:27)(cid:97)

(cid:24)  (cid:25)(cid:97)(cid:59)((cid:97)) = (cid:24)  (cid:27)(cid:97)

37

Problem 2: What is the expected path length of a random BST?
6

CNk  = # permutations resulting in a 
         BST with N nodes and ipl k
N !    = # permutations
CN    = cumulated cost (total ipl)

1

1

C21 = 2
C2 = 2
C2/ 2! = 1

C10 = 1

C1 = 0
C1/ 1! = 0

Recall: A property of permutations.

3

3

2

3

3

4

4

4

4

6

5

6

6

6

6

5

6

6

C32 = 2
C33 = 4
C3 = 2(cid:331)2 + 4(cid:331)3 = 16   

C3/ 3!  2.667

C44 = 12
C45 = 4
C46 = 8

C4 = 12(cid:331)4 + 4(cid:331)5 + 8(cid:331)6 = 74   

C4/ 4!  4.833

38

Average path length in a BST built from a random permutation

P is the set of all permutations.
|p | is the length of p. 
ipl(p ) is the ipl of the BST built from p by inserting into an initially empty tree.
PN is the # of permutations of size N (N !).
CN is the total ipl of BSTs built from all permutations.

Counting EGF.

Cumulative cost EGF.

(cid:53)!

(cid:97)(cid:53)
(cid:53)!

=

(cid:24)
(cid:24)  (cid:97)

=(cid:53)(cid:23)

(cid:97)|(cid:87)|
|(cid:87)|!
(cid:80)(cid:87)(cid:83)((cid:87))

(cid:55)((cid:97)) =(cid:87)P
(cid:42)((cid:97)) =(cid:87)(cid:55)

(cid:97)|(cid:87)|
|(cid:87)|!
(cid:53)![(cid:97)(cid:53)](cid:42)((cid:97))

(cid:53)!

Expected ipl of a BST built
from a random permutation. 

(cid:53)![(cid:97)(cid:53)](cid:42)((cid:97))
[(cid:97)(cid:53)](cid:55)((cid:97))

=

= [(cid:97)(cid:53)](cid:42)((cid:97))

skip a step because 
counting sequence

and EGF normalization 

are both N !

Next: Derive a functional equation for the cumulated cost EGF.

39

CGF functional equation for path length in BSTs

Cumulative cost EGF.

(cid:42)((cid:97)) =(cid:87)(cid:55)

(cid:80)(cid:87)(cid:83)((cid:87))

(cid:97)|(cid:87)|
|(cid:87)|!

Counting GF.

|pL| + 1

smaller

larger

(cid:55)((cid:97)) =(cid:87)P

(cid:97)|(cid:87)|
|(cid:87)|!

=

(cid:24)
(cid:24)  (cid:97)

pL + 1

|(cid:87)(cid:51)| + |(cid:87)(cid:57)|
|(cid:87)(cid:51)| 

perms lead to the same tree with

|pL| +1 at the root
pL  nodes on the left 
pR  nodes on the right 

|pL| nodes

ipl(pL )

|pR| nodes

ipl(pR )

Decompose.

Differentiate.

Tricky;

often works
with perms

(cid:42)((cid:97)) = (cid:87)(cid:51)P (cid:87)(cid:57)P|(cid:87)(cid:51)| + |(cid:87)(cid:57)|
(cid:42)((cid:97)) = (cid:87)(cid:51)P (cid:87)(cid:57)P

|(cid:87)(cid:51)|  (cid:97)|(cid:87)(cid:51)|+|(cid:87)(cid:57)|+(cid:24)
|(cid:87)(cid:57)|!(cid:80)(cid:87)(cid:83)((cid:87)(cid:51)) + (cid:80)(cid:87)(cid:83)((cid:87)(cid:57)) + |(cid:87)(cid:51)| + |(cid:87)(cid:57)|

(|(cid:87)(cid:51)| + |(cid:87)(cid:57)| + (cid:24))!(cid:80)(cid:87)(cid:83)((cid:87)(cid:51)) + (cid:80)(cid:87)(cid:83)((cid:87)(cid:57)) + |(cid:87)(cid:51)| + |(cid:87)(cid:57)|

(cid:97)|(cid:87)(cid:51)|
|(cid:87)(cid:51)|!

(cid:97)|(cid:87)(cid:57)|

= (cid:25)(cid:42)((cid:97))(cid:55)((cid:97)) + (cid:25)(cid:97)(cid:55)((cid:97))(cid:55)((cid:97)) =

(cid:25)(cid:42)((cid:97))
(cid:24)  (cid:97)

+

(cid:25)(cid:97)

((cid:24)  (cid:97))(cid:26)

(cid:55)((cid:97)) =(cid:87)P
(cid:55)((cid:97)) =(cid:87)P

(cid:24)
(cid:24)  (cid:97)

=

(cid:97)|(cid:87)|
|(cid:87)|!
(cid:97)|(cid:87)|(cid:24)
(|(cid:87)|  (cid:24))!

=

(cid:24)

((cid:24)  (cid:97))(cid:25)

40

CGF functional equation for path length in BSTs

(cid:42)((cid:97)) =

(cid:25)(cid:42)((cid:97))
(cid:24)  (cid:97)

+

(cid:25)(cid:97)

((cid:24)  (cid:97))(cid:26)

Look familiar?

41

Expected path length in BST built from a random permutation: full derivation

CGF.

Decompose.

Differentiate.

(cid:80)(cid:87)(cid:83)((cid:87))

(cid:97)|(cid:87)|
|(cid:87)|!

(cid:42)((cid:97)) =(cid:87)(cid:55)
(cid:42)((cid:97)) = (cid:87)(cid:51)P (cid:87)(cid:57)P|(cid:87)(cid:51)| + |(cid:87)(cid:57)|
(cid:42)((cid:97)) = (cid:87)(cid:51)P (cid:87)(cid:57)P

(cid:97)|(cid:87)(cid:51)|
|(cid:87)(cid:51)|!

(|(cid:87)(cid:51)| + |(cid:87)(cid:57)| + (cid:24))!(cid:80)(cid:87)(cid:83)((cid:87)(cid:51)) + (cid:80)(cid:87)(cid:83)((cid:87)(cid:57)) + |(cid:87)(cid:51)| + |(cid:87)(cid:57)|

|(cid:87)(cid:51)|  (cid:97)|(cid:87)(cid:51)|+|(cid:87)(cid:57)|+(cid:24)
|(cid:87)(cid:57)|!(cid:80)(cid:87)(cid:83)((cid:87)(cid:51)) + (cid:80)(cid:87)(cid:83)((cid:87)(cid:57)) + |(cid:87)(cid:51)| + |(cid:87)(cid:57)|

(cid:97)|(cid:87)(cid:57)|

Simplify.

= (cid:25)(cid:42)((cid:97))(cid:55)((cid:97)) + (cid:25)(cid:97)(cid:55)((cid:97))(cid:55)((cid:97))

Solve the ODE
(see GF lecture).

=

(cid:42)((cid:97)) =

(cid:25)(cid:97)

+

(cid:25)(cid:42)((cid:97))
(cid:24)  (cid:97)
(cid:25)
((cid:24)  (cid:97))(cid:25) ln

((cid:24)  (cid:97))(cid:26)
(cid:24)  (cid:97) 

(cid:24)

(cid:25)(cid:97)

((cid:24)  (cid:97))(cid:25)

Expand.

(cid:42)(cid:53) = (cid:25)((cid:53) + (cid:24))((cid:47)(cid:53)+(cid:24)  (cid:24))  (cid:25)(cid:53)  (cid:25)(cid:53) ln (cid:53)

(cid:55)((cid:97)) =(cid:87)P
(cid:55)((cid:97)) =(cid:87)P

(cid:24)
(cid:24)  (cid:97)

=

(cid:97)|(cid:87)|
|(cid:87)|!
(cid:97)|(cid:87)|(cid:24)
(|(cid:87)|  (cid:24))!

=

(cid:24)

((cid:24)  (cid:97))(cid:25)

42

BST  quicksort bijection
Quicksort

first entry in a 
permutation

(partitioning element)

smaller

larger

BST

v

node corresponding 

to first entry in a 

permutation

partitioning

element

smaller

larger

smaller
than v

larger
than v

model : random permutation
# compares : N +1 + # compares for subfiles

model : random permutation
     xpl : N +1 + xpl of subtrees

Average # compares for quicksort 
                  = average external path length of BST built from a random permutation

 = average internal path length + 2N

43

Height and other parameters

Approach works for any additive parameter (see text).
Height requires a different (much more intricate) approach (see text).

Summary:

typical shape

average 
path length

height

random 
binary tree

BST built 

from random 
permutation

 (cid:159)(cid:53)

 (cid:25)(cid:159)(cid:53)

 (cid:25) ln (cid:53)

 (cid:74) ln (cid:53)

(cid:74) .
= (cid:27).(cid:26)(cid:24)(cid:24)

44

ALGORITHMSANALYSISOFSECOND EDITIONAN INTRODUCTION TO THEROBERT SEDGEWICK PHILIPPE FLAJOLETA N A L Y T I C   C O M B I N A T O R I C S
P A R T   O N E 

6. Trees

Trees and forests
Binary search trees
Path length
Other types of trees

OF

http://aofa.cs.princeton.edu

6d.Trees.Other

Other types of trees in combinatorics

Classic tree structures:

 The free tree, an acyclic connected graph.
 The rooted tree, a free tree with a distinguished root node.
 The ordered tree, a rooted tree where the order of the subtrees is significant.

Ex. 5-node trees:

3 free trees

9 rooted trees

14 ordered trees

Enumeration? Path length? Stay tuned for Analytic Combinatorics

46

Other types of trees in algorithmics

Variations on binary trees:

 The t-ary tree, where each node has exactly t children.
 The t-restricted tree, where each node has at most t children.
 The 2-3 tree, the method of choice in symbol-table implementations.

3-ary tree

4-ary tree

3-restricted tree

4-restricted tree

2-3 tree

2-3-4 tree

Enumeration? Path length? Stay tuned for Analytic Combinatorics

47

Balanced trees are the method of choice for symbol tables

J

L

C

E

R
 Same search code as BSTs.
X
 Slight overhead for insertion. 
S
 Guaranteed height < 2lgN.
 Most algorithms use 2-3 or 2-3-4 tree representations.

H

P

A

horizontal red links

M

M

An unsolved problem

redblack tree

Section 3.3

E

J

R

Ex. LLRB (left-leaning red-black) trees.

A

C

S

X

H

P

L

2-3 tree

2-3 tree

M

redblack tree

E J

R

A C

H

L

P

S X

E

C

H

A

M

J

L

R

P

X

S

LLRB tree

11 correspondence between red-black and 2-3 trees

horizontal red links

M

Q. Path length of balanced tree built from a random permutation?

J

R

E

A

C

H

L

P

S

X

2-3 tree

M

E J

R

A C

H

L

P

S X

11 correspondence between red-black and 2-3 trees

a property of permutations, not trees

48

Balanced tree distribution
Probability that the root is of rank k in a randomly-chosen AVL tree. 

Random binary tree

BST built from a random permutation

49

An unsolved problem

Q. Path length of balanced tree built from a random permutation?

10000 experiments per size

0.5

)
t
e
s
f
f
o
(
 

k

p

0

LLRB tree built from random perm (empirical )
0

k/N

1

50

4

N
 
e
z
i
s
 
e
e
r
t

50

random AVL tree

LLRB tree root rank distribution

A N A L Y T I C   C O M B I N A T O R I C S
P A R T   O N E 

6. Trees

Trees and forests
Binary search trees
Path length
Other types of trees
Exercises

OF

http://aofa.cs.princeton.edu

6d.Trees.Other

Exercise 6.6

Tree enumeration via the symbolic method.

1/1

1/2

2/5

.

6/14

52

ALGORITHMSANALYSISOFSECOND EDITIONAN INTRODUCTION TO THEROBERT SEDGEWICK PHILIPPE FLAJOLETExercise 6.27

Compute the probability that a BST is perfectly balanced.

53

ALGORITHMSANALYSISOFSECOND EDITIONAN INTRODUCTION TO THEROBERT SEDGEWICK PHILIPPE FLAJOLETExercises 6.43

Parameters for BSTs built from a random permutation.

Answer these questions for BSTs built from a random permutation.

54

ALGORITHMSANALYSISOFSECOND EDITIONAN INTRODUCTION TO THEROBERT SEDGEWICK PHILIPPE FLAJOLETAssignments for next lecture

1. Read pages 257-344 in text.

    

2. Run experiments to validate mathematical results.

Experiment 1. Generate 1000 random permutations for 
N = 100, 1000, and 10,000 and compare the average 
path length and height of the generated trees with the 
values predicted by analysis.

Experiment 2. Extra credit. Do the same for random binary trees.

3. Write up solutions to Exercises 6.6, 6.27, and 6.43.

55

ALGORITHMSANALYSISOFSECOND EDITIONAN INTRODUCTION TO THEROBERT SEDGEWICK PHILIPPE FLAJOLETA N A L Y T I C   C O M B I N A T O R I C S
P A R T   O N E 

6. Trees

http://aofa.cs.princeton.edu

