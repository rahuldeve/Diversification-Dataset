Red-Black Trees 

Definitions 
and 
Bottom-Up Insertion 

Red-Black Trees 

  Definition: A red-black tree is a binary 

search tree in which: 
  Every node is colored either Red or Black. 
  Each NULL pointer is considered to be a Black node. 
  If a node is red, its two children must be black. 
  Every path from a node to a NULL contains the same 

number of Black nodes. 

  By convention, the root is Black 

  Definition:  The black-height of a node, X, in 

a red-black tree is the number of Black 
nodes on any path to a NULL, not counting 
X. 

UMBC CSMC 341 Red-Black-Trees-1 

2 

X

A Red-Black Tree with NULLs shown 
Black-Height of the tree (the root) = 3 
Black-Height of node X = 2 

UMBC CSMC 341 Red-Black-Trees-1 

3 

A Red-Black Tree with 

Black-Height = 3 

UMBC CSMC 341 Red-Black-Trees-1 

4 

X

Black Height of the tree? 
Black Height of X? 

UMBC CSMC 341 Red-Black-Trees-1 

5 

Bottom Up Insertion 

  Insert node as usual in BST 
  Color the node Red 
  What Red-Black property may be violated? 

  Every node is Red or Black? 
  NULLs are Black? 
  If node is Red, both children must be Black? 
  Every path from node to descendant NULL must 

contain the same number of Blacks? 

UMBC CSMC 341 Red-Black-Trees-1 

6 

Bottom Up Insertion 
  Insert node;  
  Color it Red 
  X is pointer to it to be added to the tree 

  Cases 

0:  X is the root -- color it Black 
1:  Both parent and uncle are Red -- color parent and uncle 
Black, color grandparent Red. Point X to grandparent and 
check new situation. 

2 (zig-zag): Parent is Red, but uncle is Black. X and its parent 
are opposite type children -- color grandparent Red, color X 
Black, rotate left(right) on parent, rotate right(left) on 
grandparent 

3 (zig-zig):  Parent is Red, but uncle is Black. X and its parent 

are both left (right) children -- color parent Black, color 
grandparent Red, rotate right(left) on grandparent 

8/3/2007 

UMBC CSMC 341 Red-Black-Trees-1 

7 

P

X 

G 

U

P

X 

G 

U

Case 1  U is Red 
Just Recolor and move up 

UMBC CSMC 341 Red-Black-Trees-1 

8 

G 

U

X 

P

S 

P

Case 2  Zig-Zag 
Double Rotate 
   X around P; X around G 
Recolor G and X 

S

UMBC CSMC 341 Red-Black-Trees-1 

X 

G

U

9 

P

X 

G 

S 

U

X

Case 3  Zig-Zig 
Single Rotate P around G 
Recolor P and G 

UMBC CSMC 341 Red-Black-Trees-1 

P 

S

G

U

10 

Asymptotic Cost of  Insertion 

  O(lg n) to descend to insertion point 
  O(1) to do insertion 
  O(lg n) to ascend and readjust == worst case 

only for case 1 

  Total: O(log n) 

UMBC CSMC 341 Red-Black-Trees-1 

11 

Insert 4 into this 
R-B Tree 

1 

2 

11 

7 

14 

15 

5 

8 

Black node 

Red node 

UMBC CSMC 341 Red-Black-Trees-1 

12 

Insertion Practice 

Insert the values 2, 1, 4, 5, 9, 3, 6, 7 into an 

initially empty Red-Black Tree 

UMBC CSMC 341 Red-Black-Trees-1 

13 

Top-Down Insertion 

An alternative to this bottom-up insertion is 

top-down insertion. 

Top-down is iterative.  It moves down the tree, 

fixing things as it goes. 

What is the objective of top-downs fixes? 

UMBC CSMC 341 Red-Black-Trees-1 

14 

Theorem 1  Any red-black tree with root x, 

has  n  2bh(x)  1 nodes, where bh(x) is 
the black height of node x. 

Proof: by induction on height of x. 
 

 

 

UMBC CSMC 341 Red-Black-Trees-1 

15 

Theorem 2  In a red-black tree, at least half 

the nodes on any path from the root to a 
NULL must be Black. 

Proof  If there is a Red node on the path, 

there must be a corresponding Black 
node. 

Algebraically this theorem means 
 

 bh( x )  h/2 

 

 

UMBC CSMC 341 Red-Black-Trees-1 

16 

Theorem 3  In a red-black tree, no path from any 
node, X, to a NULL is more than twice as long as 
any other path from X to any other NULL. 

Proof:  By definition, every path from a node to any 
NULL contains the same number of Black nodes.  
By Theorem 2, a least 12 the nodes on any such 
path are Black.  Therefore, there can no more 
than twice as many nodes on any path from X to 
a NULL as on any other path.  Therefore the 
length of every path is no more than twice as 
long as any other path. 

UMBC CSMC 341 Red-Black-Trees-1 

17 

Theorem 4  
  A red-black tree with n nodes has height   

                   h  2 lg(n + 1). 

Proof: Let h be the height of the red-black 

bh(x)  h/2 

tree with root x. By Theorem 2, 
 

 
From Theorem 1, n   2bh(x) - 1 
Therefore n  2 h/2  1 
 
n + 1  2h/2 
lg(n  + 1)  h/2 
 
2lg(n + 1)  h 
 

 

 
 
 

 
 
 

UMBC CSMC 341 Red-Black-Trees-1 

18 

