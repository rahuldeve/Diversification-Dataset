Ch. 4

Multidimensional Data Structures

Multidimensional Data Structures

{74{
VS

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Multidimensional Data Structures

{75{
VS

An important source of media data is geographic data.
A geographic information system (GIS) stores information
about some physical region of the world.
A map is just viewed as a 2-dimensional image, and certain
\points" on the map are considered to be of interest.
These points are then stored in one of many specialized data
structures.

{ k-d Trees
{ Point Quadtrees
{ MX-Quadtrees
Alternatively, we may wish to store certain rectangular regions of the map.
We will study one data structure { the R-tree { that is used
to store such rectangular data.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Example Maps

(a) Map with Marked Points

{76{
VS

(b) Map with Marked Regions

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

k -D

Trees

{77{
VS

Used to store k dimensional point data.
It is not used to store region data.
A 2-d tree (i.e. for k = 2) stores 2-dimensional point data
while a 3-d tree stores 3-dimensional point data, and so on.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{78{
VS

Node Structure
nodetype = record
INFO: infotype
XVAL: real
YVAL: real
LLINK: "nodetype
RLINK: "nodetype
end
INFO
LLINK

XVAL

YVAL

RLINK

INFO eld is any user-dened type whatsoever.
XVAL and YVAL denote the coordinates of a point associated
with the node.
LLINK and RLINK elds point to two children.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

2-d trees, formally

{79{
VS

Level of nodes is dened in the usual way (with root at level 0).

Def: A 2-d tree is any binary tree satisfying the following condition:

1. If N is a node in the tree such that level(N ) is even, then
every node M in the subtree rooted at N:LLINK has the
property that M:XV AL < N:XV AL and every node P
in the subtree rooted at N:RLINK has the property that
P:XV AL  N:XV AL.
2. If N is a node in the tree such that level(N ) is odd, then
every node M in the subtree rooted at N:LLINK has the
property that M:Y V AL < N:Y V AL and every node P
in the subtree rooted at N:RLINK has the property that
P:Y V AL  N:Y V AL.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{80{
VS

Example 2-d Trees

BanjaLuka (19,45)

BanjaLuka (19,45)

BanjaLuka (19,45)

Derventa (40,50)

Derventa (40,50)

Toslic (38,38)

(a)

(b)

(c)

BanjaLuka (19,45)

BanjaLuka (19,45)

Derventa (40,50)

Toslic (38,38)

Sinj (4,4)

Derventa (40,50)

Toslic (38,38)

Tuzla (54,40)

(d)

Level:0

Level:1

Level:2

Tuzla (54,40)

Level:3

(e)

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Insertion/Search in 2-d Trees

{81{
VS

To insert a node N into the tree pointed to by T , do as follows:
Check to see if N and T agree on their XVAL and YVAL
elds.
If so, just overwrite node T and we are done.
Else, branch left if N:XV AL < T:XV AL and branch right
otherwise.
Suppose P denotes the child we are examining. If N and P
agree on their XVAL and YVAL elds. just overwrite node
P and we are done, else branch left if N:Y V AL < P:Y V AL
and branch right otherwise.
Repeat this procedure, branching on XVAL's when we are at
even levels in the tree, and on YVALs when we are at odd
levels in the tree.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Example of Insertion

{82{
VS

Suppose we wish to insert the following points.
City
Banja Luka
Derventa
Toslic
Tuzla
Sinj

(XVAL,YVAL)
(19,45)
(40,50)
(38,38)
(54,35)
(4,4)

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Example of Insertion

{83{
VS

(a) Splitting of region by Banja Luka (b) Splitting of region by Derventa

(c) Splitting of region by Toslic

(d) Splitting of region by Sinj

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Deletion in 2-d Trees

{84{
VS

Suppose T is a 2-d tree, and (x y ) refers to a point that we wish
to delete from the tree.
Search for the node N in T that has N:XV AL = x and
N:Y V AL = y.
If N is a leaf node, then set the appropriate eld (LLINK
or RLINK) of N 's parent to NIL and return N to available
storage.
Otherwise, either the subtree rooted at N:LLINK (which
we will denote by T`) or the subtree rooted at N:RLINK
(which we will denote by Tr ) is non-empty.
(Step 1) Find a \candidate replacement" node R that occurs either in Ti for i 2 f` rg.
(Step 2) Replace all of N 's non-link elds by those of R.
(Step 3) Recursively delete R from Ti.
The above recursion is guaranteed to terminate as Ti for i 2
f` rg has strictly smaller height than the original tree T .

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{85{
VS

Finding Candidate Replacement Nodes for
Deletion

The desired replacement node R must bear the same spatial
relation to all nodes P in both T` and Tr that N bore to P
I.e. if P is to the southwest of N , then P must be to the
southwest of R, if P is to the northwest of N , then P must
be to the northwest of R, and so on.
This means that the desired replacement node R must satisfy the
property that:
1. Every node M in T` is such that: M:XV AL < R:XV AL if
level(N ) is even and M:Y V AL < R:Y V AL if level(N ) is
odd.
2. Every node M in Tr is such that: M:XV AL  R:XV AL if
level(N ) is even and M:Y V AL  R:Y V AL if level(N ) is
odd.
If Tr is not empty, and level(N ) is even, then any node in
Tr that has the smallest possible XV AL eld in Tr is a
candidate replacement node.
But if Tr is empty, then we might not be able to nd a candidate replacement node from T` (why?).
V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{86{
VS

In this case, nd the node R in T` with the smallest possible
XVAL eld. Replace N with this.
Set N:RLINK = N:LLINK and set N:LLINK = NIL.
Recursively delete R .
0

0

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Range Queries in 2-d Trees

{87{
VS

A range query with respect to a 2-d tree T is a query that
species a point (xc yc), and a distance r.
The answer to such a query is the set of all points (x y ) in
the tree T such that (x y ) lies within distance d of (xc yc).
I.e. A range query denes a circle of radius r centered at
location (xc yc), and expects to nd al points in the 2-d tree
that lie within the circle.
Recall that each node N in a 2-d tree implicitly represents a
region RN .
If the circle specied in a query has no intersection with RN ,
then there is no point searching the subtree rooted at node
N.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Example Range Query

{88{
VS

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Point Quadtrees

{89{
VS

Point quadtrees always split regions into four parts.
In a 2-d tree, node N splits a region into two by drawing one
line through the point (N:XV AL N:Y V AL).
In a point quadtree, node N splits the region it represents by
drawing both and horizontal and a vertical line through the
point (N:XV AL N:Y V AL).
These four parts are called the NW (northwest), SW (southwest), NE (northeast) and SE (southest) quadrants determined by node N .
Each of these quadrants corresponds to a child of node N .
Thus, quadtree nodes may have upto 4 children each.
Node structure in a point quadtree:

qtnodetype = record
INFO: infotype
XVAL: real
YVAL: real
NW,SW,NE,SE: "qtnodetype
end

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{90{

Nodes in Point Quadtrees Implicitly
Represent Regions

VS

Root

region represented
by node N
Node N

N.NW

N.SW

N.NE

N.SE

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Insertion into Point Quadtrees
City
Banja Luka
Derventa
Toslic
Tuzla
Sinj

{91{
VS

(XVAL,YVAL)
(19,45)
(40,50)
(38,38)
(54,35)
(4,4)

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Insertion into Point Quadtrees

{92{
VS

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{93{
VS

(a) Splitting of region by Banja Luka (b) Splitting of region by Derventa

(c) Splitting of region by Toslic

(d) Splitting of region by Tuzla

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{94{

Insertion into Point Quadtrees
BanjaLuka (19,45)

BanjaLuka (19,45)

VS

BanjaLuka (19,45)

NW SW NE SE

Derventa (40,50)

(a)

Derventa (40,50)

(b)

(c)

BanjaLuka (19,45)

Derventa (40,50)

BanjaLuka (19,45)

Toslic (38,38)

Sinj (4,4)

Derventa (40,50)

Tuzla (54,35)

(d)

Toslic (38,38)

Toslic (38,38)

Tuzla (54,35)

(e)

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Deletion in Point Quadtrees

{95{
VS

If the node being deleted is a leaf node,'deletion is completely
trivial: we just set the appropriate link eld of node N 's
parent to NIL and return the node to available storage.
As in the case of deletion in 2-d trees, we need to nd an appropriate replacement node for non-leaf nodes being deleted.
Is this easy?
No. Why? Return to Previous slide.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{96{
VS

Expanded Node Type

Expand the node structure qtnodetype to a new node structure newqtnodetype
qtnodetype = record
INFO: infotype
XVAL,YVAL: real
XLB,YLB,XUB,YUB: real  f;1 +1g
NW,SW,NE,SE: "qtnodetype

end

When inserting a node N into the tree T , we need to ensure
that:

{ If N is the root of tree T , then N:XLB = ;1, N:Y LB =
;1, N:XUB

= +1, N:Y UB = +1.
{ If P is the parent of N then the following table describes
what N 's XLB, YLB, XUB, YUB elds should be, depending upon whether N is the NW, SW, NE, SE child
of P . We use the notation w = (P:XUB ; P:XLB ) and
h = (P:Y UB ; Y:Y LB ).
Case

N.XLB

N.XUB

N=P.NW

P.XLB

P.XLB +w

0:5

N=P.SW

P.XLB

P.XLB +w

0:5

N=P.NE

P.XLB +w

0:5

P.XUB

N=P.SE

P.XLB +w

0:5

P.XUB

N.YLB
P.YLB +h

N.YUB
0:5

P.YLB
P.YLB +h
P.YLB

P.YUB
P.YLB +h

0:5

0:5

P.YUB
P.YLB +h

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

0:5

Ch. 4

Multidimensional Data Structures

{97{
VS

Deletion in Point Quadtrees, Continued

{ When deleting an interior node N , we must nd a re-

placement node R in one of the subtrees of N (i.e. in one
of N.NW,N.SW,N.NE,N.SE) such that:
 every other node R1 in N.NW is to the north west of
R,
 every other node R2 in N.SW is to the south west of
R,
 every other node R3 in N.NE is to the north east of R
and
 every other node R4 in N.SE is to the south east of R.
{ Consider the gure on the next page.
{ Suppose we wish to delete Banja Luka from this quadtree.
In this case, one such replacement node can in fact be
found, viz. Toslic.
{ However, in general, it may not always be possible to nd
such a replacement node. See the gure in the page after
next.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Deletion of Banja Luka

{98{
VS

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{99{
VS

(a) Splitting of region by Banja Luka (b) Splitting of region by Dervent

(c) Splitting of region by Toslic

(d) Splitting of region by Tuzla

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{100{

Impossibility of nding Replacement
Candidates

VS

Thus, in general, deletion of an interior node N may require reinsertion of all nodes in the subtrees pointed to
by N:NE , N:SE , N:NW and N:SW . In the worst case,
this may require almost all nodes to be reinserted.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{101{

Range Searches in Point Quadtrees

VS

{ Each node in a point quadtree represents a region.
{ Do not search regions that do not intersect the circle dened by the query.

proc RangeQueryPointQuadtree(T:newqtnodetype, C:circle)
1. If region(T ) \ C = 	 then Halt

2. else
(a) If (T:XV AL T:Y V AL) 2 C then print (T:XV AL T:Y V AL)
(b) RangeQueryPointQuadtree(T.NW,C)
(c) RangeQueryPointQuadtree(T.SW,C)
(d) RangeQueryPointQuadtree(T.NE,C)
(e) RangeQueryPointQuadtree(T.SE,C)

end proc

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

The MX-Quadtree

{102{
VS

{ For both 2-d trees as well as point quadtrees, the \shape"

of the tree depends upon the order in which objects are
inserted into the tree.
{ In addition, both 2-d trees and point quadtrees split regions into 2 (for 2-trees) or 4 (for point quadtrees) subregions { however, the split may be uneven depending
upon exactly where the point (N:XV AL N:Y V AL) is
located inside the region represented by node N .
{ MX-quadtrees attempt to: ensure that the shape (and
height) of the tree are independent of the number of nodes
present in the tree, as well as the order of insertion of these
nodes.
{ MX-quadtrees also attempt to provide ecient deletion
and search algorithms.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

The MX-Quadtree

{103{
VS

{ Assume that the map being represented is \split up" into

a grid of size (2k 
 2k ) for some k.
{ The application developer is free to choose k as s/he likes
to reect the desired granularity, but once s/he chooses
k, s/he is required to keep it xed.

Example:

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

The MX-Quadtree

{104{
VS

{ Node Structure: Exactly the same as for point quadtrees,
execpt that the root of an MX-quadtree represents the region specied by XLB= 0, XUB= 2k , YLB= 0, YUB=
2k .
{ When a region gets \split", it gets split down the middle.
Thus, if N is a node, then the regions represented by the
four children of N are described by the following table.
Child XLB
XUB
YLB
YUB
w
w
NW N.XLB N.XLB+ 2 N.YLB+ 2 N.YLB+w
SW
N.XLB N.XLB+ w2 N.YLB N.YLB+ w2
NE N.XLB+ w2 N.XLB+w N.YLB+ w2 N.YLB+w
SE N.XLB+ w2 N.XLB+w N.YLB N.YLB+ w2
Here, w denotes the width of the region represented by
N.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{105{

Insertion in MX-Quadtrees

VS

nw swne se

A

A

(a)

B

(b)

A

B

C

B

C

(c)

A

D

(d)

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Insertion in MX-Quadtrees

{106{
VS

After insertion of A After Insertion of B

After insertion of C After Insertion of D

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Deletion in MX-Quadtrees

{107{
VS

{ Deletion in an MX-quadtree is a fairly simple operation,

because all points are represented at the leaf level.
{ If N is an interior (i.e. non-leaf) node in an MX-quadtree
whose root is pointed to by T , then the region implicitly
represented by node N contains at least one point that is
explicitly contained in the tree.
{ If we wish to delete a point (x y) from tree T , we try to
preserve this property.
{ This can be done as follows.
 First, we set the appropriate link of N 's parent to NIL.
 We then check if all the four link elds of M are NIL.
 . If so, we examine M 's parent (let us call it P for
now). As M is P 's child, we nd a link eld dir1
such that P:dir1 = M . We then set P:dir1 = NIL
and then (as before) check to see if P 's four link elds
are all NIL.
 f so, we continue this process.
{ Total time required for deletion is O(k).

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Range Queries in MX-Quadtrees

{108{
VS

Handled in exactly the same way as for point quadtrees. But
there are two dierences:
The content of the XLB,XUB,YLB,YUB elds is dierent
from that in the case of point quadtrees.
As points are stored at the leaf level, checking to see if a
point is in the circle dened by the range query needs to be
performed only at the leaf level.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

R-Trees

{109{
VS

Used to store rectangular regions of an image or a map such
as those shown below.
R-trees are particularly useful in storing very large amounts
of data on disk.
They provide a convenient way of minimizing the number of
disk accesses.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

R-Trees

{110{
VS

Each R-tree has an associated order, which is an integer K .
Each nonleaf R-tree node contains a set of at most K rectangles and at least dK=2e rectangles (with the possible exception of the root).
Intuitively, this says that each nonleaf node in the R-tree,
with the exception of the root, must be at least \half" full.
This feature makes R-trees appropriate for disk based retrieval because each disk access brings back a page containing
several (i.e. at least K2 rectangles).
R-trees manipulate two kinds of rectangles:
\Real" rectangles (such as those shown in the map on the
previous slide) or
\Group" rectangles uch as those shown below.

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{111{
VS

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{112{
VS

Example R-Tree

This is an R-tree of order 4, associated with the rectangles shown
earlier.
G1 G2

R1 R2 R3

G3

R4 R5 R6 R7

R8 R9

Leaf Nodes

R-tree nodes have the following structure:

rtnodetype = record
Rec1 : : : Rec : rectangle
P1 : : : P : "rtnodetype
end
K

K

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Insertion into an R-Tree

{113{
VS

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

Insertion into an R-Tree

(a)

{114{
VS

(b)

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{115{

An Incorrect Insertion into an R-Tree

VS

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{116{
VS

Deletion in R-Trees

Deletion of objects from R-trees may cause a node in the Rtree to \underow" because an R-tree of order K must contain
at least dK=2e rectangles (real or group) in it.
When we delete a rectangle from an R-tree, we must ensure
that that node is not \underfull."

Example: Delete R9 from the following R-tree.
G1 G2

R1 R2 R3

G3

R4 R5 R6 R7

R8 R9

Leaf Nodes

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

Ch. 4

Multidimensional Data Structures

{117{
VS

Deletion in R-Trees

If we delete R9, then the node containing rectangle R9 would
have only one node in it.
In this case, we must create a new logical grouping.
One possibility is to reallocate the groups as follows:
Group Rectangles
G1 R1,R2,R3
G2 R4,R6,R7
G3
R5,R8
The new new R-tree is:

R1 R2 R3

G1 G2

G3

R4

R6 R7

R5 R9

Leaf Nodes

V.S. Subrahmanian |All Rights Reserved
These slides may not be duplicated without explicit written permission from Morgan Kaufmann Press.
Principles of Multimedia Database Systems Morgan Kaufmann Copyright c 1997

