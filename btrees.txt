Multiway Search Tree (MST)

 Generalization of BSTs
 Suitable for disk
 MST of order n: 
 MST of order n: 

 Each node has n or fewer sub-trees

 S1 S2.... Sm , m  n

 Each node has n-1 or fewer keys
 K1 2 ...m-1 : m-1 keys in ascending 
order K(Si)  i   K(Si+1) ,  K(Sm-1) < K(Sm)

E.G.M. Petrakis

B-trees

1

n=4

n=3

E.G.M. Petrakis

B-trees

2

MSTs for Disk

 Nodes correspond to disk pages 
 Pros:

 tree height is low for large n
 tree height is low for large n
 fewer disk accesses

 Cons:

 low space utilization if non-full 
 MSTs are non-balanced in general!

E.G.M. Petrakis

B-trees

3

4000 keys, n=5

 At least 4000/(5-1) nodes (pages)

 1st level (root): 1 node, 4 keys, 5 sub-trees  +
 2nd level: 5 nodes, 20 keys, 25 sub-trees  +
 3rd level: 25 nodes, 100 keys, 125 sub-trees +
 3rd level: 25 nodes, 100 keys, 125 sub-trees +
 4th level: 125 nodes, 500 keys,525 sub-trees +
 5th level: 525 nodes, 2100 keys, 2625 sub-

tress +

 6th level: 2625 nodes, 10500 keys, .... 
 tree height = 6 (including root)

 If n = 11 at least 400 nodes and tree 

height = 3

E.G.M. Petrakis

B-trees

4

Operations on MSTs

 Search: returns pointer to node 

containing the key and position of 
key in the node
key in the node


 Insert new key if not already in the 

tree

 Delete existing key

E.G.M. Petrakis

B-trees

5

Important Issues

 Keep MST balanced after insertions 

or deletions

 Balanced MSTs: B-trees, B+-trees
 Balanced MSTs: B-trees, B+-trees
 Reduce number of disk accesses
 Data storage: two alternatives 
inside nodes: less sub-trees, nodes

1.
2. pointers from the nodes to data pages

E.G.M. Petrakis

B-trees

6

Search Algorithm

MST *search (MST *tree, int n, keytype key, int *position) {

MST *p = tree;
while (p != null) {

// search a node

i = nodesearch(p, key); 
i = nodesearch(p, key); 
if (i < numtrees(p)  1 && key == key(p, i))

{ *position = i; return p;  }

p = son(p, i);

}
position = -1;
return(-1);

}
E.G.M. Petrakis

B-trees

7

E.G.M. Petrakis

B-trees

8

Insertions

 Search & insert key it if not there 
a) the tree grows at the leafs => the tree 

becomes imbalanced => not equal 
becomes imbalanced => not equal 
number of disk accesses for every key 
number of disk accesses for every key 
b) the shape of the tree depends on the 

insertion sequence

c) low storage utilization, many non-full 

nodes

E.G.M. Petrakis

B-trees

9

insert: 70 75 82 77 71 73 84 86 87 85

70       75       82

70       75       82

n = 4

max 3 keys/node

71         73 

77

84       86       87

85

E.G.M. Petrakis

B-trees

10

MST Deletions

 Find and delete a key from a node

 free the node if empty

 If the key has right or/and left sub-

trees => find its successor or
trees => find its successor or
predecessor 
 min value of right subtree or max value of 

left subtree

 put this in the position of the key and 

delete the successor or predecessor

 The tree becomes imbalanced

E.G.M. Petrakis

B-trees

11

n=4
60 180 300

30   50

150 170

220 280

153 162

173 178

187 202

delete 150, 180

60 187   300

30   50

153 170

220 280

162

E.G.M. Petrakis

173 178

B-trees

202

12

Definition of n-Order B-Tree 

 Every path from the root to a leaf has 

the same length h >= 0

 Each node except the root and the leafs 
has at least      sub-trees and          keys
has at least      sub-trees and          keys
 Each node has at most n sub-trees and n-




n
n




1
1

n

n

2







2

1 keys

 The root has at least 1 node and 2 sub-

trees or it is a leaf

E.G.M. Petrakis

B-trees

13

22

n=3

9   17

30   40

4    8 

12   13

18     

12   13

12  13

13    25     70

4     8    9   12

17    18     22       

n=5

27  30    32

n=7

18      50

4  8  9  12  13  17

22  25  27  30  32 

E.G.M. Petrakis

B-trees

14

B-Tree Insertions

 Find leaf to insert new node
 If not full, insert key in proper position else
 Create a new node and split contents of 

old node
old node
 left and right node
 left and right node
 the n/2 lower keys go into the left node
 the n/2 larger keys go into the right node
 the separator key goes up to the father node

(cid:2) If n is even: one more key in left (left  

bias) or right node (right bias)

E.G.M. Petrakis

B-trees

15

n=5

E.G.M. Petrakis

B-trees

16

n=4

E.G.M. Petrakis

B-trees

17

B-Tree Insertions (cont.)

 If the father node is full: split it 

and proceed the same way, the new 
father may split again if it is full ...

 The splits may reach the root which 
 The splits may reach the root which 

may also split creating a new root
(cid:2) The changes are propagated from 

the leafs to the root 

(cid:2) The tree remains balanced

E.G.M. Petrakis

B-trees

18

n=5

E.G.M. Petrakis

B-trees

19

Advantages

 The tree remains balanced!!
 Good storage utilization:  about 50% 
 Low tree height, equal for all leafs 
 Low tree height, equal for all leafs 

=> same number of disk accesses for 
all leafs

 B-trees: MSTs with  additional 

properties
 special insertion & deletion algorithms

E.G.M. Petrakis

B-trees

20

B-Tree Deletions

Two cases:
a) Merging: If less than n/2 keys in left and right 
node then, sum of keys + separator key in father 
node < n




the two nodes are merged, 
the two nodes are merged, 
one node is freed

b) Borrowing: if after deletion the node has less 
than n/2 keys and its left (or right) node has 
more than n/2 keys




find successor of separator key 
put  separator in the place of the deleted key 
put the successor as separator key

E.G.M. Petrakis

B-trees

21

n = 4

n = 5

E.G.M. Petrakis

B-trees

22

n = 5
n = 5

E.G.M. Petrakis

B-trees

23

Performance

103 104 105 106 107
3
7

5

4

6

disc

accesses

n N

10

50

2

100 2
100 2

150

2

3

2
2

2

3

3
3

3

4

3
3

3

4

4
4

4

[logn (N+1) ]  h [log(n+1)/2 ((N+1)/2) ] +1

 Search: the cost increases with the lognN
 Tree height ~ lognN

E.G.M. Petrakis

B-trees

24

Performance (cont.)

 Insertions/Deletions: Cost 

proportional to 2h
 the changes propagate towards the 

root 
root 

 Observation: The cost drops with n
 larger size of track (page) but, in fact 
the cost increases with the amount of 
information which is transferred from 
the disk into the main memory

E.G.M. Petrakis

B-trees

25

Problem

 B-trees are good for random

accesses 
 E.g., search(30)
 E.g., search(30)

 But not for range queries: 

require multiple tree traversals
 search(20-30)

E.G.M. Petrakis

B-trees

26

B+-Trees

 At most n sub-trees and n-1 keys

n
 At least 
keys

2

 Root: at least 2 sub-trees and 1 key
 Root: at least 2 sub-trees and 1 key
 The keys can be repeated in non-

sub-trees and 











n

2

1

leaf nodes

 Only the leafs point to data pages
 The leafs are linked together with 

pointers

E.G.M. Petrakis

B-trees

27

index

data pages

E.G.M. Petrakis

B-trees

28

Performance

 Better than B-trees for range searching
 B-trees are better for random accesses
 The search must reach a leaf  before it is 

confirmed
confirmed
 internal keys may not correspond to actual 
record information (can be separator keys 
only)

 insertions: leave middle key in father node
 deletions: do not always delete key from 

internal node (if it is a separator key)

E.G.M. Petrakis

B-trees

29

Insertions

 Find appropriate leaf node to insert key
 If it is full:

 allocate new node
 split its contents and 
 split its contents and 

 insert separator key in father node

 If the father is full

 allocate new node and split the same way
 continue upwards if necessary 
 if the root is split create new root with two 

sub-trees

E.G.M. Petrakis

B-trees

30

Deletions

 Find and delete key from the leaf
 If the leaf has < n/2 keys

a) borrowing if its neighbor leaf has more than 
n/2 keys update father node (the separator 
n/2 keys update father node (the separator 
key may change) or

b) merging with neighbor if both have < n keys 
causes deletion of separator in father node

update father node



 Continue upwards if father node is not 

the root and has less than n/2 keys 

E.G.M. Petrakis

B-trees

31

index

46

69

19 31 46

61 69

82

13
19
19

28
31
31

41
46
46

50
53
53
61
61

66
69
69

75
79
79
82
82

84
88
88

data pages

data pages: min 2, max 3 records 

index pages: min 2, max 3 pointers

data pages dont store 
pointers as non-leaf nodes do 
but they are kinked together

B+ order: n = 4,  n/2 =2

E.G.M. Petrakis

B-trees

32

insert 55 with page splitting

53

61

69

50
53

55
61

delete 84 with borrowing:
delete 84 with borrowing:

75
79

79

82
88

E.G.M. Petrakis

B-trees

33

delete 31 with merging

19

46

28
41
46
46

free
page
page

E.G.M. Petrakis

B-trees

34

B-trees and Variants

 Many variants: 

 B-trees: Bayer and Mc Greight, 1971
 B+-trees, B*-trees the most successful 

variants

 The most successful data organization 
 The most successful data organization 

for secondary storage (based on primary 
key)
 very good performance, comparable to 

hashing

 fully dynamic behavior
 good space utilization (69% on the average)

E.G.M. Petrakis

B-trees

35

B+/B-Trees Comparison 

 B-trees: no key repetition, better 

for random accesses (do not always 
reach a leaf), data pages on any 
reach a leaf), data pages on any 
node
node

 B+-trees: key repetition, data page 
on leaf nodes only, better for range 
queries, easier implementation

E.G.M. Petrakis

B-trees

36

