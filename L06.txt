Lecture 6: Depth-First Search
Background
Graph Traversal Algorithms: Graph traversal algorithms visit the vertices of a graph, according to some
strategy.
Example: The BFS is an example of a graph traversal
algorithm that traverses each connected component
separately. It traverses the vertices of each component in increasing order of the distances of the vertices from the ‚Äòroot‚Äô of the component.
Can be thought of processing ‚Äòwide‚Äô and then ‚Äòdeep‚Äô.
DFS will process the vertices first deep and then wide.
After processing a vertex it recursively processes all
of its descendants.
1

DFS Algorithm


 	

Graph is
. The algorithm works in discrete
time steps. Each vertex 
 is given a ‚Äúdiscovery‚Äù time



 when it is first processed and a ‚Äúfinish‚Äù time,  

when all of its descendants are finished.


The output is a collection of trees. As well as 
 and


 
 , each node points to  
 , its parent in the
forest.

2

DFS Algorithm
DFS{G} {
for each u in V do // Initialize
color[u] = white;
pred[u] = NULL;
time=0;
for each u in V do
// start a new tree
if (color[u] == white) DFSVisit(u);
}
DFSVisit(u) {
color[u] = gray; // u is discovered
d[u] = ++time;
// u discovery time
for each v in Adj(u) do
// Visit undiscovered vertex
if (color[v] == white) {
pred[v] = u;
DFSVisit(v);
}
color[u] = black; // u has finished
f[u] = ++time;
// u finish time
}
3

DFS Example
a

b

d

c

g

e
f
a
1/8

9/14

d

B
b

e

f

3/6

2/7

10/11

c

g

12/13

B

4/5
4

What Does DFS Do
Given a digraph
of and



 	

, it traverses all vertices

constructs a forest (a collection of rooted trees),
together with a set of source vertices (the roots);
and

outputs two arrays,













 , the two time units.




Note: Forest is stored in   array with  


pointing to parent of 
 in the forest.    of a root
node is NULL.
DFS Forest: DFS creates a forest
collection of rooted trees, where
  

  
	







   	

 	

 

where DFS calls are made 
5

, a

Idea of the DFS Algorithm
In DFS, edges are explored out of the most recently discovered vertex . Only edges to unexplored vertices are
explored.


When all of ‚Äôs edges have been explored, the search ‚Äúbacktracks‚Äù to explore edges leaving the vertex from which
was discovered.




The process continues until we have discovered all the vertices that are reachable from the original source vertex.
If any undiscovered vertices remain, then one of them is selected as a new source vertex, and the search is repeated
from that source vertex.
This process is repeated until all vertices are discovered.
The strategy of the DFS is to search ‚Äúdeeper‚Äù in the graph whenever possible.

6

Four Arrays for the DFS Algorithm
To record data gathered during traversal.






 , the color of each vertex visited: white

means undiscovered, gray means discovered but
not finished processing, and black means finished
processing.

	



 , the predecessor pointer, pointing back to


the vertex that discovered .


 , the discovery time, a counter indicating when


vertex





is discovered.

 , the finishing time, a counter indicating when


the processing of vertex
dants ) is finished.

(and all its descen-

7

Tree structure
DFS imposes a tree (a collection of trees, or forest) on
the structure of the graph. For undirected graphs, the
edges are classified as follows:

Tree edges: which are the edges (pred[v], v) where
DFS calls are made.

Back edges: which are the edges (u, v) where v is

an ancestor of in the tree.

8

Time-stamp structure
There is also an important and useful structure to the
time stamps.

u is a descendant of v, if and only if
   
a subinterval of

  
  .

 

u is an ancestor of v, if and only if
   

  
  .
contains

u is unrelated to v, if and only if
   

  
  are disjoint intervals.

 

  
 
  is

 



 





 





  and

9

Time-stamp structure : Proof
The idea is to consider every case. We first consider




.






 , then is discovered when 
 is still
1. If  


not finished yet (marked gray). This implies is
descendant of 
 .





Moreover, since is discovered later than 
 ,
   
should finish before 
 . Hence we have
 

   

  
  .
is a subinterval of




 



 







2. If  

 , obviously

  
  and
 
 

are disjoint. It means that when or 
 is discovered, the others are not marked gray. Hence neither vertex is a descendant of the other.

The argument for other case, where
similar.










 , is
10

Running Time Analysis of DFS
DFS{G} {
for each u in V do // 2n
color[u] = white;
pred[u] = NULL;
time=0;
// 1
for each u in V
// n
if (color[u] == white) DFSVisit(u);
}// Sum: 3n + 1
DFSVisit(u) {
// 1
color[u] = gray; // 1
d[u] = ++time;
// 2
// out-degree of u
for each v in Adj(u) do
if (color[v] == white) {
pred[v] = u;
DFSVisit(v);
// 2
}
color[u] = black;// 1
f[u] = ++time;
// 2
}// Sum : T_u <= 7 + 2 out-degree(u)
11

Running Time Analysis of DFS ‚Äì Continued
The total running time is


 	



	




We have

	











	


  	 	 



  	 	 



outdeg



 	

and

	









outdeg

	



	



Hence
   	 	
   	 	

Therefore

	



	



   	 	 

 	





	









	



	











	 

	

	

	


.
12

An Application of DFS : Articulation points


   	

Definition : Let
be a connected undirected graph. An articulation point (or cut vertex) of
is a vertex whose removal disconnects .

Given a connected graph
points?

, how to find all articulation

13

Articulation points: Easy solution
The easiest solution is to remove a vertex (and its
corresponding edges) one by one from
and test
whether the resulting graph is still connected or not
 
   	 	
.
(say by DFS). The running time is
A more elegant algorithm always starts at simple observations. Suppose we run DFS on , we get a DFS
tree. If the root has two or more children, it is an articulation point. Moreover, a leaf is not an articulation
point.
Some parts of the tree have edges that ‚Äôclimbs‚Äô to the
upper part of the tree , while other does not have this
edge.

14

Articulation points: Three observations
These lead to the following ideas to identify articulation points:

1. The root of the DFS tree is an articulation if it has
two or more children.

2. A leaf of a DFS tree is not an articulation point.

3. Any other internal vertex 
 in the DFS tree, if it
has one or more subtrees rooted at a child of 

that does NOT have an edge which climbs ‚Äôhigher‚Äô
than 
 , then 
 is an articulation point.

15

Articulation points: How to climb up
Observation 1 and 2 can be handled easily. How to
make use of observation 3?
Observe that for an undirected graph, the DFS tree
can only has tree edges or back edges. A subtree
can only climb to the upper part of the tree by a back
edge, and a vertex can only climb up to its ancestor.

v

w1

w2

....

wk

16

Articulation points: Tackle observation 3
We make use of the discovery time in the DFS tree
to define ‚Äôlow‚Äô and ‚Äôhigh‚Äô. Observe that if we follow a
path from an ancestor (high) to a descendant (low),
the discovery time is in increasing order.
If there is a subtree rooted at a children of 
 which
does not have a back edge connecting to a SMALLER

discovery time than 
 , then 
 is an articulation point.
How do we know a subtree has a back edge climbing to an upper part of the tree ? We make use of
recursion.
   
 be the
In the following algorithm, we define 
smallest value of a subtree rooted at 
 to which it can
climb up by a back edge.

17

ArtPt(v) {
color[v] = gray;
// v initially can only climb up to itself
Low[v] = d[v] = ++time;
for all w in Adj(v) do {
if (color[w] == white) {
pred[w] = v;
ArtPt(w);
// When ArtPt(w) is completed, Low[w] stores the
// lowest value it can climb up for a subtree
// rooted at w.
// Recall v is the parent of w.
if (pred [v] == NULL) {
// v has no predecessor , so v is the root.
// apply observation 1.
if (‚Äôw‚Äô is v‚Äôs second child) output v;
}
else if (Low[w] >= d[v]) output v;
// subtree rooted at w can‚Äôt climb higher than v
// apply observation 3.
// update Low[v] if a children subtree can
// climb higher
Low[v] = min(Low[v], Low[w]);

}

}
else if (w != pred[v]) { // (v, w) is a back edge
// update Low[v] if a back edge climbs higher
Low[v] = min(Low[v], d[w]);
}
}
color[v] = black;
18

Articulation points: Example

(d[v], Low[v])=(1, 1)

(2, 2‚àí>1)
(8, 8‚àí>1)
(3, 3‚àí>1)

(9, 9‚àí>1)

(11, 11‚àí>8)

(5, 5‚àí>3)
(4, 4‚àí>1)
(6, 6‚àí>3)

(10, 10‚àí>8‚àí>1)
(7, 7‚àí>5‚àí>3)

19

An Application of DFS : Biconnected components


   	

A biconnected graph
is a connected
graph which has no articulation points.
To disconnect a biconnected graph, we must remove
at least two vertices.
A biconnected component of a graph is maximal
biconnected subgraph (i.e., it is not contained in any
larger biconnected subgraph) of .
The problem is how to identify all biconnected components of ?

20

An Application of DFS : Biconnected components

21

An Application of DFS : Biconnected components
Key observations:

1. Two different biconnected components should not
have any common edges (but they can have common vertex).

2. That common vertex linking two (or more) biconnected components must be an articulation point
of .

3. That is, the articulation points of
biconnected components of . If
ulation point, is biconnected.

‚Äôseperate‚Äô the
has no artic-

22

An Application of DFS : Biconnected components
It now boils down to find all the articulation points of
and check how they seperate the biconnected components.

u
x
1 binconnected component
recursive calls

a

recursive calls finished

b
recursive calls

recursive calls finished

1 binconnected component

Again, we make use of the recursive call structure.
23

An Application of DFS : Biconnected components
Recall that DFS is a recursive algorithm, we make use
of a stack to trace back the recursive calls. When we
   	
process an edge
(either by a recursive call on
   	

vertex from vertex , or
is back edge), we

push that edge to a stack. Later, if we identify as an
articulation point (where the subtree rooted at can‚Äôt

climb higher than ), then all the edges from the top
   	
of the stack down to
are the edges of one biconnected component. (Observe how a stack is used
to trace the recursive calls). So we pop edges out of
   	
   	
the stack until
(also pop
), those edges
belong to a biconnected component.

24

An Application of DFS : Biconnected components
a

h

b
c
i

e

d

f

(d, a)
(c, d)
(b, c)
(a, b)

j

k

g
(g, c)
(g, e)
(f, g)
(e, f)
(c, e)
(d, a)
(c, d)
(b, c)
(a, b)

(d, a)
(c, d)
(b, c)
(a, b)

‚Äôc‚Äô is idenfied as an articulation
point, as ‚Äôe‚Äô can‚Äôt climb higher;
pop the stack until (c, e), those
edges are in the same biconnected component

25

