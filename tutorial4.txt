Red Black Tree

A balanced binary search tree

Red Black Tree

1. Every node is either red or black
2. For each node, all paths from the node 

to descendant leaves contain the 
same number of black nodes
If a node is red, then both its children 
are black

3.

4. The root is black
5. Every dummy leaf is black

Balance

log n

Balance

2 log n

Notation

 +1 means need one more black for the 

node

+1

Insertion

 Set inserted node to be red

 Fix the violation of Properties 3 and 4

Insertion

To insert x:
 Uncle is red  (Case 1)
 Uncle is black

 Both x and parent are left (or right) child  

(Case 2)

 Others  (Case 3)

Insertion

 Case 1: Uncle is red

x

x

x

Recursively

fix x

Insertion

 Case 2: Uncle is black. Both x and 

parent are left (or right) child

x

x

+1

x

Complete

Insertion

 Case 3: Others

x

x

x

x

Case 2

Delete vs Remove

 To delete z, node z may not be 

removed in the tree

 Denote y as the removed node

 Let x be the child of y

Deletion

 No violation when the removed node y 

is red

 Otherwise, fix the violation of property 2 

and 4

 x is red  (Case 1)
 x is black

 Sibling is red  (Case 2)
 Sibling, denoted as s, is black

 Both ss children are black  (Case 3)
 The children of s, left are black, right are red  

(Case 4)

 Right children of s are red
 Parent are black  (Case 5)
 Parent are red  (Case 6)

Deletion

 Case 1: x is red

x+1

x

Complete

Deletion

 Case 2: Sibling is red

+1

x

s

+2

x

s

a

b

a

b

+1

x

s

a

b

+1

x

s

Case 3~6

Deletion

 Case 3: Both siblings children are black

+1

x

s

+1
x

s

x+1

Recursively fix x

Deletion

 Case 4: Siblings left child is red, right 

child is black

+1

x

s

+1

x

s

+1

x

a

+1

x

s

b

a
c d

b

+1

a
c d

c

s

d

b

Case 5~6

Deletion

 Case 5: Siblings right child is red

+1

x

s

s

+1

s

x

x

Complete

Deletion

 Case 6: Siblings right child is red

+1

x

s

s

s

x

x

Complete

2 colors, why?

 Tree height is not that tight

 Reduce the cost to balance tree

