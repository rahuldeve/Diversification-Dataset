Algorithms

ROBERT SEDGEWICK  |  KEVIN WAYNE

GEOMETRIC APPLICATIONS OF BSTS
 1d range search
 line segment intersection
 kd trees
 interval search trees
 rectangle intersection

http://algs4.cs.princeton.edu

ROBERT SEDGEWICK  |  KEVIN WAYNEFOURTH EDITIONAlgorithmsOverview

This lecture.  Intersections among geometric objects.

2d orthogonal range search

orthogonal rectangle intersection

Applications.  CAD, games, movies, virtual reality, databases, GIS, ....

Efficient solutions.  Binary search trees (and extensions).

2

GEOMETRIC APPLICATIONS OF BSTS
 1d range search
 line segment intersection
 kd trees
 interval search trees
 rectangle intersection

http://algs4.cs.princeton.edu

ROBERT SEDGEWICK  |  KEVIN WAYNEAlgorithms1d range search

Extension of ordered symbol table.

(cid:638)Insert key-value pair.
(cid:638)Search for key k.
(cid:638)Delete key k.
(cid:638)Range search:  find all keys between k1 and k2.
(cid:638)Range count:  number of keys between k1 and k2.

Application.  Database queries.

Geometric interpretation.

(cid:638)Keys are point on a line.
(cid:638)Find/count points in a given 1d interval.

 B

 B D

insert B 
insert D 
insert A 
insert I 
insert H 
insert F 
insert P 
search G to K   H I 
count G to K   2

 A B D
 A B D I

 A B D H I

 A B D F H I
 A B D F H I P

4

1d range search:  elementary implementations

Unordered list.  Fast insert, slow range search.
Ordered array.  Slow insert, binary search for k1 and k2 to do range search.

order of growth of running time for 1d range search

data structure

insert

range count

range search

unordered list

ordered array

goal

1

N

log N

N

log N

log N

N

R + log N

R + log N

N = number of keys
R = number of keys that match

5

1d range count:  BST implementation

1d range count.  How many keys between lo and hi ?

6
S

7
X

5
R

2
E

rank

0
A

1
C

3
H

4
M

public int size(Key lo, Key hi) 
{ 
   if (contains(hi)) return rank(hi) - rank(lo) + 1; 
   else              return rank(hi) - rank(lo); 
} 
number of keys < hi

Proposition.  Running time proportional to log N.
Pf.  Nodes examined = search path to lo + search path to hi. 

6

1d range search:  BST implementation

1d range search.  Find all keys between lo and hi.

(cid:638)Recursively find all keys in left subtree (if any could fall in range).
(cid:638)Check key in current node.
(cid:638)Recursively find all keys in right subtree (if any could fall in range).

searching in the range [F..T]

red keys are used in compares

but are not in the range

E

A

C

H

S

X

R

M

L

P

black keys are
in the range

Range search in a BST

Proposition.  Running time proportional to R + log N.
Pf.  Nodes examined = search path to lo + search path to hi +  matches.

7

GEOMETRIC APPLICATIONS OF BSTS
 1d range search
 line segment intersection
 kd trees
 interval search trees
 rectangle intersection

http://algs4.cs.princeton.edu

ROBERT SEDGEWICK  |  KEVIN WAYNEAlgorithmsOrthogonal line segment intersection

Given N horizontal and vertical line segments, find all intersections.

Quadratic algorithm.  Check all pairs of line segments for intersection.

Nondegeneracy assumption.  All x- and y-coordinates are distinct.

9

Orthogonal line segment intersection:  sweep-line algorithm

Sweep vertical line from left to right.

(cid:638)x-coordinates define events.
(cid:638)h-segment (left endpoint):  insert y-coordinate into BST.

3

4

2

1

0

3

2

1

0

y-coordinates

10

Orthogonal line segment intersection:  sweep-line algorithm

Sweep vertical line from left to right.

(cid:638)x-coordinates define events.
(cid:638)h-segment (left endpoint):  insert y-coordinate into BST.
(cid:638)h-segment (right endpoint):  remove y-coordinate from BST.

3

4

2

1

0

3

1

0

y-coordinates

11

Orthogonal line segment intersection:  sweep-line algorithm

Sweep vertical line from left to right.

(cid:638)x-coordinates define events.
(cid:638)h-segment (left endpoint):  insert y-coordinate into BST.
(cid:638)h-segment (right endpoint):  remove y-coordinate from BST.
(cid:638)v-segment:  range search for interval of y-endpoints.

3

4

2

1

0

1d range
search

3

1

0

y-coordinates

12

Orthogonal line segment intersection:  sweep-line analysis

Proposition. The sweep-line algorithm takes time proportional to N log N + R 
to find all R intersections among N orthogonal line segments.

Pf.(cid:638)Put x-coordinates on a PQ (or sort).
(cid:638)Insert y-coordinates into BST.
(cid:638)Delete y-coordinates from BST.
(cid:638)Range searches in BST.

N log N

N log N

N log N

N log N + R

Bottom line.  Sweep line reduces 2d orthogonal line segment intersection 
search to 1d range search.

13

GEOMETRIC APPLICATIONS OF BSTS
 1d range search
 line segment intersection
 kd trees
 interval search trees
 rectangle intersection

http://algs4.cs.princeton.edu

ROBERT SEDGEWICK  |  KEVIN WAYNEAlgorithms2-d orthogonal range search

Extension of ordered symbol-table to 2d keys.

(cid:638)Insert a 2d key.
(cid:638)Delete a 2d key.
(cid:638)Search for a 2d key.
(cid:638)Range search:  find all keys that lie in a 2d range.
(cid:638)Range count:  number of keys that lie in a 2d range.

Applications.  Networking, circuit design, databases, ...

Geometric interpretation.

(cid:638)Keys are point in the plane.
(cid:638)Find/count points in a given h-v rectangle

rectangle is axis-aligned

15

2d orthogonal range search:  grid implementation

Grid implementation.

(cid:638)Divide space into M-by-M grid of squares.
(cid:638)Create list of points contained in each square.
(cid:638)Use 2d array to directly index relevant square. 
(cid:638)Insert:  add (x, y) to list for corresponding square.
(cid:638)Range search:  examine only squares that intersect 2d range query.

RT

LB

16

2d orthogonal range search:  grid implementation analysis

Space-time tradeoff.

(cid:638)Space:  M 2 + N.
(cid:638)Time:  1  +  N / M 2 per square examined, on average.

Choose grid square size to tune performance.

(cid:638)Too small:  wastes space.
(cid:638)Too large:  too many points per square.
(cid:638)Rule of thumb:  N-by-N grid.

Running time.  [if points are evenly distributed]

(cid:638)Initialize data structure:  N.
(cid:638)Insert point:  1.
(cid:638)Range search:  1 per point in range.

choose M ~ N 

RT

LB

17

Clustering

Grid implementation.  Fast, simple solution for evenly-distributed points.

Problem.  Clustering a well-known phenomenon in geometric data.

(cid:638)Lists are too long, even though average length is short.
(cid:638)Need data structure that adapts gracefully to data.

18

Clustering

Grid implementation.  Fast, simple solution for evenly-distributed points.

Problem.  Clustering a well-known phenomenon in geometric data.

Ex.  USA map data.

13,000 points, 1000 grid squares

half the squares are empty

half the points are

in 10% of the squares

19

Space-partitioning trees

Use a tree to represent a recursive subdivision of 2d space.

Grid.  Divide space uniformly into squares.
2d tree.   Recursively divide space into two halfplanes. 
Quadtree.  Recursively divide space into four quadrants.
BSP tree.  Recursively divide space into two regions.

Grid

2d tree

Quadtree

BSP tree

20

Space-partitioning trees:  applications

Applications.

(cid:638)Ray tracing.
(cid:638)2d range search.
(cid:638)Flight simulators.
(cid:638)N-body simulation.
(cid:638)Collision detection.
(cid:638)Astronomical databases. 
(cid:638)Nearest neighbor search. 
(cid:638)Adaptive mesh generation.
(cid:638)Accelerate rendering in Doom.
(cid:638)Hidden surface removal and shadow casting. 

Grid

2d tree

Quadtree

BSP tree

21

2d tree construction

Recursively partition plane into two halfplanes.

8

9

1

3

2

4

5

6

7

8

10

9

6

3

5

1

4

2

7

10

22

2d tree implementation

Data structure.  BST, but alternate using x- and y-coordinates as key.

(cid:638)Search gives rectangle containing point.
(cid:638)Insert further subdivides the plane.

p

q

p

even levels

8

9

points
left of p

points

right of p

6

3

5

1

2

7

10

4

points
below q

points
above q

q

odd levels

1

3

2

4

5

6

7

8

10

9

23

2d tree demo:  range search

Goal. Find all points in a query axis-aligned rectangle.

(cid:638)Check if point in node lies in given rectangle.
(cid:638)Recursively search left/bottom (if any could fall in rectangle).
(cid:638)Recursively search right/top (if any could fall in rectangle).

8

9

1

3

2

4

5

6

7

8

10

9

6

3

5

1

4

2

7

10

24

2d tree demo:  range search

Goal. Find all points in a query axis-aligned rectangle.

(cid:638)Check if point in node lies in given rectangle.
(cid:638)Recursively search left/bottom (if any could fall in rectangle).
(cid:638)Recursively search right/top (if any could fall in rectangle).

8

9

1

3

2

4

5

6

7

8

10

9

6

3

5

1

2

7

10

4

done

25

Range search in a 2d tree analysis

Typical case.  R + log N.
Worst case (assuming tree is balanced).  R + N.

8

9

1

3

2

4

5

6

7

8

10

9

6

3

5

1

4

2

7

10

26

2d tree demo:  nearest neighbor

Goal.  Find closest point to query point.

8

9

1

3

2

4

5

6

7

8

10

9

6

query point

3

5

1

4

2

7

10

27

2d tree demo:  nearest neighbor
(cid:638)Check distance from point in node to query point.
(cid:638)Recursively search left/bottom (if it could contain a closer point).
(cid:638)Recursively search right/top (if it could contain a closer point).
(cid:638)Organize method so that it begins by searching for query point.

8

9

1

3

2

4

5

6

7

8

10

9

6

3

5

1

2

7

10

4

nearest neighbor = 5

28

Nearest neighbor search in a 2d tree analysis

Typical case.  log N. 
Worst case (even if tree is balanced).  N.

8

9

1

3

2

4

5

6

7

8

10

9

6

3

5

1

2

7

10

4

nearest neighbor = 5

29
30

Flocking birds

Q.   What "natural algorithm" do starlings, migrating geese, starlings, 
cranes, bait balls of fish, and flashing fireflies use to flock?

http://www.youtube.com/watch?v=XH-groCeKbE

30

Flocking boids  [Craig Reynolds, 1986]

Boids.  Three simple rules lead to complex emergent flocking behavior:

(cid:638)Collision avoidance:  point away from k nearest boids.
(cid:638)Flock centering:  point towards the center of mass of k nearest boids.
(cid:638)Velocity matching:  update velocity to the average of k nearest boids.

31

Kd tree

Kd tree.  Recursively partition k-dimensional space into 2 halfspaces. 

Implementation.  BST, but cycle through dimensions ala 2d trees.

p

level  i (mod k)

points

whose ith
coordinate

is less than ps

points

whose ith
coordinate

is greater than ps

Efficient, simple data structure for processing k-dimensional data.

(cid:638)Widely used.
(cid:638)Adapts well to high-dimensional and clustered data. 
(cid:638)Discovered by an undergrad in an algorithms class!

Jon Bentley

32

N-body simulation

Goal.  Simulate the motion of N particles, mutually affected by gravity. 

Brute force.  For each pair of particles, compute force:
Running time.  Time per step is N 2.

F = G m1 m2

r2

http://www.youtube.com/watch?v=ua7YlN4eL_w

33

Appel's algorithm for N-body simulation

Key idea.  Suppose particle is far, far away from cluster of particles.

(cid:638)Treat cluster of particles as a single aggregate particle.
(cid:638)Compute force between particle and center of mass of aggregate.

34

Appel's algorithm for N-body simulation
(cid:638)Build 3d-tree with N particles as nodes.
(cid:638)Store center-of-mass of subtree in each node.
(cid:638)To compute total force acting on a particle, traverse tree, but stop

as soon as distance from particle to subdivision is sufficiently large.

SIAM J. ScI. STAT. COMPUT.
Vol. 6, No. 1, January 1985

1985 Society for Industrial and Applied Mathematics
O08

AN EFFICIENT PROGRAM FOR MANY-BODY SIMULATION*

ANDREW W. APPEL

Abstract. The simulation of N particles interacting in a gravitational force field is useful in astrophysics,
but such simulations become costly for large N. Representing the universe as a tree structure with the
particles at the leaves and internal nodes labeled with the centers of mass of their descendants allows several
simultaneous attacks on the computation time required by the problem. These approaches range from
algorithmic changes (replacing an O(N) algorithm with an algorithm whose time-complexity is believed
to be O(N log N)) to data structure modifications, code-tuning, and hardware modifications. The changes
reduced the running time of a large problem (N 10,000) by a factor of four hundred. This paper describes
both the particular program and the methodology underlying such speedups.

Impact.  Running time per step is N log N    enables new research.

1. Introduction. Isaac Newton calculated the behavior of two particles interacting
through the force of gravity, but he was unable to solve the equations for three particles.
In this he was not alone [7, p. 634], and systems of three or more particles can be
solved only numerically. Iterative methods are usually used, computing at each discrete
time interval the force on each particle, and then computing the new velocities and
positions for each particle.
A naive implementation of an iterative many-body simulator is computationally
very expensive for large numbers of particles, where "expensive" means days of Cray-1
time or a year of VAX time. This paper describes the development of an efficient
program in which several aspects of the computation were made faster. The initial

35

GEOMETRIC APPLICATIONS OF BSTS
 1d range search
 line segment intersection
 kd trees
 interval search trees
 rectangle intersection

http://algs4.cs.princeton.edu

ROBERT SEDGEWICK  |  KEVIN WAYNEAlgorithms1d interval search

1d interval search.  Data structure to hold set of (overlapping) intervals.

(cid:638)Insert an interval ( lo,  hi ).
(cid:638)Search for an interval ( lo,  hi ).
(cid:638)Delete an interval ( lo,  hi ).
(cid:638)Interval intersection query:  given an interval ( lo,  hi ), find all intervals 

(or one interval) in data structure that intersects ( lo,  hi ).

Q.  Which intervals intersect ( 9,  16 ) ?
A.  ( 7,  10 ) and ( 15,  18 ).

(7, 10)

(21, 24)

(5, 8)

(4, 8)

(17, 19)

(15, 18)

37

1d interval search API

    public class IntervalST<Key extends Comparable<Key>, Value>
    public class IntervalST<Key extends Comparable<Key>, Value>
    public class IntervalST<Key extends Comparable<Key>, Value>

IntervalST()

create interval search tree

void put(Key lo, Key hi, Value val) put interval-value pair into ST

Value get(Key lo, Key hi)

value paired with given interval

void delete(Key lo, Key hi)

delete the given interval

Iterable<Value> intersects(Key lo, Key hi)

all intervals that intersect (lo, hi)

Nondegeneracy assumption. No two intervals have the same left endpoint.

38

Interval search trees

Create BST, where each node stores an interval ( lo,  hi ).

(cid:638)Use left endpoint as BST key. 
(cid:638)Store max endpoint in subtree rooted at node.

(17, 19)

24

binary search tree

(left endpoint is key)

(5, 8)

18

(21, 24)

24

(4, 8)

8

(15, 18)

18

max endpoint in

subtree rooted at node

(7, 10)

10

39

Interval search tree demo:  insertion

To insert an interval ( lo,  hi ) :

(cid:638)Insert into BST, using lo as the key.
(cid:638)Update max in each node on search path.

insert interval (16, 22)

(17, 19)

24

(5, 8)

18

(21, 24)

24

(4, 8)

8

(15, 18)

18

(7, 10)

10

40

Interval search tree demo:  insertion

To insert an interval ( lo,  hi ) :

(cid:638)Insert into BST, using lo as the key.
(cid:638)Update max in each node on search path.

insert interval (16, 22)

(17, 19)

24

(5, 8)

22

(21, 24)

24

(4, 8)

8

(15, 18)

22

(7, 10)

10

(16, 22)

22

41

Interval search tree demo:  intersection

To search for any one interval that intersects query interval ( lo,  hi ) :

(cid:638)If interval in node intersects query interval, return it.
(cid:638)Else if left subtree is null, go right.
(cid:638)Else if max endpoint in left subtree is less than lo, go right.
(cid:638)Else go left.

interval intersection
search for (21, 23)

(17, 19)

24

(5, 8)

22

(21, 24)

24

(4, 8)

8

(15, 18)

22

compare (21, 23) to (16, 22) 

(intersection!)

(7, 10)

10

(16, 22)

22

(21, 23)

42

Search for an intersecting interval:  implementation

To search for any one interval that intersects query interval ( lo,  hi ) :

(cid:638)If interval in node intersects query interval, return it.
(cid:638)Else if left subtree is null, go right.
(cid:638)Else if max endpoint in left subtree is less than lo, go right.
(cid:638)Else go left.

 Node x = root;
 while (x != null)
 {
    if      (x.interval.intersects(lo, hi)) return x.interval;
    else if (x.left == null)                x = x.right;
    else if (x.left.max < lo)               x = x.right;
    else                                    x = x.left;
 }
 return null;

43

Search for an intersecting interval:  analysis

To search for any one interval that intersects query interval ( lo,  hi ) :

(cid:638)If interval in node intersects query interval, return it.
(cid:638)Else if left subtree is null, go right.
(cid:638)Else if max endpoint in left subtree is less than lo, go right.
(cid:638)Else go left.

Case 1.  If search goes right, then no intersection in left.

Pf.  Suppose search goes right and left subtree is non empty.

(cid:638)Since went right, we have max  <  lo.
(cid:638)For any interval (a, b) in left subtree of x,

we have b    max  <  lo.

definition of max

reason for going right

(cid:638)Thus, (a, b) will not intersect ( lo,  hi ).

max

(c, max)

(a, b)

(lo, hi)

left subtree of x

right subtree of x

44

Search for an intersecting interval:  analysis

To search for any one interval that intersects query interval ( lo,  hi ) :

(cid:638)If interval in node intersects query interval, return it.
(cid:638)Else if left subtree is null, go right.
(cid:638)Else if max endpoint in left subtree is less than lo, go right.
(cid:638)Else go left.

Case 2.  If search goes left, then there is either an intersection in left 
subtree or no intersections in either.

Pf.  Suppose no intersection in left.

(cid:638)Since went left, we have lo    max.
(cid:638)Then for any interval (a, b) in right subtree of x, 

hi  < c    a    no intersection in right.

max

(c, max)

no intersections
in left subtree

intervals sorted
by left endpoint

(lo, hi)

(a, b)

left subtree of x

right subtree of x

45

Interval search tree:  analysis

Implementation.  Use a red-black BST to guarantee performance.

easy to maintain auxiliary information

(log N extra work per operation)

operation

brute

interval

search tree

best

in theory

insert interval

find interval

delete interval

find any one interval
that intersects (lo, hi)

find all intervals

that intersects (lo, hi)

1

N

N

N

N

log N

log N

log N

log N

log N

log N

log N

log N

R log N

R + log N

order of growth of running time for N intervals

46

GEOMETRIC APPLICATIONS OF BSTS
 1d range search
 line segment intersection
 kd trees
 interval search trees
 rectangle intersection

http://algs4.cs.princeton.edu

ROBERT SEDGEWICK  |  KEVIN WAYNEAlgorithmsOrthogonal rectangle intersection

Goal.  Find all intersections among a set of N orthogonal rectangles.

Quadratic algorithm.  Check all pairs of rectangles for intersection.

3

0

2

1

Non-degeneracy assumption.  All x- and y-coordinates are distinct.

48

Microprocessors and geometry

Early 1970s.  microprocessor design became a geometric problem.

(cid:638)Very Large Scale Integration (VLSI).
(cid:638)Computer-Aided Design (CAD).

Design-rule checking.

(cid:638)Certain wires cannot intersect.
(cid:638)Certain spacing needed between different types of wires.
(cid:638)Debugging = orthogonal rectangle intersection search.

49

Algorithms and Moore's law

"Moores law."  Processing power doubles every 18 months.

(cid:638)197x:  check N rectangles.
(cid:638)197(x+1.5):  check 2 N rectangles on a 2x-faster computer.

Gordon Moore

Bootstrapping.  We get to use the faster computer for bigger circuits.

But bootstrapping is not enough if using a quadratic algorithm:

(cid:638)197x: takes M days.
(cid:638)197(x+1.5): takes (4 M) / 2 = 2 M days. (!)

quadratic
algorithm

2x-faster
computer

Bottom line.  Linearithmic algorithm is necessary to sustain Moores Law.

50

Orthogonal rectangle intersection:  sweep-line algorithm

Sweep vertical line from left to right.

(cid:638)x-coordinates of left and right endpoints define events.
(cid:638)Maintain set of rectangles that intersect the sweep line in an interval 
(cid:638)Left endpoint:  interval search for y-interval of rectangle; insert y-interval.
(cid:638)Right endpoint:  remove y-interval.

search tree (using y-intervals of rectangle). 

3

0

2

1

3

2

0

1

y-coordinates

51

Orthogonal rectangle intersection:  sweep-line analysis

Proposition. Sweep line algorithm takes time proportional to N log N + R log N
to find R intersections among a set of N rectangles. 

Pf.(cid:638)Put x-coordinates on a PQ (or sort).
(cid:638)Insert y-intervals into ST.
(cid:638)Delete y-intervals from ST.
(cid:638)Interval searches for y-intervals. 

N log N

N log N

N log N

N log N + R log N

Bottom line.  Sweep line reduces 2d orthogonal rectangle intersection 
search to 1d interval search. 

52

Geometric applications of BSTs

problem

example

1d range search

2d orthogonal line
segment intersection

solution

BST

sweep line reduces to

1d range search

kd range search

kd tree

1d interval search

interval search tree

2d orthogonal

rectangle intersection

sweep line reduces to

1d interval search

53

