Cicles Formatius de Grau Superior

Desenvolupament dAplicacions Informatiques

D06

PROGRAMMING with JAVA 

Ch20  Data Structures I

PowerPoint presentation, created by Angel A. Juan - ajuanp(@)gmail.com,

for accompanying the book Big Java, by Cay S. Horstmann (2006)

Chapter Goals
(cid:131) To learn how to use the linked lists provided in the standard 

library 

(cid:131) To be able to use iterators to traverse linked lists 
(cid:131) To understand the implementation of linked lists 
(cid:131) To distinguish between abstract and concrete data types
(cid:131) To know the efficiency of fundamental operations of lists 

and arrays 

(cid:131) To become familiar with the stack and queue types 

Using Linked Lists

(cid:131) A linked list is a data structure used for collecting a sequence of objects, which 
allows efficient addition and removal of elements in the middle of the sequence 

(cid:131) Rather than sorting the values in an array, a linked list uses a sequence of 
nodes, each of which stores a value and a reference to the next node in the 
sequence

(cid:131) Linked lists allow speedy insertion and removal, but element access can be slow 

since it uses sequential access (you must traverse the first four elements to 
locate the fifth one) instead of random access (elements are accessed in 
arbitrary order)

(cid:131) You use linked lists when you are concerned about the efficiency of inserting or 

removing elements and you rarely need element access in random order

Figure 1:
Inserting an Element into a Linked List 

Java's LinkedList class
LinkedList class in the java.util package is a generic 
class, just like the ArrayList class (cid:198) specify type of 
elements in angle brackets: LinkedList<E>

(cid:131) The Java library provides a linked list class. The 

(cid:131) The following methods give you direct access to the first and 

the last element in the list (here, E is the element type of 
LinkedList<E>):

void addFirst(E element)
void addLast(E element)
E getFirst()
E getLast()
E removeFirst()
E removeLast()

(cid:131) How do you add and remove elements in the middle of the 

list? The Java library supplies a ListIterator type

A List Iterator
(cid:131) A list iterator encapsulates a position anywhere inside the 

linked list:

Figure 2: A List Iterator

(cid:131) Think of an iterator as pointing between two elements (like a 

cursor in a word processor)

Figure 3: 
A Conceptual View of a List Iterator

List Iterator
(cid:131) You obtain a list iterator with the listIterator method of the 

LinkedList class:

LinkedList<String> employeeNames = . . .;
ListIterator<String> iterator = employeeNames.listIterator();

(cid:131) Initially, the iterator points before the first element. You can move the 

iterator position with the next method:
iterator.next();

(cid:131) The next method throws a NoSuchElementException if you are 
already past the end of the list. You should always call the method 
hasNext before calling next:

if (iterator.hasNext())

iterator.next();

List Iterator
(cid:131) The next method returns the element that the iterator is passing. You 

traverse all elements in a linked list of strings with the following loop:

while iterator.hasNext()
{

String name = iterator.next();
Do something with name

} 

(cid:131) As a shorthand, if your loop simply visits all elements of the linked list, you 

can use the for each loop:

for (String name : employeeNames)
{
}

Do something with name

(cid:131) Behind the scenes, the for loop uses an iterator to visit all elements

List Iterator
(cid:131) The nodes of the LinkedList class store two links:

(cid:131) One to the next element, and
(cid:131) One to the previous element

(cid:131) You can use the previous and hasPrevious methods of the 
(cid:131) The add method adds an object after the iterator, the moves the iterator

ListIterator interface to move the iterator position backwards

position past the new element:

iterator.add("Juliet");

(cid:131) The remove method removes the object that was returned by the last 

call to next or previous:

//Remove all names that fulfill a certain condition
while (iterator.hasNext())
{

String name = iterator.next();
if (name fulfills condition)

iterator.remove();

} 

(cid:131) If you call remove improperly, it throws an IllegalStateException

File ListTester.java

(cid:131) ListTester is a sample program that 

(cid:131) Inserts strings into a list 
(cid:131) Iterates through the list, adding and removing elements 
(cid:131) Prints the list 

A program that demonstrates the LinkedList class

01: import java.util.LinkedList;
02: import java.util.ListIterator;
03: 
04: /**
05: 
06: */
07: public class ListTester
08: {  
09:
10:
11:
12:
13:
14:
15:
16: 
17: 
18:

public static void main(String[] args)
{  

LinkedList<String> staff = new LinkedList<String>();
staff.addLast("Dick");
staff.addLast("Harry");
staff.addLast("Romeo");
staff.addLast("Tom");
// | in the comments indicates the iterator position

Continued

File ListTester.java

19:
20:
21:
22:
23: 
24: 
25:
26:
27:
28:
29:
30: 
31: 
32: 
33:
34:

= staff.listIterator(); // |DHRT

ListIterator<String> iterator
iterator.next(); // D|HRT
iterator.next(); // DH|RT
// Add more elements after second element
iterator.add("Juliet"); // DHJ|RT
iterator.add("Nina"); // DHJN|RT
iterator.next(); // DHJNR|T
// Remove last traversed element 
iterator.remove(); // DHJN|T

Continued

File ListTester.java

// Print all elements
for (String name : staff)

System.out.println(name);

35: 
36: 
37:
38:
39:
40: } 

}

Output:

Dick
Harry
Juliet
Nina
Tom

Self Test

1. Do linked lists take more storage space than arrays of 

the same size? 

2. Why don't we need iterators with arrays? 

Answers

1. Yes, for two reasons. You need to store the node 

references, and each node is a separate object. (There is 
a fixed overhead to store each object in the virtual 
machine.) 

2. An integer index can be used to access any array 

location. 

Implementing Linked Lists

(cid:131) In the previous section you saw how to use the linked list class supplied 

by the Java library (LinkedList class) 

(cid:131) Now, we will look at the implementation of a simplified version of this 

class. It will show you how the list operations manipulate the links as the 
list is modified 

(cid:131) To keep it simple, we will implement a singly linked list, and the list class 

will supply direct access only to the first list element, not the last one 
(cid:131) Our list will not use a type parameter. Store raw Object values and 

insert casts when retrieving them 

(cid:131) The result will be a fully functional list class that shows how the links are 

updated in the add and remove operations and how the iterator
traverses the list

Private class Node
(cid:131) A Node object stores an object and a reference to the next node 
(cid:131) Because the methods of both the linked list class and the iterator class 
have frequent access to the Node instance variables, we do not make 
the instance variables private. Instead, we make a Node a private inner 
class of the LinkedList class. Because none of the list methods 
returns a Node object, it is safe to leave the instance variables public:

public class LinkedList
{

. . .
private class Node
{

public Object data;
public Node next;

} 

}

Reference to the first node
(cid:131) The LinkedList class holds a reference first to the first node (or 

null, if the list is completely empty) 

public class LinkedList
{
public LinkedList()
{
}
public Object getFirst()
{

first = null;

throw new NoSuchElementException();

if (first == null)
return first.data;

}
. . .
private Node first; 

}

Adding a New First Element
(cid:131) When a new node is added 

public class LinkedList
{

to the list 
(cid:131) It becomes the head of the list 
(cid:131) The old list head becomes its 

next node 

. . .
public void addFirst(Object element)
{

Node newNode = new Node();
newNode.data = element; 
newNode.next = first;
first = newNode;   

}
. . . 

}

Figure 4:
Adding a Node to the Head of a Linked List 

Removing the First Element
(cid:131) When the first element is 

public class LinkedList
{

removed 
(cid:131) The data of the first node are 
saved and later returned as 
the method result 

. . .
public Object removeFirst()
{

if (first == null)
Object element = first.data;

throw new NoSuchElementException();

(cid:131) The successor of the first node 

becomes the first node of the 
shorter list 

(cid:131) The old node will be garbage 
collected when there are no 
further references to it 

}

first = first.next;   
return element; 
} 
. . . 

Figure 5:
Removing the First Node from a Linked List

Linked List Iterator
(cid:131) Our LinkedList class defines a 

private inner class 
LinkedListIterator

(cid:131) Because it is an inner class, it has 

access to the private features of the 
LinkedList class the first field 
and the private Node class

(cid:131) Clients of LinkedList don't 
actually know the name of the 
iterator class (they only know it is a 
class that implements the 
ListIterator interface) 

(cid:131) Each iterator object has a reference 
position to the last visited node. 
We also store a reference to the last 
node before that

public class LinkedList
{

. . .
public ListIterator listIterator()
{
return new LinkedListIterator();
}
private class LinkedListIterator implements ListIterator
{

public LinkedListIterator()
{

position = null;
previous = null;

}
. . .
private Node position;
private Node previous;

}
. . .

}

The Linked List Iterator's next
Method
(cid:131) The next method is simple: the position reference is advanced to 

position.next, and old position is remembered in previous

(cid:131) Special case: if the iterator points before the first element of the list, then 

the old position is null and position must be set to first

public Object next()
{

}

throw new NoSuchElementException();

if (!hasNext())
previous = position; // Remember for remove
if (position == null)
position = first;
else
position = position.next;
return position.data;

The Linked List Iterator's hasNext
Method
(cid:131) The next method should only be called when the iterator is 

not at the end of the list 
(cid:131) The iterator is at the end 

(cid:131) if the list is empty (first == null) 
(cid:131) if there is no element after the current position (position.next == 

null) 

private class LinkedListIterator implements ListIterator
{

. . .
public boolean hasNext()
{
if (position == null)
else

return first != null;
return position.next != null;

}
. . .

} 

The Linked List Iterator's remove
Method
(cid:131) If the element to be removed is the first element, call removeFirst
(cid:131) Otherwise, the node preceding the element to be removed needs to

have its next reference updated to skip the removed element 

Figure 6:
Removing a Node From the Middle of a Linked List 

The Linked List Iterator's remove
Method
(cid:131) If the previous reference equals position: 

(cid:131) this call to remove does not immediately follow a call to next (cid:198) throw an 

IllegalArgumentException

(cid:131) It is illegal to call remove twice in a row 
(cid:131) remove sets the previous reference to position

throw new IllegalStateException();

public void remove()
{

if (previous == position)
if (position == first)
{
}
else
{

removeFirst();

previous.next = position.next;   

} 
position = previous;   

}

The Linked List Iterator's set
Method
(cid:131) The set method changes the data stored in the previously 

visited element:

public void set(Object element)
{

}

if (position == null)
position.data = element;

throw new NoSuchElementException();

The Linked List Iterator's add
Method
(cid:131) The most complex operation is the addition of a node 
(cid:131) add inserts the new node after the current position and 

sets the successor of the new node to the successor of the 
current position 

Figure 7:
Adding a Node to the Middle of a Linked List

The Linked List Iterator's add Method

public void add(Object element)
{

if (position == null)
{
addFirst(element);
position = first;

}
else
{

Node newNode = new Node();
newNode.data = element;
newNode.next = position.next;
position.next = newNode;
position = newNode;

} 
previous = position;

}

File LinkedList.java

A linked list is a sequence of nodes with efficient
element insertion and removal. This class 
contains a subset of the methods of the standard
java.util.LinkedList class.

001: import java.util.NoSuchElementException;
002:
003: /**
004: 
005: 
006: 
007: 
008: */
009: public class LinkedList
010: {  
011: 
012: 
013: 
014:
015:
016:
017:
018:

/** 
*/
public LinkedList()
{  
}

Constructs an empty linked list.

first = null;

Continued

File LinkedList.java

Returns the first element in the linked list.
@return the first element in the linked list

*/
public Object getFirst()
{  

if (first == null) 
return first.data;

throw new NoSuchElementException();

/**

}
/**

019: 
020: 
021: 
022: 
023:
024:
025:
026:
027:
028:
029: 
030: 
031: 
032: 
033: 
034:
035:

Removes the first element in the linked list.
@return the removed element

*/
public Object removeFirst()
{ 

Continued

File LinkedList.java

throw new NoSuchElementException();

if (first == null) 
Object element = first.data;
first = first.next;
return element;

036:
037:
038:
039:
040:
041:
042: 
043: 
044: 
045: 
046: 
047:
048:
049:
050:
051:
052:
053:
054:

}
/**

}

Adds an element to the front of the linked list.
@param element the element to add
*/
public void addFirst(Object element)
{  

Node newNode = new Node();
newNode.data = element;
newNode.next = first;
first = newNode;

Continued

File LinkedList.java

055: 
056: 
057: 
058: 
059:
060:
061:
062:
063:
064:
065:
066:
067:
068:
069:
070:
071:

Returns an iterator for iterating through this list.
@return an iterator for iterating through this list

*/
public ListIterator listIterator()
{  
return new LinkedListIterator();
}
private Node first;
private class Node
{  

public Object data;
public Node next;

/**

}

Continued

File LinkedList.java

private class LinkedListIterator implements ListIterator
{  

Constructs an iterator that points to the front
of the linked list.

*/
public LinkedListIterator()
{  

position = null;
previous = null;

072:
073:
074: 
075: 
076: 
077: 
078:
079:
080:
081:
082:
083: 
084: 
085: 
086: 
087: 

/**

}
/**

*/

Moves the iterator past the next element.
@return the traversed element

Continued

File LinkedList.java

088:
089:
090:
091:
092:
093: 
094:
095:
096:
097:
098:
099:
100:
101: 
102: 
103: 
104: 

public Object next()
{  

throw new NoSuchElementException();

if (!hasNext())
previous = position; // Remember for remove
if (position == null)
position = first;
else
position = position.next;

return position.data;

}
/**

Tests if there is an element after the iterator
position.

Continued

File LinkedList.java

@return true if there is an element after the 
position

// iterator

*/
public boolean hasNext()
{  
if (position == null)
else

return first != null;
return position.next != null;

105: 
106: 
107: 
108:
109:
110:
111:
112:
113:
114:
115: 
116: 
117: 
118: 
119: 
120: 

}
/**

*/ 

Adds an element before the iterator position
and moves the iterator past the inserted element.
@param element the element to add

Continued

File LinkedList.java

121:
122:
123:
124:
125:
126:
127:
128:
129:
130:
131:
132:
133:
134:
135:
136:
137:
138:

public void add(Object element)
{  
if (position == null)
{
addFirst(element);
position = first;

}
else
{  

Node newNode = new Node();
newNode.data = element;
newNode.next = position.next;
position.next = newNode;
position = newNode;

}
previous = position;

}

Continued

File LinkedList.java

139: 
140: 
141: 
142: 
143:
144:
145:
146:
147:
148:
149:
150:
151:
152:
153:
154:
155:

Removes the last traversed element. This method may
only be called after a call to the next() method.

/**

*/
public void remove()
{  

if (previous == position)

throw new IllegalStateException();

removeFirst();

if (position == first)
{
}
else
{  
} 

previous.next = position.next;

Continued

File LinkedList.java

position = previous;

}
/**

156:
157:
158: 
159: 
160: 
161: 
162: 
163: 
164:
165:
166:
167:
168:
169:
170:
171:
172:
173:
174: } 

}

Sets the last traversed element to a different 
value. 
@param element the element to set

*/
public void set(Object element)
{

if (position == null)
position.data = element;

throw new NoSuchElementException();

}
private Node position;
private Node previous;

File ListIterator.java

A list iterator allows access of a position in a linked list. 
This interface contains a subset of the methods of the 
standard java.util.ListIterator interface. The methods for
backward traversal are not included.

01: /**
02: 
03: 
04: 
05: 
06: */
07: public interface ListIterator
08: {  
09: 
10: 
11: 
12: 
13:
14: 
15: 
16: 
17: 

*/
Object next();
/**

/**

Moves the iterator past the next element.
@return the traversed element

Tests if there is an element after the iterator
position.

Continued

File ListIterator.java

@return true if there is an element after the iterator
position

*/
boolean hasNext();
/**

*/
void add(Object element);
/**

Adds an element before the iterator position
and moves the iterator past the inserted element.
@param element the element to add

18: 
19: 
20: 
21:
22: 
23: 
24: 
25: 
26: 
27: 
28:
29: 
30: 
31: 
32: 
33: 

Removes the last traversed element. This method may
only be called after a call to the next() method.

*/ 

Continued

File ListIterator.java

34:
35: 
36: 
37: 
38: 
39: 
40: 
41:
42: } 

void remove();
/**

Sets the last traversed element to a different 
value. 
@param element the element to set

*/
void set(Object element);

Self Check
3. Trace through the addFirst method when adding an 

element to an empty list. 

4. Conceptually, an iterator points between elements (see 

Figure 3). Does the position reference point to the element 
to the left or to the element to the right? 

5. Why does the add method have two separate cases? 

Answers
3. When the list is empty, first is null. A new Node is 

allocated. Its data field is set to the newly inserted object. 
Its next field is set to null because first is null. The 
first field is set to the new node. The result is a linked list 
of length 1. 
It points to the element to the left. You can see that by 
tracing out the first call to next. It leaves position to point 
to the first node. 
If position is null, we must be at the head of the list, and 
inserting an element requires updating the first
reference. If we are in the middle of the list, the first
reference should not be changed. 

4.

5.

Abstract and Concrete Data Types
(cid:131) There are two ways of looking at a linked list: 

(cid:131) To think of the concrete implementation of such a list as a sequence 

of node objects with links between them

(cid:131) To think of the abstract concept of the linked list, i.e., an ordered 

sequence of data items that can be traversed with an iterator

Figure 8:
A Concrete View of a Linked List

Figure 9:
An Abstract View of a Linked List

(cid:131) An abstract data type defines the fundamental operations 

on the data but does not specify an implementation

Abstract and Concrete Data Types
(cid:131) As with a linked list, there are two ways of looking at an 

array list: 
(cid:131) To think of the concrete implementation: a partially filled array of 

object references

(cid:131) To think of the abstract concept: an ordered sequence of data items, 

each of which can be accessed by an integer index

Figure 10:  A Concrete View of an Array List

Figure 11: 
An Abstract View of an Array List

Abstract and Concrete Data Types

(cid:131) Concrete implementations of a linked list and an array list are quite 

different. On the other hand, the abstractions seem to be similar at first 
glance 

(cid:131) To see the difference, consider the public interfaces stripped down to 

In a linked list, element access is sequential. You
need to ask the linked list for an iterator. Using the
iterator, you can traverse the list elements one at a 
time (but if you want to go to a particular element, 
you first have to skip all elements before it)

An array list allows random access to all
elements. You specify an integer index, and
you can get or set the corresponding element

public class ArrayList
{

public Object get(int index) { . . . }
public void set(int index, Object element) { . . . }
. . .

}

their minimal essentials: 
public class LinkedList
{

public ListIterator listIterator() { . . . }
. . .

}
public interface ListIterator
{

Object next();
boolean hasNext();
void add(Object element);
void remove();
void set(Object element);
. . .

}

Abstract and Concrete Data Types

(cid:131) We will call the abstract types array and list. The Java 

library provides concrete implementations 
ArrayList and LinkedList for these abstract 
types.

(cid:131) Other concrete implementations are possible in other 

libraries. In fact, Java arrays are another 
implementation of the abstract array type.

Abstract list 
 Ordered sequence of items that can 
be traversed sequentially 
 Allows for insertion and removal of 
elements at any position 
Abstract array
 Ordered sequence of items with 
random access via an integer index 

(cid:131) To understand an abstract data type completely, you 
need to know not just its fundamental operations but 
also their relative efficiency:
(cid:131)

In an array list, random access takes O(1) time (it is 
constant)
In an array list, adding or removing an arbitrary element 
takes O(n) time, where n is the size of the array list, 
because on average n/2 elements need to be moved 
In a linked list, random access takes O(n) time because 
on average n/2 elements need to be skipped
In a linked list, an element can be added or removed in 
O(1) time (it is constant)

(cid:131)

(cid:131)

(cid:131)

Operation
Random 
Access
Linear 
Traversal Step
Add/Remove 
an Element

Array
0(1)

0(1)

0(n)

List
0(n)

0(1)

0(1)

Self Check

6. What is the advantage of viewing a type abstractly? 
7. How would you sketch an abstract view of a doubly linked 

list? A concrete view? 

8. How much slower is the binary search algorithm for a 

linked list compared to the linear search algorithm? 

Answers
6. You can focus on the essential characteristics of the data 

type without being distracted by implementation details. 

7. The abstract view would be like Figure 9, but with arrows in 

both directions. The concrete view would be like Figure 8, 
but with references to the previous node added to each 
node. 

8. To locate the middle element takes n / 2 steps. To locate 

the middle of the subinterval to the left or right takes 
another n / 4 steps. The next lookup takes n / 8 steps. 
Thus, we expect almost n steps to locate an element. At 
this point, you are better off just making a linear search 
that, on average, takes n / 2 steps. 

Stacks and Queues

(cid:131) Stacks and queues are two common abstract data types that allow 

insertion and removal of items at the end only, not in the middle
(cid:131) Stack: collection of items with "last in first out (LIFO) retrieval 

(cid:131) Allows insertion and removal of elements only at one end, traditionally called the top of 

the stack 

Items are removed at the top of the stack 

(cid:131) New items are added to the top of the stack 
(cid:131)
(cid:131) Called last in, first out or LIFO order 
(cid:131) Traditionally, addition and removal operations are called push and pop 
(cid:131) Think of a stack of books 

(cid:131) Queue: collection of items with "first in first out (FIFO) retrieval 

(cid:131) Add items to one end of the queue (the tail) 
(cid:131) Remove items from the other end of the queue (the head) 
(cid:131) Queues store items in a first in, first out or FIFO fashion 
(cid:131)
(cid:131) Think of people lining up: people join the tail of the queue and wait until they have 

Items are removed in the same order in which they have been added 

reached the head of the queue 

Stacks and Queues: Uses in 
Computer Science
(cid:131) Queue 

(cid:131) Event queue of all events, kept by the Java GUI system 
(cid:131) Queue of print jobs 

(cid:131) Stack 

(cid:131) Run-time stack that a processor or virtual machine keeps to organize

the variables of nested methods 

A stack implementation in Java
(cid:131) Stack class: concrete implementation of a stack in the Java 

library 

Stack<String> s = new Stack<String>();
s.push("A");
s.push("B");
s.push("C");
// The following loop prints C, B, and A
while (s.size() > 0)

System.out.println(s.pop());

(cid:131) The Stack class uses an array to implement a stack 

A queue implementation in Java
(cid:131) Queue implementations in the standard library are designed 

for use with multithreaded programs 

(cid:131) However, it is simple to implement a basic queue yourself: 

public class LinkedListQueue
{

/**      Constructs an empty queue that uses a linked list.
*/
public LinkedListQueue()
{
}
/**      

list = new LinkedList();

Adds an item to the tail of the queue.
@param x the item to add

*/
public void add(Object x)
{

list.addLast(x);

Continued

A queue implementation in Java

}
/**

Removes an item from the head of the queue.
@return the removed item

*/
public Object remove()
{
}
/**

return list.removeFirst();

Gets the number of items in the queue.
@return the size

*/
int size()
{
}
private LinkedList list;
}  

return list.size();

Self Check

9. Draw a sketch of the abstract queue type, similar to 

Figures 9 and 11. 

10. Why wouldn't you want to use a stack to manage print 

jobs? 

Answers

9.

10. Stacks use a "last in, first out" discipline. If you are the 

first one to submit a print job and lots of people add print 
jobs before the printer has a chance to deal with your 
job, they get their printouts first, and you have to wait 
until all other jobs are completed.

Chapter Summary

(cid:131)

(cid:131)

(cid:131)

(cid:131)

(cid:131)

(cid:131)

(cid:131)

A linked list consists of a number of nodes, each of which has a 
reference to the next node
Adding and removing elements in the middle of a linked list is efficient
Visiting the elements of a linked list in sequential order is efficient, but 
random access is not
You use a list iterator to access elements inside a linked list
Implementing operations that modify a linked list is challenging you 
need to make sure that you update all node references correctly
An abstract data type defines the fundamental operations on the data 
but does not specify an implementation
An abstract list is an ordered sequence of items that can be traversed 
sequentially and that allows for insertion and removal of elements at 
any position

Continued

Chapter Summary

(cid:131)

(cid:131)

(cid:131)

An abstract array is an ordered sequence of items with random access 
via an integer index
A stack is a collection of items with last in first out retrieval
A queue is a collection of items with first in first out retrieval

