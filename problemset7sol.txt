CSE3358 Problem Set 7

Solution

Problem 1: A remarkable property of BST (10 points)
Professor R. E. Mark Cable thinks he has discovered a remarkable property of binary search trees.
Suppose that the search for key k in a binary search tree ends up in a leaf. Consider three sets: A,
the keys to the left of the search path; B, the keys on the search path; and C, the keys to the right
of the search path. Professor R. E. Mark Cable claims that any three keys a  A, b  B, and c  C
must satisfy a  b  c. Give a smallest possible counter example to the professors claim.

ANSWER: Heres a smallest counter example:

If we perform SEARCH(root[T ], 4), the search path will end up in a leaf and will consist of the gray
nodes above. Obviously, 2 is to the left of the search path, but it is not  to all keys on the search
path, namely 2 > 1.

Problem 2: Height and average depth (30 points)
Consider a randomly built binary search tree, i.e. distinct keys are inserted into an initially empty
binary search tree in random order. It is a fact that a randomly built binary search tree on n nodes
has an expected height (log n). In class we argued this fact by drawing a similarity to the recursive
tree of Randomized Quicksort (see your notes).

A common mistake is to claim the above by showing that the expected average depth in the binary
search tree is (log n), where the average depth is given by
, because thats easier to prove.

i=1

(cid:80)n

depth(xi)
n

This problem is designed to expose this common mistake.

(cid:80)n

Let P (n) =
binary search tree is P (n)
n .

i=1 depth(xi) for a binary search tree on n nodes. Therefore, the average depth in the

(a) (5 points) Show that P (n) obeys the following recurrence for a complete binary search tree:

P (n) = 2P (n/2) + (n)

and conclude that the average depth in a complete binary search tree is (log n) by solving for P (n).

1

 1 3 2 4 ANSWER: Let L and R be the left and right subtrees of the root respectively. Consider a tree having
k nodes in L and, therefore, n  1  k nodes in R.
(cid:88)

n(cid:88)

(cid:88)

P (n) =

depth(xi) =

depth(xi) +

depth(xi)

i=1

xiL

xiR

The root contributes 1 to the depth of every node in L and R. Therefore,

P (n) = P (k) + P (n  1  k) + n  1

If the tree is complete then k = (cid:98)n/2(cid:99) and hence n1k = (cid:98)n/2(cid:99). Therefore, P (n) = 2P ((cid:98)n/2(cid:99))+n1.
If we are interested in the asymptotic behavior of P (n) we can express P (n) as the recurrence P (n) =
2P (n/2) + (n). By the Master theorem, P (n) = (n log n). Therefore, the average depth in the
binary search tree will be P (n)

n = (log n).

Consider the following binary search tree consisting of a complete binary tree with a long tail.

(b) (5 points) What is the height of the above binary search tree in  notation?

ANSWER: Since the first part is a complete binary tree on n1 nodes, the height of that three
is (log n1) (we can use the same argument as the one for a binary heap). The tail of the tree
adds a (n2) to the height of the complete tree. Therefore, the height of this binary search tree is
(log n1 + n2).

(c) (5 points) Show that P (n = n1 + n2) = (n1 log n1 + n2 log n1 + n2
tree and conclude that the average depth in the above binary search tree is (log n1 + n2
n1+n2

2) for the above binary search

).

2

(cid:80)

(cid:80)n2

Using part (a), P (n) = (n1 log n1)+
Therefore, P (n) = (n1 log n1) + (n2 log n1) +
average depth in the binary search tree is P (n)

x tail depth(x). The ith node on the tail has depth (log n1)+i.
2). Therefore, the

i=1 i = (n1 log n1 + n2 log n1 + n2

n = (log n1 + n2

2

n1+n2

).

(d) (10 points) Find a relation between n1 and n2 to make the average depth in the above binary
search tree (log n) but its height (cid:54)= (log n). What is that height in  notation?

ANSWER: Note that if n2 > n1, then asymptotically, n = (n2) and
= (n2) = (n).
Therefore, the average depth will be (n) (cid:54)= (log n). Hence, we conclude that we must have n2 < n1
and as a result n = (n1) and we can work with n1 instead of n asymptotically.

n1+n2

n2
2

2

 tail of n2 nodes complete tree on n1 nodes The question is now how big can n2 be without violating that the average depth is (log n1)? Well,
lets set ( n2
n1+n2

) to be (log n1). Since n1 > n2, ( n2
n1+n2

). Therefore, we can safely set

2

2

) = ( n2
2
n1

(cid:113)

and we get that the average depth is (log n1) = (log n).

n2 = (

n1 log n1)

Lets see what this will do to the height.

h = (log n1 + n2) = (log n1 +
of notation for >).



n1 log n1) = (



n1 log n1) = (



n log n) > (log n) (with abuse

As a side note, this is the best we can achieve. In other words, given that the average depth is (log n),
n log n). To show this fact note that the sum of depths of nodes
the height of the tree must be O(
on a path of length l is (l2). Therefore, if the height of the tree is more than (
n log n), the nodes
on the longest path alone contribute more than (n log n) to P (n). Hence, the average depth will be
more than (log n).





(e) (5 points) How can you intuitively explain the fact that a bound on the average depth in a tree
does not imply the same bound on the height of the tree?

ANSWER: Simply because the height of a tree is equal to the maximum depth, which can be more
than the average. Of course, as mentioned above in the side note, the average depth does impose an
upper bound on the height, but does not exlude the fact that the height can be much more than the
average depth. Again, the reason is because the height is nothing but the maximum depth.

Heres an example from every day life not related to trees. We have 10 students in a class and the
average grade is 7/100. Then this imposes an upper bound on any grade. In fact you can claim that
no one got 71/100 as a grade; otherwise, the average will be ....+71+...
> 7 (well... assuming no negative
grades). But it is possible to find a student with a grade 70/100. As a trivial example, one student
got 70/100 and the remaining students all got 0/100. The average is 7. The maximum grade is 70.

10

Poblem 3: Tree walks (30 points)

(a) (10 points) Write recursive pseudocodes similar to the INORDER-TREE-WALK we discussed
in class for PREORDER-TREE-WALK and POSTORDER-TREE-WALK (see book page 254 for
definitions).

ANSWER:

PREORDER-TREE-WALK(x)

if x (cid:54)= N IL

then print key[x]

PREORDER-TREE-WALK(lef t[x])
PREORDER-TREE-WALK(right[x])

3

POSTORDER-TREE-WALK(x)

if x (cid:54)= N IL

then POSTORDER-TREE-WALK(lef t[x])

POSTORDER-TREE-WALK(right[x])
print key[x]

(b) (10 points) Assume the INORDER-TREE-WALK outputs g,b,e,d,f,a,c,j,k,h,i and the POSTORDER-
TREE-WALK outputs g,e,b,f,a,j,k,i,h,c,d. Construct the tree and determine the output of the PREORDER-
TREE-WALK.

ANSWER: The post order tree walk on a tree rooted at node x outputs x last. Therefore, d is the
root of the tree. Looking at the inorder tree walk output, we see that g, b, e must be in the left subtree
of d and f , a, c, j, k, h, i must be in the right subtree of d.

Now we apply the same reasoning recursively on the left and right subtrees. Among g, b, e, the post
order tree walk outputs b last; therefore, b is the root. From the inorder tree walk, we see that g must
be on its left and e must be on its right. We continue in this way...

The PREORDER-TREE-WALK will output: d, b, g, e, c, a, f, h, k, j, i.
(c) (10 points) Consider a set S of distinct bit strings, i.e. string over the alphabet {0, 1}. A special
tree, called radix tree, can represent such a set S. Heres the radix tree for S = {1011, 10, 011, 100, 0}.

4

 d b c g e a h f k i j Given a set of distinct binary strings whose length sum is n, show how you can build its radix tree in
(n) time and then use it to sort S lexicographically (dictionary order) in (n) time. For example,
the output of the sort for the radix tree above should be: 0, 011, 10, 100, 1011.
Hint: use one of the tree walks.

ANSWER: First, we build a radix tree for the set of strings S by inserting the strings into an
originally empty radix tree. Insertion takes (n) time since the insertion of each string takes a time
proportional to its length (traversing a path through the tree whose length is the length of the string),
and the sum of all the string lengths is n. At the end of each insertion, we color the node white and
store the corresponding string as its key.

Second, we perform a modified preorder walk of the tree that only prints the keys for white nodes.
This will print the strings in lexicographic order because:

 Any nodes string is a prefix of all its descendants strings, hence belongs before them in the

sorted order

 A nodes left descendants belong before its right descendants because the corresponding strings
are identical up to that parent node, and in the next position the left trees strings have 0 while
the right trees strings have 1.

Problem 4: Binary search tree and Min-Heap (20 points)

(a) (10 points) Design an algorithm that converts a binary search tree on n elements into a Min-Heap
containing the same elements in (n) time.

ANSWER: One possible way of performing this task is to traverse the tree using a tree walk algorithm
(inorder, preorder, or postorder) and output the keys of the nodes to an array. Then Perform BUILD-
HEAP on the array. Both the tree walk and BUILD-HEAP run in (n) time. In particular if the
INORDER-TREE-WALK is used, the array will be sorted and there is no need to run BUILD-HEAP
(min-HEAP). Heres a modified INORDER-TREE-WALKS that outputs the keys to an array.

5

 0 011 10 100  1011 0 1 1 1 0 0 1 1 count0
INORDER-TREE-WALK(root[T ])

INORDER-TREE-WALK(x)

if x (cid:54)= N IL

then INORDER-TREE-WALK(lef t[x])

countcount + 1
A[count]key[x]
INORDER-TREE-WALK(right[x])

PS: this assumes that a key is the only information stored at a node. If this is not true, we need to
copy the whole object into the array, not just the key.

6

(b) (10 points) Very Challenging (EXTRA CREDIT): Do the same thing inplace, i.e. convert the tree
into a Min-Heap in (n) time without using any extra storage We adopt the standard representation
of a tree with the three lef t, right, and parent pointers.

ANSWER: The idea is the following. First, convert the binary search tree into a sorted linked list.
One way of doing this is by starting at the minimum element, and repeatedly call SUCCESSOR, and
link the element to its successor. Since the repeated SUCCESSOR calls will walk the tree in the same
way the INORDER-TREE-WALK does, the total time for these calls will be (n) (later we will prove
this more formally maybe in another exercice).

The question is which pointer should we use to link an element to its successor. Messing up with the
pointers might cause future successor calls to fail doing the correct thing. As an observation, the left
or right pointers of a node x are never used after SUCCESSOR(x) is called. Therefore, either the
left or the right pointer can serve to link x to its successor. Heres the code for converting the binary
search tree into a sorted linked list using the left pointer as a next pointer.
xMINIMUM(root[T ])
root[T ]x
while x (cid:54)= N IL
lef t[x]y
xy

do ySUCCESSOR(x)

Now we can transform the sorted linked list into a min-Heap by setting the left, right, and parent
pointers appropriately. The idea is that each node will have the earliest available two nodes as its
children because we can fill the heap level by level from left to right without having to worry about
the order of elements (it is a sorted list now).

Heres the code which takes linear time because it just traverses the list once:
xroot[T ]
parent[x]N IL
ylef t[x]
while x (cid:54)= N IL
zlef t[x]
(cid:46) y is first node without a parent
lef t[x]y
if y (cid:54)= N IL

do (cid:46) z is the node to consider as x in the next iteration

then parent[y]x

(cid:46) find next node without a parent
ylef t[y]

right[x]y
if y (cid:54)= N IL

then parent[y]x

(cid:46) find next node without a parent
ylef t[y]

(cid:46) x has both left and right defined
xz

7

(c) (10 points) Can you do the reverse process, i.e. convert a Min-Heap containing n elements into a
binary search tree on the same elements in (n) time? How? or Why not?

ANSWER: It is generally not possible to transform a min-Heap into a binary search tree on the same
elements in linear time. Had this been possible, we would be able to sort in linear time, which is not
possible due to the (n log n) lower bound on sorting.

Heres how we would sort an array A in linear time:
HBUILD-HEAP(A)
Tconvert(H)
INORDER-TREE-WALK(root[T ])

Since all these operations take (n) time, we have a (n) time general sorting algorithm. Knowing
that this is impossible, the assumption that conversion takes linear time must be wrong.

8

