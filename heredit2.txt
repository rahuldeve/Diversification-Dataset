A Characterization of the (natural) Graph Properties Testable with
One-Sided Error
Noga Alon

‚àó

Asaf Shapira

‚Ä†

Abstract
The problem of characterizing all the testable graph properties is considered by many to be
the most important open problem in the area of property-testing. Our main result in this paper
is a solution of an important special case of this general problem; Call a property tester oblivious
if its decisions are independent of the size of the input graph. We show that a graph property P
has an oblivious one-sided error tester, if and only if P is (almost) hereditary. We stress that
any ‚Äùnatural‚Äù property that can be tested (either with one-sided or with two-sided error) can be
tested by an oblivious tester. In particular, all the testers studied thus far in the literature were
oblivious. Our main result can thus be considered as a precise characterization of the ‚Äùnatural‚Äù
graph properties, which are testable with one-sided error.
One of the main technical contributions of this paper is in showing that any hereditary graph
property can be tested with one-sided error. This general result contains as a special case all the
previous results about testing graph properties with one-sided error. These include the results
of [20] and [5] about testing k-colorability, the characterization of [21] of the graph-partitioning
problems that are testable with one-sided error, the induced vertex colorability properties of [3],
the induced edge colorability properties of [14], a transformation from two-sided to one-sided
error testing [21], as well as a recent result about testing monotone graph properties [10]. More
importantly, as a special case of our main result, we infer that some of the most well studied
graph properties, both in graph theory and computer science, are testable with one-sided error.
Some of these properties are the well known graph properties of being Perfect, Chordal, Interval,
Comparability, Permutation and more. None of these properties was previously known to be
testable.

1

Introduction

The meta problem in the area of property testing is the following: Given a combinatorial structure
S, distinguish if S satisfies some property P or if S is -far from satisfying P, where S is said to be
-far from satisfying P if an -fraction of its representation should be modified in order to make S
satisfy P. The main goal is to design randomized algorithms, which look at a very small portion of
‚àó

Schools of Mathematics and Computer Science, Raymond and Beverly Sackler Faculty of Exact Sciences, Tel Aviv
University, Tel Aviv, Israel, and IAS, Princeton, NJ 08540, USA. Email: nogaa@tau.ac.il. Research supported in part
by a grant from the Israel Science Foundation, by the Hermann Minkowski Minerva Center for Geometry at Tel Aviv
University, and by the Von Neumann Fund.
‚Ä†
School of Computer Science, Raymond and Beverly Sackler Faculty of Exact Sciences, Tel Aviv University, Tel
Aviv, Israel. Email: asafico@tau.ac.il. This work forms part of the author‚Äôs Ph.D. thesis. Research supported by a
Charles Clore Foundation Fellowship and an IBM Ph.D. Fellowship.

1

the input, and using this information distinguish with high probability between the above two cases.
Such algorithms are called property testers or simply testers for the property P. Preferably, a tester
should look at a portion of the input whose size is a function of  only. Blum, Luby and Rubinfeld
[11] were the first to formulate a question of this type, and the general notion of property testing
was first formulated by Rubinfeld and Sudan [29], who were motivated in studying various algebraic
properties such as linearity of functions.
The main focus of this paper is in testing properties of graphs. In this case a graph G, is said to
be -far from satisfying a property P, if one needs to add/delete at least n2 edges to G in order to
turn it into a graph satisfying P. A Tester for P should distinguish with high probability, say 2/3,
between the case that G satisfies P from the case that G is -far from satisfying P. Here we assume
that the tester can query some oracle, whether a pair of vertices, i and j, are adjacent in the input
graph G. In what follows we will say that a tester for a graph property P has one-sided error if it
accepts any graph satisfying P with probability 1 (and rejects those that are -far with probability
at least 2/3 just like a standard tester). If the tester may reject graphs satisfying P with non-zero
probability then it is said to have two-sided error.
The study of the notion of testability for combinatorial structures, and mainly for labelled graphs,
was introduced in the seminal paper of Goldreich, Goldwasser and Ron [20]. In this paper it was
shown that many natural graph properties such as k-colorability, having a large clique and having
a large cut, have a tester, whose query complexity (that is, the number of oracle queries of type
‚Äùdoes (i, j) belong to E(G)‚Äù) can be upper bounded by a function that depends only on  and is
independent of the size of the input. In this paper we will say that properties having such efficient
testers, that is, whose query complexity can be upper bounded by a function of  only, are simply
testable. Note, that if the query complexity of a tester can be upper bounded by a function of  only,
then so can its running time. Following [20], many other graph properties were shown to be testable,
while others were shown to be non-testable.
The most interesting results in property-testing are those that show that large families of problems
are testable. The main result of [20] states that a certain abstract graph partition problem, which
includes as special cases k-colorability, having a large cut and having a large clique, is testable. The
authors of [21] gave a characterization of the partition problems discussed in [20] that are testable with
one-sided error. In [3], a logical characterization of a family of testable graph properties was obtained.
According to this characterization, every first order graph-property of type ‚àÉ‚àÄ (see Subsection 2.3.2)
is testable, while there are first-order graph properties of type ‚àÄ‚àÉ that are not testable. These results
were extended in [14]. There are also several general testability and non-testability results in other
areas besides testing graph properties. In [4] it is proved that every regular language is testable.
This result was extended to any read-once branching program in [25]. On the other hand, it was
proved in [17], that there are read-twice branching programs that are not-testable. The main result
of [7] states that any constraint satisfaction problem is testable.
With this abundance of general testability results, a natural question is what makes a combinatorial property testable. As graphs are the most well studied combinatorial structures in the theory
of computation, it is natural to consider the problem of characterizing the testable graph properties,
as the most important open problem in the area of property testing. Regretfully, though, finding
such a characterization remains a challenging open problem. The main result of this paper, Theorem
2, resolves an important natural special case of this open problem, which concerns property testers
with one-sided error. For additional results and references on graph property-testing as well as on

2

testing properties of other combinatorial structures, the reader is referred to [15], [19] and [28].

2

The New Results

2.1

The main technical result and its immediate applications

A graph property is hereditary if it is closed under removal of vertices (and not necessarily under
removal of edges). Equivalently, such properties are closed under taking induced subgraphs. The
main technical result of this paper is the following:
Theorem 1 (Main Technical Result) Every hereditary graph property is testable with one-sided
error.
It should be noted that besides certain partition properties such as having a large cut and
having a large clique, which were proved to be testable with two-sided error in [20], essentially any
graph property that was studied in the literature is hereditary. Thus Theorem 1 combined with the
graph partition problems of [20] imply the testability of (nearly) any natural graph property. To
demonstrate the generality of Theorem 1, we use it to infer that many graph properties, which prior
to this paper were not known to be testable, are in fact testable with one-sided error. These include
the following hereditary properties:
‚Ä¢ Perfect Graphs: A graph G is perfect if for every induced subgraph of G, G0 , the chromatic
number of G0 equals the size of the largest clique in G0 .
‚Ä¢ Chordal Graphs: A graph is chordal if it contains no induced cycle of length at least 4.
‚Ä¢ Interval Graphs: A graph G on n vertices is an interval graph if there are closed intervals
on the real line I1 , . . . , In such that (i, j) ‚àà E(G) if and only if Ii ‚à© Ij 6= ‚àÖ.
‚Ä¢ Circular-Arc Graphs: A graph G on n vertices is a circular-arc graph if there are closed
intervals on a cycle I1 , . . . , In such that (i, j) ‚àà E(G) if and only if Ii ‚à© Ij 6= ‚àÖ.
‚Ä¢ Comparability Graphs: A graph G is a comparability graph if its edges can be oriented
such that if there is a directed edge from i to j and from j to k, then there is one from i to k.
‚Ä¢ Permutation Graphs: A graph G on n vertices is a permutation graph if there is a permutation œÉ of {1, . . . , n} such that (i, j) ‚àà E(G) iff (i, j) is an inversion under œÉ.
‚Ä¢ Asteroidal Triple-Free Graphs: G is asteroidal triple-free if it contains no independent set
of 3 vertices such that each pair is joined by a path that avoids the neighborhood of the third.
‚Ä¢ Split Graphs: G is a split graph if V (G) can be split into a clique and an independent set.
Another abstract family of hereditary graph properties, which have been extensively studied are
the so called intersection graph properties. In this case we fix a certain ‚Äùtype‚Äù T , of sets and say that
a graph G on n vertices has the intersection property defined by T , if there are n sets S1 , . . . , Sn of
type T , such that vertices i and j are connected in G if and only if Si ‚à© Sj 6= ‚àÖ. For example, the
property of being a d-Box (see [13] and its references) is obtained by letting the ‚Äùtype‚Äù of the sets be
3

axis parallel boxes in Rd . See the monograph [24] for more information and examples of intersection
graph properties.
It is clear that the above surveyed properties are some of the most well-studied properties in
graph-theory as well as in theoretical and applied computer-science. These properties also arise
naturally in Chemistry, Biology, Social Sciences, Statistics as well as in many other areas. See
[22], [24], [26] and their references, where other hereditary properties and their applications are also
discussed.
To further convey the reader of the power of Theorem 1 we mention that it immediately implies,
for example, that for every  there is c = c(), such that if a graph G is -far from being Chordal
then G contains an induced cycle of length at most c, and that similar results hold for any other
hereditary property. This is non-trivial as it is not clear a priori that there is no graph that is, say,
1
100 -far from being Chordal and yet contains only induced cycles of length at least, say, ‚Ñ¶(log n). In
fact, we can show that an analogous result holds for any graph property, see Subsection 2.3.4.

2.2

The main result: Oblivious testing with one-sided error

By a result of [3] and [21], it is possible to assume that a property tester works by making its queries
non-adaptively. In other words, the tester first picks a random subset of vertices S, and then continues
without making additional queries. Inspecting previous results on property-testing, motivates the
following notion of a slightly more restricted tester, which works while being ‚Äùoblivious‚Äù to the size
of the input1 .
Definition 2.1 (Oblivious Tester) A tester (one-sided or two-sided) is said to be oblivious if it
works as follows: given  the tester computes an integer Q = Q() and asks an oracle for a subgraph
induced by a set of vertices S of size Q, where the oracle chooses S randomly and uniformly from
the vertices of the input graph. If Q is larger than the size of the input graph then the oracle returns
the entire graph. The tester then accepts or rejects (possibly randomly) according to  and the graph
induced by S.
Note, that by insisting that the oracle chooses the set of vertices S, an oblivious tester indeed
operates without knowing the size of the input, because if the tester had to choose S then it would
have to know the size of the input graph in order to specify a vertex of the graph. We believe that
the above definition captures the essence of property testing as essentially all the testers that have
been analyzed in the literature were in fact oblivious, or could trivially be turned into oblivious
testers. Even the testers for properties such as having an independent set of size 12 n or a cut with at
least 18 n2 edges (see [20]), whose definition involves the size of the graph, have oblivious testers. The
reason is simply that these properties can easily be expressed without using the size of the graph.
For example, in order to test if a graph has a cut with 18 n2 edges one can sample some Q = Q()
vertices and accept the input if and only if the graph induced on the sample has a cut of size at
least ( 18 ‚àí 2 )Q2 (of course, one needs to prove that this sampling scheme indeed works, see [20]). We
finally note that most ‚Äùapplications‚Äù of property-testing (see [15] and [28]) involve testing properties
of huge networks such as the Internet, whose size is anyway unknown.
1
The tester implied by the results of [21] and [3] may use the size of the input in order to determine both the query
complexity and in order to make its decisions

4

Observe, that there are two restrictions that the above definition imposes on an oblivious tester.
The first is that it cannot use the size of the input in order to determine the size Q, of the sample
of vertices. In other words, Q is only a function of  and not a function of  and n. The reader
should note that a tester for a testable graph property (as defined in the Section 1) may have a
query complexity that is bounded by a function of  but one that depends on the size of the graph
(e.g. Q(, n) = 1/ + (‚àí1)n ). Though this seems like an annoying technicality, it was proved in [9]
that this subtlety may have non-trivial ramifications. The second, seemingly more severe, restriction
on an oblivious tester is that it cannot use the size of the input in order to make its decisions after
the subgraph induced on the set S of Q vertices has been obtained. One can easily ‚Äùcook‚Äù graph
properties that cannot be tested by an oblivious tester. However, these properties are somewhat
non-natural. One example out of many is the following property, which we denote by P 0 : A graph on
an even number of vertices satisfies P 0 if and only if it is bipartite, while a graph on an odd number
of vertices satisfies P 0 if and only if it is perfect. A tester for P 0 clearly must use the size of the input
in order to make its decision regarding the graph induced by the sample.
Using our main result it can be shown that if one considers only oblivious testers, then it is
possible to precisely characterize the graph properties, which are testable with one-sided error. To
state this characterization we need the following definition:
Definition 2.2 (Semi-Hereditary) A graph property P is semi-hereditary if there exists a hereditary graph property H such that the following holds:
1. Any graph satisfying P also satisfies H.
2. For any  > there is an M (), such that any graph of size at least M (), which is -far from
satisfying P, contains an induced subgraph, which does not satisfy H.
Clearly, any hereditary graph property P is also semi-hereditary because we can take H in the
above definition to be P itself. In simple words, a semi-hereditary P is obtained by taking a hereditary
graph property H, and removing from it a (possibly infinite) set of graphs. This means that the
first item in Definition 2.2 is satisfied. As there are graphs not satisfying P that do satisfy H these
graphs do not contain any induced subgraph that does not satisfy H (because H is hereditary). The
only restriction, which is needed in order to get item 2 in Definition 2.2, is that P will be such that
for any  > 0 there will be only finitely many graphs that are -far from satisfying it, and yet contain
no induced subgraph that does not satisfy H.
We are now ready to state the main result of this paper.
Theorem 2 (Main Result) A graph property P has an oblivious one-sided error tester if and
only if P is semi-hereditary.
Returning to the graph property P 0 discussed above, note that by Theorem 1 this property,
which is not semi-hereditary, can be tested with one-sided error by a non-oblivious tester. Therefore,
it is not the case that a graph property is testable if and only if it is semi-hereditary. However,
if we disregard this and other non-natural graph properties then we may assume that in order to
test them we can confine ourselves to oblivious testers. Theorem 2 can thus be considered as a
precise characterization of the ‚Äùnatural‚Äù graph properties, which are testable with one-sided error.

5

We believe that it may be very interesting to further study property-testing via the framework of
oblivious testers, see Section 7.
Theorems 1 and 2 suggest many questions, some of which we discuss and resolve in the following
subsections, while others are discussed in Section 7 and are left as interesting open problems.

2.3
2.3.1

Additional results
On the (im)possibility of relaxing the notion of property-testing

Theorems 1 and 2 imply that any hereditary graph property is testable, when one uses the standard
notion of -far as defined in Section 1. Suppose we forbid addition of edges and define a graph G
on n vertices to be -fardel from satisfying property P if one needs to delete from G at least n2
edges in order to turn it into a graph satisfying P. We say that property P is testabledel if there is a
tester for distinguishing between graphs satisfying P from those that are -fardel from satisfying it,
and whose number of queries depends only on . A natural question is which graph properties are
testabledel . Obviously, any hereditary property, which is also closed under removal of edges (such
as k-colorability) is testabledel as in these cases being -fardel is equivalent to -far. The following
theorem is a sharp contrast to Theorems 1 and 2.
Theorem 3 For any hereditary property P, which is not closed under removal of edges, and is
satisfied by any complete graph, there is a constant Œ¥ = Œ¥(P) > 0 such that testingdel property P
(even with two-sided error) requires nŒ¥ queries.
Note that any natural hereditary property, such as any of those discussed in Subsection 2.1, is
satisfied by any complete graph, thus the above result applies to these properties. We briefly mention
that we can also prove a similar statement when one allows only edge additions. See Section 6.
2.3.2

Unbounded first order graph properties

A first order graph property is one involving the boolean operators ‚àß, ‚à®, ¬¨, the ‚àÄ, ‚àÉ quantifiers, the
equality operator =, and the adjacency relation ‚àº. For example, the triangle-freeness property can
be written as ‚àÄ v1 , v2 , v3 ¬¨(v1 ‚àº v2 ‚àß v2 ‚àº v3 ‚àß v1 ‚àº v3 ). The main result of [3] states that every first
order graph property without quantification ‚àÄ‚àÉ is testable (possibly with two-sided error). The main
tool in [3] was a theorem stating that any hereditary graph property, which is expressible in terms
of a finite family of forbidden induced subgraphs is testable. Theorem 1 is a powerful extension of
this result as it allows the family of forbidden induced subgraphs to be infinite. One may thus ask
whether Theorem 1 can be used in order to extend the result of [3]. Theorem 4 below gives a positive
answer to this question. To state this extension we need the following definition.
Definition 2.3 (Unbounded First-Order Properties of type ‚àÉ‚àÄ) An unbounded first order
graph property of type ‚àÉ‚àÄ is of the form
‚àÉx1 , . . . , xt

‚àû
^

‚àÄy1 , . . . , yi Ai (x1 , . . . , xt , y1 , . . . , yi )

i=1

where each Ai (x1 , . . . , xt , y1 , . . . , yi ) is a quantifier-free first order expression.
6

(1)

The main result of [3] states that any graph property that can be expressed as above while using
a single relation Ai is testable. Using the main techniques of this paper, we can extend this to
expressions containing infinitely many expressions Ai .
Theorem 4 Every graph property describable by an unbounded first order graph property of type ‚àÉ‚àÄ
is testable (possibly with two-sided error).
It should be noted that it is proved in [3] that there are first order graph properties with alternation of type ‚àÄ‚àÉ which are not testable, thus Theorem 4 is in some sense best possible.
2.3.3

ANDing hereditary graph properties

We next describe a consequence of Theorem 1 (in fact, of the main step of proving Theorem 1),
which does not assert the testability of some graph property, but rather one that may be useful in
the general study of graph property testing. Suppose P = {P1 , P1 , . . . , } is a (possibly infinite) set of
monotone graph properties, that is, properties that are closed under removal of vertices and edges.
It was proved in [10] that in this case there is a function Œ¥ : (0, 1) 7‚Üí (0, 1) such that if a graph
G is -far from satisfying all the properties of P then for some i it is also Œ¥()-far from satisfying
Pi . Note, that this statement is non-trivial only when P is infinite, as if P contains k properties we
can clearly take Œ¥() = /k (In fact, to get the case of finite k the properties only need to be closed
under removal of edges). Consider now the case when the properties are assumed to be hereditary
properties, which are not necessarily monotone. Now it is not at all clear that a similar statement
holds even for k = 2, as modifying a graph in order to turn it into a graph satisfying P1 may increase
its distance from satisfying P2 . Using Theorem 1 we can show that a similar result holds even for
infinite sets of properties.
Theorem 5 For any (possibly infinite) set of hereditary graph properties P = {P1 , P2 , . . .}, there is
a function Œ¥P : (0, 1) 7‚Üí (0, 1) with the following property: If a graph G is -far from satisfying all
the properties of P, then for some i, the graph G is Œ¥P ()-far from satisfying Pi .
2.3.4

An extremal result for all graph property

Confirming a conjecture of ErdoÃãs, it was shown in [27] that if a graph is -far from being k-colorable,
then it contains a non k-colorable subgraph of size c(). In [10] this result was extended to any
monotone graph property. The main technical result of this paper, Lemma 4.2, immediately implies
that this result can be extended to any hereditary graph property. In fact, we can show that a similar
result holds for any graph property.
Theorem 6 For every graph property P, there is a function WP () with the following property: If
G is -far from satisfying P, then G contains an induced subgraph of size at most WP (), which
does not satisfy P.

2.4

Comparison to previous results

We next survey the previous results on graph property-testing, which were shown to be testable with
one-sided error. As all these properties are hereditary, their testability with one-sided error follows
as a special case of Theorem 1.
7

‚Ä¢ H-free: For every fixed graph H let PH be the property of not containing a copy of H, and let
‚àó be the property of not containing an induced copy of H. The property P was (implicitly)
PH
H
‚àó was shown to be testable in [3].
shown to be testable in [2], and PH
‚Ä¢ k-colorability: The k-colorability property was (implicitly) shown to be testable already in
[27]. In [20], a simplified explicit tester was studied with a significantly better query complexity.
This result was further improved by [5].
‚Ä¢ Induced vertex colorability: The main technical step in the proof of the main result of [3]
was in showing that for every finite set of k-colored graphs K, one can test the property of a
graph being vertex k-colorable with no induced colored graph from the set K. Note, that any
such property is hereditary
‚Ä¢ Induced edge colorability: Following [3], further induced edge-colorability properties were
studied in [14]. In this case we have a finite set of k-edge-colored graphs K, and the property
defined by K is that of having a k-edge-coloring with no induced colored graph from the set K.
Note, that any such property is hereditary, and that by Theorem 1 we can even take K to be
an infinite family of edge-colored graphs.
‚Ä¢ Graph partition problems: One of the main results of [20] is that any graph-partition
problem is testable with two-sided error. [21] gives a characterization of the graph-partition
properties that are testable with one-sided error. This characterization (essentially) follows as
a special case of Theorem 2, as what it (implicitly) states is that a partition problem is testable
with one-sided error if and only if it is hereditary.
‚Ä¢ Monotone graph properties: Very recently, the authors have shown in [10] that any monotone graph property is testable with one-sided error (a graph-property is monotone if it is
closed under removal of vertices and edges, therefore, any monotone property is in particular
hereditary). Though this family of graph properties is very general and contains many interesting graph properties such as k-colorability, being H-free and certain Ramsey properties, it
fails to include many interesting hereditary non-monotone properties such as those that were
discussed in Subsection 2.1.
‚Ä¢ One-sided vs. two-sided testers: The first author has shown ([21], Appendix D) that if a
hereditary graph property is testable with two-sided error then it is also testable with one-sided
error (but not necessarily with the same query complexity). By Theorem 1, this transformation
becomes obsolete, as Theorem 1 directly asserts that any hereditary graph property is testable
with one-sided error.
‚Ä¢ Bounded first order graph properties: Theorem 4 extends the main result of [3], where
the first order graph-property can contain only a single predicate Ai .
It is important to note that Theorems 1 and 2 do not assert the existence of one-sided error
testers, which are as efficient as the ad-hoc testers that were designed for every specific property in
the above mentioned papers. This is obviously a consequence of the generality of Theorems 1 and
2. It should be noted, however, that by Theorem 4 of [10], the upper bounds of Theorems 1 and 2
cannot be generally improved even for monotone graph properties. See the precise statement in [10].
8

2.5

Organization

Our main tool in the proof of Theorem 1 is a novel application of a powerful variant of SzemereÃÅdi‚Äôs
Regularity Lemma proved in [3]. In Section 3 we introduce the basic notions of regularity and state
the regularity lemmas that we use and some of their standard consequences. The proof of Theorem
1 is quite involved technically, and thus we give in Section 4 an overview of it. In this section
we also prove Theorem 6. The ideas of this proof, especially the usage of the notion of coloredhomomorphism, may be useful for handling other problems involving induced subgraphs. In Section
5 we give the full proof of Theorem 1 as well as the proof of Theorem 2. The proofs of Theorems 3,
4 and 5 appear in Section 6. In Section 7, we describe several possible extensions and open problems
that this paper suggests. Throughout the paper, whenever we relate, for example, to a function f3.1 ,
we mean the function f defined in Lemma/Claim/Theorem 3.1.

3

Regularity Lemma Background

In this section we discuss the basic notions of regularity, some of the basic applications of regular
partitions and state the regularity lemmas that we use in the proof of Theorem 1. See [23] for a
comprehensive survey on the regularity-lemma. We start with some basic definitions. For every two
nonempty disjoint vertex sets A and B of a graph G, we define e(A, B) to be the number of edges of
G between A and B. The edge density of the pair is defined by d(A, B) = e(A, B)/|A||B|.
Definition 3.1 (Œ≥-regular pair) A pair (A, B) is Œ≥-regular, if for any two subsets A0 ‚äÜ A and
B 0 ‚äÜ B, satisfying |A0 | ‚â• Œ≥|A| and |B 0 | ‚â• Œ≥|B|, the inequality |d(A0 , B 0 ) ‚àí d(A, B)| ‚â§ Œ≥ holds.
A very useful lemma that we use in this paper is Lemma 3.2 below, which helps us find many
induced copies of some fixed graph F , whenever a family of vertex sets are pairwise regular ‚Äùenough‚Äù
and their densities correspond to the edge-set of F . Several versions of this lemma were previously
proved in papers using the regularity lemma. For completeness we include a self contained proof in
the appendix.
Lemma 3.2 For every real 0 < Œ∑ < 1 and integer f ‚â• 1 there exist Œ≥ = Œ≥3.2 (Œ∑, f ) and Œ¥ = Œ¥3.2 (Œ∑, f )
with the following property. Suppose that F is a graph on f vertices vf , . . . , vf , and that U1 , . . . , Uf is
an f -tuple of disjoint vertex sets of G such that for every 1 ‚â§ i < j ‚â§ f the pair (Ui , Uj ) is Œ≥-regular.
Moreover, suppose that whenever (vi , vj ) ‚àà E(F ) we have d(Ui , Uj ) ‚â• Œ∑, and whenever (vi , vj ) 6‚àà E(F )
Q
we have d(Ui , Uj ) ‚â§ 1 ‚àí Œ∑. Then, at least Œ¥ fi=1 |Ui | of the f -tuples u1 ‚àà U1 , . . . , uf ‚àà Uf span an
induced copy of F , where each ui plays the role of vi .
Comment 3.3 Observe, that the functions Œ≥3.2 (Œ∑, f ) and Œ¥3.2 (Œ∑, f ) may and will be assumed to be
monotone non-increasing in f . Also, for ease of future definitions (in particular the one given in
(4)) we set Œ≥3.2 (Œ∑, 0) = Œ¥3.2 (Œ∑, 0) = 1 for any 0 < Œ∑ < 1.
Note that in terms of regularity, Lemma 3.2 requires all the pairs (Ui , Uj ) to be Œ≥-regular. However, and this will be very important later in the paper, the requirements in terms of density are not
very restrictive. In particular, if Œ∑ ‚â§ d(Ui , Uj ) ‚â§ 1 ‚àí Œ∑ then we don‚Äôt care if (i, j) is an edge of F .
A partition A = {Vi | 1 ‚â§ i ‚â§ k} of the vertex set of a graph is called an equipartition if |Vi | and
|Vj | differ by no more than 1 for all 1 ‚â§ i < j ‚â§ k (so in particular each Vi has one of two possible
sizes). The Regularity Lemma of SzemereÃÅdi can be formulated as follows.
9

Lemma 3.4 ([30]) For every m and  > 0 there exists a number T = T3.4 (m, ) with the following
property: Any graph G on n ‚â• T vertices, has an equipartition
A = {Vi | 1 ‚â§ i ‚â§ k} of V (G) with

m ‚â§ k ‚â§ T , for which all pairs (Vi , Vj ), but at most  k2 of them, are -regular.
The function T3.4 (m, ) may and is assumed to be monotone nondecreasing in m and monotone
non-increasing in . Another lemma, which will be very useful in this paper is Lemma 3.5 below. Some
versions of this lemma appear in various papers applying the Regularity Lemma. For completeness
we include a self contained proof in the appendix.
Lemma 3.5 For every l and Œ≥ there exists Œ¥ = Œ¥3.5 (l, Œ≥) such that for every graph G with n ‚â• Œ¥ ‚àí1
vertices there exist disjoint vertex sets W1 , . . . , Wl satisfying:
1. |Wi | ‚â• Œ¥n.

2. All 2l pairs are Œ≥-regular.
3. Either all pairs are with densities at least 21 , or all pairs are with densities less than 12 .
Comment 3.6 Observe, that the function Œ¥3.5 (l, Œ≥) may and will be assumed to be monotone nonincreasing in l and monotone non-decreasing in Œ≥. Therefore, for ease of future applications we will
assume that for all l and Œ≥ we have Œ¥3.5 (l, Œ≥) ‚â§ 1/2.
Our main tool in the proof of Theorem 1 in addition to Lemmas 3.2 and 3.5 is Lemma 3.8 below,
proved in [3]. This lemma can be considered a variant of the standard regularity lemma, where one
can use a function that defines  as a function of the size of the partition, rather than having to use a
fixed  as in Lemma 3.4. We denote such functions by E throughout the paper. To state the lemma
we need the following definition.
Definition 3.7 (The function WE,m ) Let E(r) : N 7‚Üí (0, 1) be an arbitrary monotone nonincreasing function. Let also m be an arbitrary positive integer. We define the function WE,m : N 7‚Üí
(0, 1) inductively as follows: WE,m (1) = T3.4 (m, E(0)). For any integer i > 1 put R = WE,m (i ‚àí 1)
and define
WE,m (i) = T3.4 (R, E(R)/R2 ).
(2)
Lemma 3.8 ([3]) For every integer m and monotone non-increasing function E : N 7‚Üí (0, 1) define
S = S3.8 (m, E) = WE,m (100/E(0)4 ).
For any graph G on n ‚â• S vertices, there exist an equipartition A = {Vi | 1 ‚â§ i ‚â§ k} of V (G) and
an induced subgraph U of G, with an equipartition B = {Ui | 1 ‚â§ i ‚â§ k} of the vertices of U , that
satisfy:
1. m ‚â§ k ‚â§ S.
2. Ui ‚äÜ Vi for all i ‚â• 1, and |Ui | ‚â• n/S.
3. In the equipartition B, all pairs are E(k)-regular.

4. All but at most E(0) k2 of the pairs 1 ‚â§ i < j ‚â§ k are such that |d(Vi , Vj ) ‚àí d(Ui , Uj )| < E(0).
10

Comment 3.9 For technical reasons (see the proof in [3]), Lemma 3.8 requires that for any r > 0
the function E(r) will satisfy E(r) ‚â§ min{E(0)/4, 1/4r2 }. However, we can always assume wlog that
E satisfies this condition because if it does not, then we can apply Lemma 3.8 with E 0 which is defined
as E 0 (r) = min{E(r), E(0)/4, 1/4r2 }. We will thus disregard this technicality.
One of the difficulties in the proof of Theorem 2, is in showing that all the constants that are used
in the course of the proof can be upper bounded by functions depending on  only. The following
observation will thus be useful.
Proposition 3.10 If m is bounded by a function of  only then for any E : N 7‚Üí (0, 1), the integer
S = S3.8 (m, E) can be upper bounded by a function of  only2 .
It should be noted that the dependency of the function T3.4 (m, ) on  is a tower of exponents of
height polynomial in 1/ (see the proof in [23]). Thus, even for moderate functions E the integer S
has a huge dependency on , which is a tower of towers of exponents of height polynomial in 1/.
One of the main results of [3] is that for every finite set of graphs F, the property of not
containing any member of F as an induced subgraph can be tested with one-sided error and with
query complexity depending on  only. The proof technique in [3], which applies Lemmas 3.2, 3.5
and 3.8 critically relies on the fact that the family of graphs is finite. The main step in the proof
of Theorem 1 is in extending the above to infinite families of graphs. To this end, we use the main
idea of [10], as well as a new type of homomorphism, in order to prove this stronger result. As in
[10] the main idea of the proof is to apply Lemma 3.8 with a suitable function E(r). However, as it
turns out, dealing with hereditary properties, which are not necessarily monotone, is considerably
more involved. The techniques we apply in the next section, in particular the notion of coloredhomomorphism, may be useful in dealing with other problems involving induced subgraphs.

4

Overview of the Proof of Theorem 1

The proof of Theorem 1 is very technical and rather long and appears in its entirety in Section 5.
In this section we try to give an overview of the proof, while keeping out most of the (unnecessary)
technical details. We start with an equivalent formulation of Theorem 1. To this end we introduce
a convenient way of handling hereditary graph properties.
Definition 4.1 (Forbidden Induced Subgraphs) For a hereditary graph property P, define F =
FP to be the set of graphs which are minimal with respect to not satisfying property P. In other words,
a graph F belongs to F if it does not satisfy P, but any graph obtained from F by removing a vertex,
satisfies P.
For a (possibly infinite) family of graph F, a graph G is said to be induced F-free if it contains no
induced copy of any graph F ‚àà F. Note, that for any hereditary graph property P there is a family
of graphs F = FP such that a graph satisfies P if and only if it is induced F-free. For F one can
simply take the family of forbidden induced subgraphs as in Definition 4.1. For example, when P is
2
In our application of Lemma 3.8 the function E will (implicitly) depend on the error parameter . For example,
we will set E(r) = f (r, ) for some function f . However, that will not change the fact that S3.8 (m, E) can be upper
bounded by a function of  only.

11

the property of being Chordal (see Subsection 2.1) then FP is the set of cycles of length at least 4.
As another example note that if P is the property of being bipartite then FP is not the family of odd
cycles. Observe, that F may contain infinitely many graphs. Clearly for any family F, the property
of being induced F-free is hereditary, thus, the hereditary graph properties are precisely the graph
properties, which are equivalent to being induced F-free for some family F. For ease of presentation,
it will be more convenient to derive Theorem 1 from the following (essentially equivalent3 ) lemma,
whose proof is the main technical step in this paper.
Lemma 4.2 For every (possibly infinite) family of graphs F, there are functions NF (), fF () and
Œ¥F () such that the following holds for any  > 0: If a graph G on n ‚â• NF () vertices is -far
from being induced F-free, then G contains Œ¥nf induced copies of a graph F ‚àà F of size f , where
f ‚â§ fF () and Œ¥ ‚â• Œ¥F ().
Before continuing with the overview of the proof of Theorem 1, we note that the above lemma
immediately implies Theorem 6. Indeed, given any graph property P let F be the family of graphs
not satisfying P. Observe, that if a graph is -far from satisfying P then it is also -far from being
induced F-free and thus by Lemma 4.2 it contains an induced subgraph F ‚àà F of size at most fF (),
and by our choice of F the graph F does not satisfy P. Therefore, as the function WP () in the
statement of Theorem 6 we can take the function fF ().
For the proof of Lemma 4.2 we will need a new type of homomorphism, which is suitable for
handling induced subgraph.
Definition 4.3 (Colored-Homomorphism) Let K be complete graph whose vertices are colored
black or white, and whose edges are colored black, white or grey (neither the vertex coloring nor the
edge coloring is assumed to be proper in the standard sense). A colored-homomorphism from a graph
F to a graph K is a mapping œï : V (F ) 7‚Üí V (K), which satisfies the following:
1. If (u, v) ‚àà E(F ) then either œï(u) = œï(v) = t and t is colored black, or œï(u) 6= œï(v) and
(œï(u), œï(v)) is colored black or grey.
2. If (u, v) 6‚àà E(F ) then either œï(u) = œï(v) = t and t is colored white, or œï(u) 6= œï(v) and
(œï(u), œï(v)) is colored white or grey.
If there is a colored-homomorphism from a graph F to a colored complete graph K, we write for
brevity F 7‚Üíc K. Some explanation is in place as to the meaning of the colors in the above definition.
To this end, it is instructive to compare the definition of a colored-homomorphism to the standard
notion of homomorphism.
Definition 4.4 (Homomorphism) A homomorphism from a graph F to a graph K is mapping
œï : V (F ) 7‚Üí V (K), which maps edges to edges, namely (v, u) ‚àà E(F ) implies (œï(v), œï(u)) ‚àà E(K).
For brevity, we denote by F 7‚Üí K the fact that there is a homomorphism from F to K. The
fact that F 7‚Üí K, simply means that we can partition the vertex set of F into k = |V (K)| subsets
V1 , . . . , Vk , such that each Vi is edgeless and if (i, j) 6‚àà E(K) then none of the vertices of F that
belong to Vi is connected to any of the vertices of F that belong to Vj . In particular, note that
3

See Section 5 for a discussion about the subtle difference.

12

F 7‚Üí Kk if and only if F is k-colorable (where Kk is a clique of size k). The standard notion of
homomorphism is sufficient for dealing with not necessarily induced subgraphs as was carried out in
[10]. The reason is that having a homomorphism to a graph K is ‚Äùclosed under removal of vertices‚Äù
in the sense that if F 7‚Üí K and F 0 is a subgraph of F then F 0 7‚Üí K. When one wants to handle
induced subgraphs it soon turns out that standard homomorphism is not sufficient as it does not
supply enough information about F . The clear reason for that is that a standard homomorphism
has no requirement about the non-edges of the graph. Returning to the the colored-homomorphism
from Definition 4.3, suppose we interpret the colors of K as follows: A white edge of K represents a
non-edge, a black edge of K represents an existing edge and a grey edge represents a ‚Äùdon‚Äôt care‚Äù.
As for the vertex colors, we think of a black vertex as a complete graph, and a white vertex as an
edgeless graph. Thus, the fact that F 7‚Üíc K where K is a colored complete graph of size k is the
following: There is a partition of V (F ) into k subsets V1 , . . . , Vk such that each Vi is either complete
or edgeless, where Vi is complete if i ‚àà V (K) is black and edgeless if i ‚àà E(K) is white. Also, if (i, j)
is colored white then none of the vertices of F that belong to Vi is connected to any of the vertices of
F that belong to Vj . Similarly, if (i, j) is colored black then all the vertices of F that belong to Vi are
connected to all the vertices of F that belong to Vj . Finally, if (i, j) is colored grey then there is no
restriction on pairs (v ‚àà Vi , u ‚àà Vj ) (or in our ‚Äùformal‚Äù notation, we ‚Äùdon‚Äôt care‚Äù if (v ‚àà Vi , u ‚àà Vj )
is an edge of F ). It is clear that a colored-homomorphism carries a lot more information about the
structure of F than a standard homomorphism.
Our definition of colored-homomorphism should also be thought of with Lemma 3.2 in mind.
Note that in this lemma we only require d(Ui , Uj ) ‚â• Œ∑ when (i, j) ‚àà E(F ) and d(Ui , Uj ) ‚â§ 1 ‚àí Œ∑ when
(i, j) 6‚àà E(F ). In particular, if Œ∑ ‚â§ d(Ui , Uj ) ‚â§ 1 ‚àí Œ∑ then we ‚Äùdon‚Äôt care‚Äù whether (i, j) ‚àà E(F ). In
fact, as the details of the proof of Lemma 4.2 reveal, the possibility of having grey edges in the coloring
of K in the definition of the colored-homomorphism is unavoidable (at least in our proof). Note,
that as far as Lemma 3.2 is concerned, we only need the edge coloring in the colored-homomorphism.
The details below supply some explanation for the need of the vertex coloring.
We now turn to discuss the relation between the standard regularity lemma (Lemma 3.4), the
stronger regularity lemma (Lemma 3.8) and colored-homomorphism. We stress that some of the
explanations we give below are not completely accurate, and are given in order to explain the main
ideas of the proof. The formal proof appears in Section 5. Given  > 0 and a graph G, Lemma 3.4
returns an equipartition of V (G) of size k. Let the regularity graph of G, denoted R = R(G), be the
following graph. R is a graph on k vertices, where vertices i and j are connected if and only if (Vi , Vj )
is a dense regular pair (with the appropriate parameters). In some sense, the regularity graph is an
approximation of the original graph, up to n2 modifications. This approximation was good enough
when considering monotone properties in [10] (this notion of regularity graph is standard when
applying Lemma 3.4) but it is not good enough when dealing with induced graphs, which is the case
we consider here. The reason is that R only approximates the dense pairs of the equipartition, while
it carries no restriction or information on the sparse pairs in this equipartition. This is somewhat
analogous to the fact that standard homomorphism is not good enough for dealing with induced
subgraphs. Just like we defined colored-homomorphism we introduce colored regularity graphs as
follows; Let R be a complete graph on k vertices. Color (i, j) black if (Vi , Vj ) is a very dense pair,
white if (Vi , Vj ) is a very sparse pair, and grey if (Vi , Vj ) is neither very dense nor very sparse (we omit
the precise definition of ‚Äùvery‚Äù). Note, that a colored-regularity graph carries a lot more information
about G. Note also how this definition relates to a colored-homomorphism.

13

Suppose a graph G is -far from being induced F-free. We would want to apply Lemma 3.4,
then construct the colored regularity graph, and then argue that if we make few (less then n2 )
modifications in G then the new graph GÃÉ, contains an induced copy of a graph F ‚àà F. Furthermore,
as we make very few changes, the colored regularity graph is also a ‚Äùgood‚Äù approximation of GÃÉ. We
would thus want to use Lemma 3.2, where for the sets U1 , . . . , Uf we take the clusters V1 , . . . , Vk
of the equipartition) in order to get that there are many induced copies of F in G. However, we
are faced with the following two problems: (i) As F may be infinite, we don‚Äôt know the size of the
member of F that we may expect to find in GÃÉ. As Lemma 3.2 needs to know the size of F in advance,
we don‚Äôt know how small an  should we choose in order to apply Lemma 3.4. (ii) Note that Lemma
3.2 allows the copies of F to have only one vertex in each of the sets Ui . However, the copy of the
member of F that we may find in GÃÉ may have many vertices in each cluster Vi . Note further, that
Lemma 3.4 does not guarantee anything about the graphs induced by each Vi .
The main idea of the proof is to overcome the first problem by applying Lemma 3.8 with a suitable
function E that will guarantee that the partition is regular enough even for the largest graph we may
expect to find in GÃÉ. For the second problem we apply Lemma 3.5 on each of the clusters Vi in order
to find subsets Wi,1 , . . . , Wi,f ‚äÇ Vi . Note that by Lemma 3.2, if for all j 0 , j 00 d(Wi,j 0 , Wi,j 00 ) ‚â• 1/2
then Wi,1 , . . . , Wi,f span many cliques of size f , while if for all j 0 , j 00 , d(Wi,j 0 , Wi,j 00 ) ‚â§ 1/2 they span
many independent sets of size f . This is the main reason for the vertex coloring of R, that is, we
color vertex i of R black, if the sets returned by Lemma 3.5 are very dense, and white if they are
sparse. We note that overcoming both problems mentioned above simultaneously adds another level
of complication.
An important ingredient in the proof of Lemma 4.2 will be the following function. The reader
should think of the graphs R considered below as the set of colored-regularity graphs discussed above,
and the parameter r as representing the size of R.
Definition 4.5 (The family Fr ) For any (possibly infinite) family of graphs F, and any integer r
let Fr be the following set of graphs: A colored complete graph R belongs to Fr if it has at most r
vertices and there is at least one F ‚àà F such that F 7‚Üíc R.
In the proof of Lemma 4.2, the set Fr , defined above, will represent a subset of the colored
regularity graphs of size at most r. Namely, those R for which there is at least one F ‚àà F such that
F 7‚Üíc R. We now define
Definition 4.6 (The function Œ®F ) For any family of graphs F and integer r for which Fr =
6 ‚àÖ,
let
min
|V (F )|.
(3)
Œ®F (r) = max
R‚ààFr

{F ‚ààF :F 7‚Üíc R}

Define Œ®F (r) = 0 if Fr = ‚àÖ. Therefore, Œ®F (r) is monotone non-decreasing in r.
One of the key definitions in [10], is a function analogous to Œ®F but with respect to standard
homomorphism. In our case as well, Œ®F is one of the main tools with which we apply Lemma 3.8.
As by Lemma 3.4 we can upper bound the size of the regularity graph R, we can also upper bound
the size of the smallest graph F ‚àà F for which F 7‚Üíc R.
As we have mentioned in the previous section, the main difficulty that prevents one from proving
Theorem 1 using Lemma 3.2 is that one does not know a priori the size of the graph that one may
expect to find in the equipartition. This leads us to the define the following function
14

E(r) = Œ≥3.2 (/6, Œ®F (r)) ¬∑ Œ¥3.5 (Œ®F (r), Œ≥3.2 (/6, Œ®F (r)))

(4)

We next try to explain why the above defined E(r) when applied with Lemma 3.8 is useful in
resolving the two difficulties mentioned above. Recall that r stands for the size of the regularity
graph returned by Lemma 3.8. If we apply Lemma 3.8 with the above E then by the first term in
the definition of E we know that the sets Ui (recall the statement of Lemma 3.4) are regular enough
to allow one to apply Lemma 3.2 with the largest member of F, which we may need to work with.
This is due to invoking Œ®F (r). The reason we need the second term in the definition of E is that we
intend to apply Lemma 3.5 on each of the sets Vi in order to obtain certain subsets of Vi . This term
guarantees that even if we the subsets of Vi will be ‚Äùregular-enough‚Äù for our purposes.

5

Proofs of Main Results

We start with the proof of Lemma 4.2, which is the main technical step in the proof of Theorem 1.
We then use Theorem 1 in order to prove Theorem 2. We assume the reader is familiar with the
overview of the proof of Lemma 4.2 given in Section 4. For the proof we need the following simple
fact, which states that large enough subsets of a regular pair are themselves somewhat regular.
Claim 5.1 If (A, B) is a Œ≥-regular pair with density Œ∑, and A0 ‚äÜ A and B 0 ‚äÜ B satisfy |A0 | ‚â• Œæ|A|
and |B 0 | ‚â• Œæ|B| for some Œæ ‚â• Œ≥, then (A0 , B 0 ) is a max{2Œ≥, Œ≥/Œæ}-regular pair.
Proof: As (A, B) is a Œ≥-regular pair with density Œ∑, then by definition of a regular pair, for every
pair of subsets of A0 ‚äÜ A with |A0 | ‚â• Œæ|A| ‚â• Œ≥|A| and B 0 ‚äÜ B with |B 0 | ‚â• Œæ|B| ‚â• Œ≥|B| we have
|d(A0 , B 0 ) ‚àí d(A, B)| ‚â§ Œ≥. Note, that if A0 and B 0 are as above, then for every pair of subsets A00 ‚äÜ A0
and B 00 ‚äÜ B 0 satisfying |A00 | ‚â• Œ≥Œæ |A0 | and |B 00 | ‚â• Œ≥Œæ |B 0 | also satisfy |A00 | ‚â• Œ≥|A| and |B 00 | ‚â• Œ≥|B|.
Therefore, by the Œ≥-regularity of (A, B) we have |d(A00 , B 00 ) ‚àí d(A, B)| ‚â§ Œ≥. We thus conclude that
|d(A00 , B 00 ) ‚àí d(A0 , B 0 )| ‚â§ 2Œ≥. Hence, (A0 , B 0 ) is max{2Œ≥, Œ≥/Œæ}-regular.
Proof of Lemma 4.2: Fix any family of graphs F. Let Œ®F (r) be the function defined in Section 4
and define the following functions of r:
Œ±(r) = Œ¥3.5 (Œ®F (r), Œ≥3.2 (/6, Œ®F (r))),

(5)

Œ≤(r) = Œ±(r) ¬∑ Œ≥3.2 (/6, Œ®F (r)),

(6)

and


E(r) =

/6,
r=0
min{Œ≤(r), /6}, r ‚â• 1

(7)

For the rest of the proof set
S() = S3.8 (6/, E),

(8)

and note that as we define S() in terms of m = 6/ we get by Proposition 3.10 that S() is indeed
a function of  only. We now set NF () to be the following function of 
N = NF () = S()

15

(9)

(as we have just argued, S() and therefore also N can be upper bounded by functions of  only).
We postpone the definition of fF () and Œ¥F () till the end of the proof.
Given a graph G on n vertices, with n ‚â• N ‚â• S(), we can use Lemma 3.8 with m = 6/ and E(r)
as defined in (7), in order to obtain an equipartition of V (G) into 6/ ‚â§ k ‚â§ S() clusters V1 , . . . , Vk
(this is possible by item (1) in Lemma 3.8). Throughout the rest of the proof, k will denote the size
of the equipartition returned by Lemma 3.8. By item (2) of Lemma 3.8, for every 1 ‚â§ i ‚â§ k we
have sets Ui ‚äÜ Vi each of size at least n/S(). Also, by item (3) of Lemma 3.8, every pair of these
sets is at least Œ≤(k)-regular (recall that E(k) ‚â§ Œ≤(k)). For each 1 ‚â§ i ‚â§ k, apply Lemma 3.5 on the
subgraph induced by G on each Ui with ` = Œ®F (k) and Œ≥ = Œ≥3.2 (/6, Œ®F (k)) in order to obtain the
appropriate sets Wi,1 , . . . , Wi,Œ®F (k) ‚äÇ Ui , all of size at least Œ±(k)|Ui | (recall the definition of Œ±(r) in
(5)). It is crucial to note that we apply Lemma 3.5 on each of the sets U1 , . . . , Uk after we apply
Lemma 3.8 on G, thus we ‚Äùknow‚Äù the value of k. The following observation will be useful for the
rest of the proof:
Claim 5.2 All the pairs (Wi,i0 , Wj,j 0 ) are Œ≥3.2 (/6, Œ®F (k))-regular. Also, if i 6= j then we also have
|d(Wi,i0 , Wj,j 0 ) ‚àí d(Ui , Uj )| ‚â§ /6.
Proof: Consider first pairs that belong to the same set Ui . In this case, the fact that any pair
(Wi,i0 , Wi,j 0 ) is Œ≥3.2 (/6, Œ®F (k))-regular follows immediately from our choice of these sets, as we
applied Lemma 3.5 on each set Ui with Œ≥ = Œ≥3.2 (/6, Œ®F (k)). Consider now pairs that belong
to different sets Ui , Uj . As was mentioned above, any pair (Ui , Uj ) is Œ≤(k)-regular. As each set
Wi,j satisfies |Wi,j | ‚â• Œ±(k)|Ui |, we get from Claim 5.1 and the definition of Œ≤(k) that any pair
(Wi,i0 , Wj,j 0 ) is at least max{2Œ≤(k), Œ≤(k)/Œ±(k)} ‚â§ Œ≥3.2 (/6, Œ®F (k))-regular (here we use the fact
that Œ±(k) ‚â§ 1/2, which is guaranteed by Comment 3.6). Finally, as each of the sets Wi,j satisfies
|Wi,j | ‚â• Œ±(k)|Ui | ‚â• Œ≤(k)|Ui | ‚â• E(k)|Ui | we get from the fact that each pair (Ui , Uj ) is E(k)-regular
that |d(Wi,i0 , Wj,j 0 ) ‚àí d(Ui , Uj )| ‚â§ E(k) ‚â§ /6, thus completing the proof.
Our goal is to apply Lemma 3.2 on some appropriately chosen subset of the sets Wi,j defined
above. As by Claim 5.2 all the pairs are regular (we will latter infer that they are regular enough for
our purposes), we just have to find sets whose densities will correspond to the edge set of a graph
F ‚àà F (recall the statement of Lemma 3.2). To this end, we define a graph GÃÉ that will help us in
choosing the sets Wi,j . The graph GÃÉ is obtained from G by adding and removing the following edges,
in the following order:
1. For 1 ‚â§ i < j ‚â§ k such that |d(Vi , Vj ) ‚àí d(Ui , Uj )| > /6, for all v ‚àà Vi and v 0 ‚àà Vj the pair
(v, v 0 ) becomes an edge if d(Ui , Uj ) ‚â• 12 , and becomes a non-edge if d(Ui , Uj ) < 12 .
2. For 1 ‚â§ i < j ‚â§ k such that d(Ui , Uj ) < 62 , all edges between Vi and Vj are removed. For all
1 ‚â§ i < j ‚â§ k such that d(Ui , Uj ) > 1 ‚àí 26 , all non-edges between Vi and Vj become edges.
3. If for a fixed i all densities of pairs from Wi,1 , . . . , Wi,l are less than 12 , all edges within the
vertices of Vi are removed. Otherwise, all the above densities are at least 12 (by the choice of
Wi,1 , . . . , Wi,l through Lemma 3.5), in which case all non-edges within Vi become edges.
Àú B) the edge density of the pair (A, B) in G and
In what follows we denote by d(A, B) and d(A,
GÃÉ, respectively. For ease of future reference we state the following relations between G and GÃÉ.

16

Àú i,i0 , Wi,j 0 ) = 1 and d(Wi,i0 , Wi,j 0 ) ‚â• 1 or
Claim 5.3 For any i and i0 < j 0 we either have d(W
2
1
Àú i,i0 , Wi,j 0 ) = 0 and d(Wi,i0 , Wi,j 0 ) ‚â§ . Also, for any i < j and any i0 , j 0 one of the following
d(W
2
holds:
Àú i , Vj ) = 1 and d(Wi,i0 , Wj,j 0 ) ‚â• /6.
1. d(V
Àú i , Vj ) = 0 and d(Wi,i0 , Wj,j 0 ) ‚â§ 1 ‚àí /6.
2. d(V
Àú i , Vj ) ‚â§ 1 ‚àí /6 and /6 ‚â§ d(Wi,i0 , Wj,j 0 ) ‚â§ 1 ‚àí /6.
3. /6 ‚â§ d(V
Proof: The proof follows easily from the three steps for obtaining GÃÉ. The first assertion of the
claim follows directly from the third step of obtaining GÃÉ. As for the second assertion, assume the
Àú i , Vj ) = 1 and d(Ui , Uj ) ‚â• 1/2 or
first step was applied to a pair (Vi , Vj ). In this case either d(V
Àú i , Vj ) = 0 and d(Ui , Uj ) ‚â§ 1/2. By Claim 5.2 we get that in the former case for any i0 , j 0 we have
d(V
d(Wi,i0 , Wj,j 0 ) ‚â• 1/2 ‚àí /6 ‚â• /6, while in the later d(Wi,i0 , Wj,j 0 ) ‚â§ 1/2 + /6 ‚â§ 1 ‚àí /6, as needed.
Note, that if the first step was applied to a pair (Vi , Vj ) then the second step has no effect, thus
either (1) or (2) will hold at the end of the process. Assume the second step was applied to a pair
Àú i , Vj ) = 1 and d(Ui , Uj ) ‚â• 1 ‚àí /3 or d(V
Àú i , Vj ) = 0 and d(Ui , Uj ) ‚â§ /3.
(Vi , Vj ). In this case either d(V
Again, by Claim 5.2, we get that in the former case d(Wi,i0 , Wj,j 0 ) ‚â• 1 ‚àí /3 ‚àí /6 ‚â• /6 while in
the later d(Wi,i0 , Wj,j 0 ) ‚â§ /3 + /6 ‚â§ 1 ‚àí /6. If none of the two steps was applied to (Vi , Vj ), then
we initially had |d(Vi , Vj ) ‚àí d(Ui , Uj )| ‚â§ /6 and /3 ‚â§ d(Ui , Uj ) ‚â§ 1 ‚àí /3. Thus, item (3) holds as
Àú i , Vj ) ‚â§ 1 ‚àí /6 and by Claim 5.2 for any i0 , j 0 we have
in this case we have /6 ‚â§ d(Vi , Vj ) = d(V
/6 ‚â§ d(Wi,i0 , Wj,j 0 ) ‚â§ 1 ‚àí /6.
Claim 5.4 The graphs G and GÃÉ differ by less than n2 edges.
Proof: As the number of pairs v ‚àà Vi , v 0 ‚àà Vj is n2 /k 2 , and by item (4) of Lemma 3.8 the number of


pairs 1 ‚â§ i < j ‚â§ k for which |d(Vi , Vj ) ‚àí d(Ui , Uj )| > /6 = E(0) is at most E(0) k2 = 61  k2 , in the
 2
first step we changed less than 61  k2 nk2 ‚â§ 61 n2 edges. In the second stage, if d(Ui , Uj ) < 62  then by
the modifications made in the first step, we have d(Vi , Vj ) < 12 . Similarly if d(Ui , Uj ) > 1 ‚àí 26  then
by the modifications made in the first step, we have d(Vi , Vj ) > 1 ‚àí 21 . Thus in this step we make at


‚â§ n2 /k
most k2 12 (n2 /k 2 ) ‚â§ 21 n2 modifications. Finally, in the third step we make at most k n/k
2
1
2
2
modifications. As we apply Lemma 3.8 with m = 6/, we have n /k ‚â§ 6 n . Altogether, we make
less than n2 modifications.
We now turn to use the notion of colored-homomorphism, which was introduced in Section 4. For
the rest of the proof, let R be the following colored complete graph on k vertices. We color i ‚àà V (R)
white if Vi is edgeless in GÃÉ. Otherwise (i.e. Vi is a complete graph in GÃÉ, by step (3) in obtaining GÃÉ
Àú i , Vj ) = 0 we color (i, j) white, if d(V
Àú i , Vj ) = 1 we color (i, j) black,
from G) we color vi black. If d(V
Àú i , Vj ) ‚â§ 1 ‚àí /6, by Claim 5.3) we color (i, j) grey.
otherwise (i.e. /6 ‚â§ d(V
Claim 5.5 GÃÉ spans an induced copy of a graph F 0 ‚àà F. Moreover, F 0 7‚Üíc R.
Proof: As G is by assumption -far from being induced F-free, and by Claim 5.4 GÃÉ is obtained from
G by making less than n2 modifications (of adding and removing edges) GÃÉ spans an induced copy
of a graph F 0 ‚àà F. We claim that there is a colored-homomorphism from F 0 to R. Indeed, consider
17

a mapping œï : V (F 0 ) 7‚Üí V (R) which maps all the vertices of F 0 that belong to Vi to vertex i of R.
We claim that this is a colored-homomorphism from F 0 to R. Suppose first that (u, v) is an edge of
F 0 . If u and v belong to the same vertex set Vi , then Vi must be complete in GÃÉ. By definition of
œï they are both mapped to i ‚àà V (R) and by our coloring of R, vertex i is colored black. If u ‚àà Vi
Àú i , Vj ) = 0, hence (i, j) ‚àà E(R) was not colored white.
and v ‚àà Vj then it cannot be the case that d(V
0
Similarly, if (u, v) is not an edge of F , then if u and v belong to the same vertex set Vi , then Vi must
be edgeless. Hence, vertex i is colored white. If u ‚àà Vi and v ‚àà Vj then it cannot be the case that
d0 (Vi , Vj ) = 1, hence (i, j) ‚àà E(R) was not colored black. We thus get that œï satisfies the definition
of a colored-homomorphism.
Claim 5.6 There is a graph F ‚àà F of size f ‚â§ Œ®F (k) for which F 7‚Üíc R.
Proof: By Claim 5.5, there is a graph F 0 ‚àà F for which F 0 7‚Üíc R. Therefore, R belongs to Fk
(recall Definition 4.3 and the fact that R is of size k). It thus follows from the definition of Œ®F that
F contains a graph of size at most Œ®F (k) such that F 7‚Üíc R.
Let F be the graph whose existence is guaranteed by Claim 5.6 and denote its vertex set by
{1, . . . , f } with f ‚â§ Œ®F (k). Let œï : V (F ) 7‚Üí V (R) be the colored-homomorphism from F to R.
By the way we colored R and by the definition of a colored-homomorphism we get the following: If
(u, v) ‚àà E(F ) then either œï(u) = œï(v) = i and Vi is a complete graph in GÃÉ or œï(u) = i 6= j = œï(v)
Àú i , Vj ) ‚â• /6. If (u, v) 6‚àà E(F ) then either œï(u) = œï(v) = i and Vi is an edgeless graph in GÃÉ
and d(V
Àú i , Vj ) ‚â§ 1 ‚àí /6. By Claim 5.3 this implies the following:
or œï(u) = i 6= j = œï(v) and d(V
Proposition 5.7 Let F be the graph from Claim 5.6, let œï : V (F ) 7‚Üí V (R) be a colored homomorphism and put ti = œï(vi ) for every vi ‚àà V (F ). We have the following:
‚Ä¢ If (i, j) ‚àà E(F ) then d(Wti ,i , Wtj ,j ) ‚â• /6.
‚Ä¢ If (i, j) 6‚àà E(F ) then d(Wti ,i , Wtj ,j ) ‚â§ 1 ‚àí /6.
The proof now follows easily from the above proposition. Consider the sets Wt1 ,1 , . . . , Wtf ,f as
in Proposition 5.7 and note that we choose the sets as Wti ,i in order to make sure that we do not
choose the same Wi,i0 twice, because we may need to use several sets Wi,j from the same set Ui .
Also, observe that as f ‚â§ Œ®F (k) and we obtained through Lemma 3.5 ` = Œ®F (k) sets Wi,j from each
Ui , we can indeed choose the sets in the above manner, even if all the chosen sets Wi,j belong to the
same Ui . By Claim 5.2, any pair of these sets is at least Œ≥3.2 (/6, Œ®F (k))-regular in G. Moreover, by
Proposition 5.7, these f ‚â§ Œ®F (k) sets satisfy in G (not in GÃÉ) the edge requirements of Lemma 3.2,
which are needed in order to infer that they span many induced copies of F (recall that F has at
most Œ®F (k) vertices). Thus, Lemma 3.2 ensures that Wt1 ,1 , . . . , Wtf ,f span in G (not in GÃÉ) at least
Œ¥3.2 (/6, Œ®F (k)) ¬∑

f
Y

|Wti ,i |

(10)

i=1

induced copies of F . We next show that we can take F as the graph in the statement of the lemma.
To show this, we should only define the functions fF () and Œ¥F () (the function NF () is defined in
(9)). As |Ui | ‚â• n/S() and |Wti ,i | ‚â• Œ±(k)|Ui |, we conclude from (10) that G contains at least
Œ¥3.2 (/6, Œ®F (k)) ¬∑ (Œ±(k)/S())f ¬∑ nf
18

(11)

induced copies of F . Thus, as f ‚â§ Œ®F (k), k ‚â§ S() and by the monotonicity properties of all the
functions considered in the proof, we can replace k with S() and f with Œ®F (S()) and thus define
fF () = Œ®F (S()).

(12)

Similarly, we can replace k and f in (11) in order to define
Œ¥F () =

Œ¥3.2 (/6, Œ®F (S()))
.
(S()/Œ±(S()))Œ®F (S())

(13)

This completes the proof of Lemma 4.2.
Before proving Theorem 1 we briefly discuss the notions of uniform and non-uniform testing,
which were defined and studied in [10] and [9]. A tester is non-uniform if it knows  in advance, and
therefore should be able to distinguish between graphs that satisfy P from those that are -far from
satisfying it. A tester is uniform if it can accept  as part of the input. The main result of [9] is
that there are monotone graph properties, which have non-uniform one-sided testers but cannot be
tested by a uniform (one-sided or two-sided) testers. It thus follows that we cannot design uniform
testers for all the hereditary graph properties.
Note, that in (9),(12) and (13) the only function, which may be non-computable is Œ®F . Thus
whenever this function is computable so are the three functions of Lemma 4.2. As the proof of
Theorem 1 suggests, once these functions are computable, the tester is uniform. Finally, we note
that for any reasonable graph property, and in particular those that were discussed in Subsection 2.1,
Œ®F is indeed computable (not necessarily very efficiently). Thus, these properties are testable in the
usual sense. We thus assume henceforth that F is such that the functions NF (), fF () and Œ¥F () are
computable. Note however, that even if they are not computable, we still get a non-uniform tester
for any (decidable) hereditary graph property.
Proof of Theorem 1: Fix any hereditary graph property P, and let F be the family of forbidden
induced subgraphs of P as in Definition 4.1. Let NF (), fF () and Œ¥F () be the functions of Lemma
4.2 and assume they are computable. To design our one-sided error tester for P we just need to
note that if a graph on n vertices contains at least Œ¥nf induced copies of a graph F on f vertices,
then sampling 2/Œ¥ sets of f vertices each, which is a total of 2f /Œ¥, finds an induced copy of F with
probability at least 2/3.
Given a graph G the one-sided error tester for P works as follows; it asks the oracle for a subgraph
of G induced by a randomly chosen set of max{NF (), 2fF ()/Œ¥F ()} vertices. It declares G to be
a graph satisfying P if and only if the induced subgraph on S satisfies P. Clearly, if G satisfies P,
then as P is hereditary the algorithm accepts G with probability 1. If G is -far from satisfying P
and G has less that NF () vertices, the algorithm answers correctly with probability 1, as in this
case S spans G. If G has more than NF () vertices, then by Lemma 4.2 there is a member of F
of size f = fF () such that G spans Œ¥F ()nf induced copies of F . By the observation from the
preceding paragraph, S spans an induced copy of F with probability at least 2/3. As F ‚àà F and
P is hereditary, we get that with probability at least 2/3, the graph spanned by S does not satisfy
P. Hence, the tester rejects G with probability at least 2/3. Also, its query complexity is always a
function of  only.

19

Comment 5.8 Note that the tester in the proof of Theorem 1 is oblivious as it never uses the size
of the input graph in order to make its decisions.
Proof of Theorem 2: Let P be a semi-hereditary property and let H be the hereditary graph
property as in Definition 2.2. We next show that P has an oblivious one-sided error tester. As H is
hereditary we get from Theorem 1 and Comment 5.8 that there is a function QH () such that H can
be tested by an oblivious one-sided error tester with query complexity QH (). The tester T works
as follows: its query complexity is Q() = max{M (/2), QH (/2)}. After getting from the oracle the
randomly chosen induced subgraph, which we denote by G0 , the tester T proceeds as follows: If G0
is of size strictly smaller than Q(), the algorithm accepts if and only if G0 satisfies P. If G0 is of size
at least Q() the algorithm accepts if and only if G0 satisfies H.
We turn to show that T is indeed an oblivious one-sided error tester for P. We first observe that
T satisfies the definition of an oblivious tester. We also note that if the input graph is of size less than
Q() then we accept the input if and only if it satisfies P because by the definition of an oblivious
tester this means that the input graph was of size less than Q() and therefore the oracle returned the
entire input graph. Let us now consider an input of size at least Q() and recall that Q() ‚â• M (/2).
If this input satisfies P then by the first item of Definition 2.2 it also satisfies H, and as in this case
we accept if and only if G0 satisfies H this means that T accepts the input. Hence, T has one-sided
error. Suppose now that the input is -far from satisfying P. This means that after adding/deleting
1

2
2 n edges, the input is still 2 -far from satisfying P. By item 2 of Definition 2.2 and as in this case
the input must be of size of size at least M (/2), this means that after adding/deleting 12 n2 edges,
the input still contains an induced subgraph not satisfying H. In other words, this means that the
input is at least 2 -far from satisfying H. As Q() ‚â• QH (/2) we infer that with probability at least
2/3 the graph G0 spans an induced subgraph not satisfying H and therefore G0 does not satisfy H
(as it is hereditary). As in this case T accepts if and only if G0 satisfies H, this means that T will
reject an input that is -far from satisfying P with probability at least 2/3.
Assume now that property P has a one-sided error oblivious tester T . Our goal is to show the
existence of a hereditary property H as in Definition 2.2. Let F be the following family of graphs:
a graph F on |V (F )| vertices belongs to F if (i) For some  > 0 the query complexity of T satisfies
Q() = |V (F )| (recall that the query complexity of T is a function of  only). (ii) If for this  the
sample of vertices spans a graph isomorphic to F , then T rejects the input with positive probability.
We claim that we can take H in Definition 2.2 to be the property of being induced F-free.
To establish the first item of Definition 2.2 it is enough to show that there is no graph G satisfying
P, which spans an induced subgraph isomorphic to a graph F ‚àà F. Suppose such a G exists, and
consider the execution of T on G with an  for which Q() = |V (F )|. By definition of F we get that T
asks for a random subgraph of G of size |V (F )|, and that if T gets a graph isomorphic to F it rejects
G with positive probability. As we assume that G spans an induced copy of a graph isomorphic to
F , this means that T has a non-zero probability of rejecting G, contradicting our assumption that
T is one-sided.
To establish the second item of Definition 2.2, we claim that we can take M () = Q(). Indeed,
consider a graph G on at least Q() vertices that is -far from satisfying P. As T is a tester for P it
should reject G with non-zero probability. By definition of an oblivious tester and as G has at least
Q() vertices, this means that G must contain an induced subgraph F , of size precisely Q(), with
the property that if T gets F from the oracle then it rejects G. By definition of F this means that
F ‚àà F. Hence, we can take F itself to be the graph not satisfying H.
20

6

Proofs of Additional Results

In this Section we give the proofs of Theorems 3, 4 and 5. We start with the proof of Theorem
3. Before getting to the details we first make some simple observations. Note, that if the property
P is satisfied by all graphs then it is clearly testable. This means that if P is not satisfied by all
graphs and is satisfied by all the cliques then it cannot be closed under removal of edges. Thus, this
condition in the statement can actually be removed. Also, note that when considering the notion
of -fardel there is no sense in considering hereditary properties, which are not satisfied by some
independent set as in this case any graph with even a single independent set is arbitrarily far from
satisfying the property and therefore it requires ‚Ñ¶(n2 ) queries.
Our main tool for the proof of Theorem 3 is the following result, which is essentially proved by
Frankl and FuÃàredi in [18].
Theorem 7 ([18]) For any graph F = (R, T ), with |T | = t > 0 edges there is a constant Œ¥ = Œ¥(F )
with the following property:
For any integer n there is a graph Gn = (V, E) on n vertices, which

consists of (1 ‚àí n‚àíŒ¥ ) n2 /t induced copies of of F , such that no two copies of F share an edge.
Proof of Theorem 3: By the discussion above we may assume that P has at least one forbidden
induced subgraph F = (R, T ) and that F is not an independent set. Put t = |T | and for any n
let Gn be the
 graph, whose existence is guaranteed by Theorem 7. As all these graphs consist of
(1 ‚àí n‚àíŒ¥ ) n2 /t > n2 /4t induced copies of F , where non of the copies share an edge, these graphs are
1
1
all at least 4t
-fardel from being induced F free. Hence, they are also at least 4t
-fardel from
 satisfying
n
‚àíŒ¥
P. On the other, as we assume that any clique satisfies P, and G contains (1 ‚àí n ) 2 edges, any
randomized algorithm with query-complexity much smaller than nŒ¥ cannot testdel property P as it
1
has a negligible probability of distinguishing between Gn , which are 4t
-fardel from satisfying P, and
a clique of size n, which by assumption satisfies P.
Suppose we define -faradd and testableadd but now allowing only edge additions. One can easily
see that simple modifications of the proof of Theorem 3 imply that the same lower bound can be
proved for testingadd any hereditary property, which is not closed under edge additions and which is
satisfied by any edgeless graph.
We continue with the proof of Theorem 4. As most of the technical details are very similar to
those appearing in [3] we only discuss the main idea needed to obtain the extension of the result of
[3]. We start with a useful result of [3].
Definition 6.1 (Indistinguishability) Two graph properties P and Q are called indistinguishable
if for every  > 0 there exists N = N () satisfying the following; A graph on n ‚â• N vertices satisfying
one of the properties is never -far from satisfying the other.
Lemma 6.2 ([3]) If P and Q are indistinguishable graph properties, then P is testable if and only
if Q is testable.
We next define an extension of the notion of colorability. A similar notion was used in [3], where
F was restricted to be finite.

21

Definition 6.3 (F-colorability) Suppose we are given c, and a (possibly infinite) family (with
repetitions) F of graphs, each of which is provided with a c-coloring (i.e. a function from its vertex
set to {1, . . . , c} which is not necessarily a proper c-coloring in the usual sense). A c-coloring of a
graph G is called an F-coloring if no member of F appears as an induced subgraph of G with an
identical coloring. A graph G is called F-colorable if there exists an F-coloring of it.
Note, that for any family of colored graphs F (finite or infinite), being F-colorable is a hereditary
graph property. We thus get from Theorem 1 that
Lemma 6.4 For any family of colored graphs F, being F-colorable is testable.
Note, that by Theorem 1 being F-colorable is in fact testable with one-sided error, but we do
not need this stronger assertion here. The following lemma shows the relevance of the notion of
F-colorability for the proof of Theorem 4.
Lemma 6.5 For every first order property P of the form
‚àÉx1 , . . . , xt

‚àû
^

‚àÄy1 , . . . , yi Ai (x1 , . . . , xt , y1 , . . . , ys )

i=1
t
there exists a (possibly infinite) family F, of (2t+(2) + 1)-colored graphs such that the property P is
indistinguishable from the property of being F-colorable.

Proof: (sketch) The proof uses ideas very similar to those used to prove Lemma 2.2 in [3] and is
thus omitted. We briefly mention that one can use the same technique of [3] along with the fact that
one is allowed to put in F infinitely many forbidden colored subgraphs.
Proof of Theorem 4: Immediate from Lemmas 6.2, 6.4 and 6.5.
We conclude this section with the proof of Theorem 5.
Proof of Theorem 5: For each of the hereditary properties P
Si , letSFi be
S the family of forbidden
induced subgraphs of Pi as in Definition 4.1, and let F = F1 F2 F3 . . .. Clearly, a graph G
satisfies all the properties of P if and only if it is induced F-free. Consider a graph G, which is -far
from satisfying all the properties of P. In this case G is also -far from being induced F-free, hence,
by Lemma 4.2, there is a graph F ‚àà F of size f = fF () such that G contains Œ¥F ()nf induced copies
n
of F . Note, that adding or removing an edge from G destroys at most f ‚àí2
‚â§ nf ‚àí2 induced copies
of F . Thus, one must add or delete at least at least Œ¥F ()n2 edges to G in order to turn it into a
graph containing to induced copy of F . Let i be such that F ‚àà Fi . We may now infer that G is
Œ¥F ()-far from satisfying Pi . Finally, note that as F is determined by P, we can also say that G is
Œ¥P ()-far from satisfying Pi .

22

7

Concluding Remarks and Open Problems
‚Ä¢ Our main result in this paper can be considered a characterization of the natural graph properties that are testable with one-sided error. Thus, a natural and interesting open problem related
to this paper is to complete the characterization of the graph properties that are testable with
one-sided error by arbitrary testers, and not just oblivious ones.
‚Ä¢ Theorem 1 asserts that any hereditary property is testable with one-sided error. However,
the upper bounds on the query complexity, which this theorem guarantees are huge. Even for
rather simple properties, these bounds are towers of towers of exponents of height polynomial
in 1/. For specific properties, such as k-colorability, it is known that far more efficient testers
exist (see [5]). For others, such as having no copy of a graph H, it is known that whenever H is
not bipartite, there is no tester (one-sided or two-sided) whose query complexity is polynomial
in 1/ (see [1], [8]). It thus seems that the fact that a hereditary graph property is testable with
poly(1/) queries does not solely rely on the number of forbidden induced subgraphs (see also
[6] and Theorem 4 in [10]). Therefore, a natural intriguing and probably challenging problem
is the following:
Which hereditary graph properties can be tested with poly(1/) queries?
As a special case of this problem, it seems interesting to study the query complexity needed to
test the graph properties that were discussed in Subsection 2.1.
‚Ä¢ Theorem 2 gives a precise characterization of the graph properties that have oblivious one-sided
testers. As we have explained in Section 1, any natural property that can be tested, can be
tested by an oblivious tester. It may thus be simpler, but still very interesting, to resolve the
following problem:
Which graph properties have (possibly two-sided) oblivious testers?
Note, that the definition of an oblivious tester implicitly assumes that the query complexity of
such a tester is a function of  only.
‚Ä¢ Fischer and Newman [16] have recently shown that every testable graph property is also estimable, namely, for any such property one can estimate how far is a given graph from satisfying
the property (in this paper this quantity is denoted by ) while making a constant number of
queries. Combining Theorem 1 and the result of [16] we get that any hereditary property is
estimable.

References
[1] N. Alon, Testing subgraphs in large graphs, Random Structures and Algorithms 21 (2002),
359-370. Also, Proc. 42nd IEEE FOCS, IEEE (2001), 434-441.
[2] N. Alon, R. A. Duke, H. Lefmann, V. RoÃàdl and R. Yuster, The algorithmic aspects of the
Regularity Lemma, Proc. 33rd IEEE FOCS, Pittsburgh, IEEE (1992), 473-481. Also: J. of
Algorithms 16 (1994), 80-109.

23

[3] N. Alon, E. Fischer, M. Krivelevich and M. Szegedy, Efficient testing of large graphs, Proc. of
40th FOCS, New York, NY, IEEE (1999), 656‚Äì666. Also: Combinatorica 20 (2000), 451-476.
[4] N. Alon, M. Krivelevich, I. Newman and M. Szegedy, Regular languages are testable with a
constant number of queries, Proc. 40th FOCS, New York, NY, IEEE (1999), 645‚Äì655. Also:
SIAM J. on Computing 30 (2001), 1842-1862.
[5] N. Alon and M. Krivelevich, Testing k-colorability, SIAM J. Discrete Math., 15 (2002), 211-227.
[6] N. Alon and A. Shapira, A characterization of easily testable induced subgraphs, Proc. of the 15th
Annual ACM-SIAM SODA, ACM Press (2004), 935-944. Also, Combinatorics, Probabability
and Computing, to appear.
[7] N. Alon and A. Shapira, Testing satisfiability, Proc. 13th Annual ACM-SIAM SODA, ACM
Press (2002), 645-654. Also: Journal of Algorithms, 47 (2003), 87-103.
[8] N. Alon and A. Shapira, Testing subgraphs in directed graphs, JCSS 69/3 (2004), 354-382. Also,
Proc. of the 35th STOC, 2003, 700‚Äì709.
[9] N. Alon and A. Shapira, A separation theorem in property-testing, manuscript.
[10] N. Alon and A. Shapira, Every monotone graph-property is testable, Proc. of STOC 2005,
128-137.
[11] M. Blum, M. Luby and R. Rubinfeld, Self-testing/correcting with applications to numerical
problems, JCSS 47 (1993), 549-595.
[12] B. BollobaÃÅs, Extremal Graph Theory, Academic Press, New York (1978).
[13] T. M. Chan, Polynomial-time approximation schemes for packing and piercing fat objects, Journal of Algorithms 46 (2003), 178-189.
[14] E. Fischer, Testing graphs for colorability properties, Proc. of the 12th SODA (2001), 873-882.
[15] E. Fischer, The art of uninformed decisions: A primer to property testing, The Computational
Complexity Column of The Bulletin of the European Association for Theoretical Computer
Science 75 (2001), 97-126.
[16] E. Fischer and I. Newman, Testing versus estimation of graph properties, Proc. of STOC 2005,
138-146.
[17] E. Fischer, I. Newman and J. Sgall, Functions that have read-twice constant width branching
programs are not necessarily testable, Random Structures and Algorithms, in press.
[18] P. Frankl and Z. FuÃàredi, Colored packings of sets in combinatorial design theory, Annals of
Discrete Math. 34 (1987), 165-178.
[19] O. Goldreich, Combinatorial property testing - a survey, In: Randomization Methods in Algorithm Design (P. Pardalos, S. Rajasekaran and J. Rolim eds.), AMS-DIMACS (1998), 45-60.

24

[20] O. Goldreich, S. Goldwasser and D. Ron, Property testing and its connection to learning and
approximation, Proc. of 37th Annual IEEE FOCS, (1996), 339‚Äì348. Also, JACM 45(4): 653-750
(1998).
[21] O. Goldreich and L. Trevisan, Three theorems regarding testing graph properties, Proc. 42nd
IEEE FOCS, IEEE (2001), 460-469. Also, Random Structures and Algorithms, 23(1):23-57,
2003.
[22] M.C. Golumbic, Algorithmic Graph Theory and Perfect Graphs, Academic Press, 1980.
[23] J. KomloÃÅs and M. Simonovits, SzemereÃÅdi‚Äôs Regularity Lemma and its applications in graph
theory. In: Combinatorics, Paul ErdoÃàs is Eighty, Vol II (D. MikloÃÅs, V. T. SoÃÅs, T. SzoÃànyi eds.),
JaÃÅnos Bolyai Math. Soc., Budapest (1996), 295‚Äì352.
[24] T. A. McKee and F.R. McMorris, Topics in Intersection Graph Theory, SIAM, Philadelphia, PA, 1999.
[25] I. Newman, Testing of functions that have small width branching programs, Proc. of 41th FOCS
(2000), 251-258.
[26] J. L. Ramƒ±ÃÅrez-Alfonsƒ±ÃÅn (Editor), B. A. Reed (Editor), Perfect Graphs, Wiley, 2001.
[27] V. RoÃàdl and R. Duke, On graphs with small subgraphs of large chromatic number, Graphs and
Combinatorics 1 (1985), 91‚Äì96.
[28] D. Ron, Property testing, in: P. M. Pardalos, S. Rajasekaran, J. Reif and J. D. P. Rolim, editors,
Handbook of Randomized Computing, Vol. II, Kluwer Academic Publishers, 2001, 597‚Äì649.
[29] R. Rubinfeld and M. Sudan, Robust characterization of polynomials with applications to program testing, SIAM J. on Computing 25 (1996), 252‚Äì271.
[30] E. SzemereÃÅdi, Regular partitions of graphs, In: Proc. Colloque Inter. CNRS (J. C. Bermond,
J. C. Fournier, M. Las Vergnas and D. Sotteau, eds.), 1978, 399‚Äì401.

8

Appendix: Proofs of Lemmas 3.2 and 3.5

For the proof of Lemma 3.2 we need the following simple fact about regular pairs, which follows from
Definition 3.1.
Claim 8.1 Let (A, B) be an Œ≥-regular pair with density Œ∑, and let Y ‚äÜ B be of size at least Œ≥|B|.
Then all but at most Œ≥|A| of the vertices of A have at least (Œ∑ ‚àí Œ≥)|Y | neighbors in B.
Proof: Assume that for some X, such that |X| ‚â• Œ≥|A|, for all v ‚àà X the inequality does not hold.
This means that there are less than (Œ∑ ‚àí Œ≥)|X||Y | edges connecting vertices of X and Y . Hence, the
pair (X, Y ) contradicts the Œ≥-regularity of the pair (A, B).
Proof of Lemma 3.2: Without loss of generality assume that F is the complete graph; otherwise,
for each i < j such that (vi , vj ) 6‚àà E(F ) exchange all edges and non-edges of G between Ui and Uj
25

and regard (vi , vj ) as an edge of F . Assume also Œ∑ < 1. The proof is by induction on f . The case
f = 1 is trivial. Supposing that we know that Œ≥3.2 (Œ∑, f ‚àí 1) and Œ¥3.2 (Œ∑, f ‚àí 1) exist for all Œ∑, we show
that we can choose
1 1
1
Œ≥ = Œ≥3.2 (Œ∑, f ) = min{ , Œ∑Œ≥3.2 ( Œ∑, f ‚àí 1)},
(14)
2f 2
2
and

1
1
Œ¥ = Œ¥3.2 (Œ∑, f ) = (Œ∑ ‚àí Œ≥)f ‚àí1 Œ¥3.2 ( Œ∑, f ‚àí 1).
(15)
2
2
By Claim 8.1, for each 1 < i ‚â§ f , the number of vertices of U1 which have less than (Œ∑ ‚àí Œ≥)|Ui |
neighbors in Ui is at most Œ≥|U1 |. Therefore, at least (1 ‚àí (f ‚àí 1)Œ≥)|U1 | ‚â• 12 |U1 | of the vertices of
U1 have at least (Œ∑ ‚àí Œ≥)|Ui | neighbors in Ui for all i > 1 (we use here the fact that by our choice
Œ≥ ‚â§ 1/2f ). For each such vertex u1 of U1 , let Ui0 denote the set of its neighbors in Ui . Since by
Œ≥
(14) we have Œ≥ ‚â§ 12 Œ∑, it follows that Œ∑‚àíŒ≥
‚â§ 2Œ∑ ‚àí1 Œ≥. Therefore, Claim 5.1 ensures that for each
1 < i < j ‚â§ k, the pair (Ui0 , Uj0 ) is 2Œ∑ ‚àí1 Œ≥-regular and with density at least Œ∑ ‚àí Œ≥ ‚â• 21 Œ∑ (we may apply
Claim 5.1 because Œ∑ ‚àí Œ≥ ‚â• Œ≥). As by (14) we have 2Œ∑ ‚àí1 Œ≥ ‚â• Œ≥3.2 ( 21 Œ∑, f ‚àí 1), the induction hypothesis
implies that there are at least
f

f

i=2

i=2

Y
Y
1
1
Œ¥3.2 ( Œ∑, f ‚àí 1)
|Ui0 | ‚â• (Œ∑ ‚àí Œ≥)f ‚àí1 Œ¥3.2 ( Œ∑, f ‚àí 1)
|Ui |
2
2
possible choices of u2 ‚àà U2 , . . . , uf ‚àà Vf such that the induced subgraph spanned by u1 , . . . , uf is
complete. The lemma now follows from the existence of at least 12 |U1 | choices of the vertex u1 ‚àà U1 .
Proof of Lemma 3.5: We claim that we can set Œ¥ = 1/T3.4 (4` , min{4‚àí` , Œ≥}). We first apply Lemma
3.4 with m = 4` and  = min{4‚àí` , Œ≥} in order to get an equipartition A = {Vi | 1 ‚â§ i ‚â§ k} of the
vertices of G with k ‚â• 4` and |Vi | ‚â• Œ¥n for 1 ‚â§ i ‚â§ k (the assumption on n guarantees that this

holds for the sets with the smaller size as well), with all pairs of sets but at most min{4‚àí` , Œ≥} k2 <

(4` ‚àí 1)‚àí1 k2 of them being min{4‚àí` , Œ≥} ‚â§ Œ≥-regular. In particular, by TuraÃÅn‚Äôs Theorem (see [12])
there exist i1 , . . . , i4` such that all pairs taken from Vi1 , . . . , Vi4` are regular. Ramsey‚Äôs Theorem (see,
e.g., [12]) now ensures the existence of j1 , . . . , jl such that either all pairs taken from Vij1 , . . . , Vijl
are with densities at least 21 , or all these pairs are with densities less than 12 . Setting Wt = Vijt for
1 ‚â§ t ‚â§ l we arrive at the required result.

26

