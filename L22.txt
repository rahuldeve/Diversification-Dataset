Classifying Information
Stored in Memory
n

Program instructions

(unchangeable)

●

Constants:

(unchangeable)

n

A

Locals, globals, function parameters,
dynamic storage (from malloc or new)
Initialized or uninitialized

Readable and writable: variables

●

Read-only: code, constants

●

Important for sharing data and/or code

0

●

One process executes at a time in a
single memory segment
●

Process is always loaded at address 0

●

Compiler and linker generate physical
addresses

●

Maximum address = memory size – OS
size
Fall 1998, Lecture 22

n

Segments of a Process
n

Program code, static global variables
(initialized and uninitialized)

Procedure stack, dynamic storage (space
allocated by malloc or new)

n

UNIX view of a process’s memory
(uniprogramming only for now):
max
address
stack

dynamic storage
(from new, malloc)

stack segment

heap

static variables
(uninitialized,
initialized)

bss segment
data segment

code

text segment

address
0
3

Process’ memory is divided into logical
segments (text, data, bss, heap, stack)
●

Some are read-only, others read-write

●

Some are known at compile time, others
grow dynamically as program runs

Dynamic: as program runs
n

0

n

Static: before program starts running
n

0

2

Binding time (when is space allocated?):
●

C

700

OS gets a fixed segment of memory
(usually highest memory)

Classifying Information
Stored in Memory (cont.)
n

OS

2200

n

Must modify addresses if program is
moved (relocation, garbage collection)
Fall 1998, Lecture 22

2400

main
memory

B

Addresses vs. data:

1

OS

2200

address

1200

By protection status:

●

2400

main
memory

1700

(changeable)

●

address

OS
2200

pi, maxnum, strings used by printf/scanf

Variables:
n

main
memory

2400

●

●

n

address

By role in program:

n

n

Memory Management in a
Uniprogrammed System

Fall 1998, Lecture 22

4

Who assigns memory to segments?
●

Compiler and assembler generate an
object file (containing code and data
segments) from each source file

●

Linker combines all the object files for a
program into a single executable object
file, which is complete and self-sufficient

●

Loader (part of OS) loads an executable
object file into memory at location(s)
determined by the operating system

●

Program (as it runs) uses new and malloc
to dynamically allocate memory, gets
space on stack during function calls
Fall 1998, Lecture 22

Linking
n

n

Why is Linking Difficult?

Functions of a linker:

n

●

Combine all files and libraries of a program

●

Regroup all the segments from each file
together (one big data segment, etc.)

●

Adjust addresses to match regrouping

●

Result is an executable program

When assembler assembles a file, it may
find external references — symbols it
doesn’t know about (e.g., printf, scanf)
●

Compiler just puts in an address of 0 when
producing the object code

●

Compiler records external symbols and
their location (in object file) in a crossreference list, and stores that list in the
object file

●

Linker must resolve those external
references as it links the files together

Contents of object files:
●

File header — size and starting address
(in memory) of each segment

●

Segments for code and initialized data

●

Symbol table (symbols, addresses)

●

External symbols (symbols, location)

●

Relocation information (symbols, location)

●

Compiler just assumes program starts at 0

●

Debugging information

●

●

For UNIX details, type “man a.out”

Compiler records relocation information
(location of addresses to be adjusted
later), and stores it in the object file

5

Fall 1998, Lecture 22

n

Compiler doesn’t know where program will
go in memory (if multiprogramming,
always 0 for uniprogramming)

6

Fall 1998, Lecture 22

Running the Program —
Static Memory Allocation

Loading
n

n

The loader loads the completed program
into memory where it can be executed
●

Loads code and initialized data segments
into memory at specified location

●

Leaves space for uninitialized data (bss)

●

Returns value of start address to
operating system

n

Compiling, linking, and loading is
sufficient for static memory
●

n

Code, constants, static variables

In other cases, static allocation is not
sufficient:
●

Alternatives in loading (next 2 lectures…)

Need dynamic storage — programmer
may not know how much memory will be
needed when program runs
n

●

●

Absolute loader — loads executable file at
fixed location
Relocatable loader — loads the program
at an arbitrary memory location specified
by OS (needed for multiprogramming, not
for uniprogramming)
n

n

7

n

Assembler and linker assume program will
start at location 0
When program is loaded, loader modifies
all addresses by adding the real start
location to those addresses
Fall 1998, Lecture 22

8

Use malloc or new to get what’s
necessary when it’s necessary
For complex data structures (e.g., trees),
allocate space for nodes on demand

●

OS doesn’t know in advance which
procedures will be called (would be
wasteful to allocate space for every
variable in every procedure in advance)

●

OS must be able to handle recursive
procedures
Fall 1998, Lecture 22

Running the Program —
Dynamic Memory Allocation
n

n

Dynamic memory requires two
fundamental operations:

Running the Program —
Dynamic Memory Allocation (cont.)
n

●

●

Allocate dynamic storage

●

Free memory when it’s no longer needed

●

Methods vary for stack and heap

n

n

n

n

Good when allocation and freeing are
somewhat predictable
Typically used:

n

– to pass parameters to procedures
– for allocating space for local variables
inside a procedure
– for tree traversal, expression evaluation,
parsing, etc.
n
n

n
9

Used when allocation and freeing are not
predictable
Typically used:
– for arbitrary list structures, complex data
organizations, etc.

Stack (hierarchical)
n

Heap
n

Two basic methods of allocation:
●

Two basic methods of allocation:

– This is called fragmentation, and it leads to
wasted memory
– Fragmentation wasn’t a problem with stack
allocation, since we always add/delete
from top of stack
– Solution goal: reuse the space in the
holes in such a way as to keep the number
of holes small, and their size large

Use stack operations: push and pop
Keeps all free space together in a
structured organization
Simple and efficient, but restricted
Fall 1998, Lecture 22

Use new or malloc to allocate space, use
delete or free to release space
System memory consists of allocated
areas and free areas (holes)
Problem: eventually end up with many
small holes, each too small to be useful

n

10

Compared to stack: more general, less
efficient, more difficult to implement
Fall 1998, Lecture 22

