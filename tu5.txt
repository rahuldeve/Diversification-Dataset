Binary Search Trees 
Implementation

Tom Chao Zhou
CSC2100B Data Structures Tutorial 5

Outline

(cid:132) Binary Search Trees Properties
(cid:132) Implementation
(cid:133) Declaration
(cid:133) MakeEmpty
(cid:133) Find
(cid:133) FindMin
(cid:133) FindMax
(cid:133) Insert
(cid:133) Delete
(cid:133) Retrieve

(cid:132) Test Example
(cid:132) Appendix

(cid:133) BinarySearchTree.h
(cid:133) BinarySearchTree.c
(cid:133) TestBinarySearchTree.c

Binary Search Tree Properties

(cid:132) Binary Tree -> Binary Search Tree

(cid:133) For every node T in the tree, the values of all the items in its left subtree

are smaller than the item in T

(cid:133) The values of all the items in its right subtree are larger than the item in 

T.

(cid:133) Average depth of a binary search tree is O(logN).

Binary Search Tree Properties

8

6

4

2

3

1

6

4

2

1

8

3

7

Binary Search Tree Properties

8

6

4

2

3

1

6

4

2

1

8

3

7

Two binary trees (only the left tree is a search tree)

Implementation: Declaration (.h header file)

BinarySearchTree.h

typedef int ElementType;

#ifndef _BINARY_SEARCH_TREE_H
#define _BINARY_SEARCH_TREE_H
struct TreeNode;
typedef struct TreeNode* Position;
typedef struct TreeNode* SearchTree;

SearchTree MakeEmpty(SearchTree T);
Position Find(ElementType X,SearchTree T);
Position FindMin(SearchTree T);
Position FindMax(SearchTree T);
SearchTree Insert(ElementType X,SearchTree T);
SearchTree Delete(ElementType X,SearchTree T);
ElementType Retrieve(Position P);
#endif

Implementation:  .c file

BinarySearchTree.c

#include<stdio.h>
#include "BinarySearchTree.h
struct TreeNode
{

ElementType data;
SearchTree Left;
SearchTree Right;

};
...//implementation of all the functions

Implementation: MakeEmpty

(cid:132) Function:

(cid:133) Make a tree become empty.

//use the idea of recursion
SearchTree MakeEmpty(SearchTree T)
{

if(T!=NULL)
{

MakeEmpty(T->Left);
MakeEmpty(T->Right);
free(T);

}
return NULL;

}

Implementation: Find

(cid:132) Function: 

(cid:133) find the tree node which equals to certain value

Position Find(ElementType X,SearchTree T)
{

else

}

return T;

if(T==NULL)

return NULL;
else if(X<T->data)

return Find(X,T->Left);

else if(X>T->data)

return Find(X,T->Right);

8

6

4

2

3

1

Implementation: FindMin

(cid:132) Function:

(cid:133) find the minimum tree node if available.

//use while loop
Position FindMin(SearchTree T)
{

if(T!=NULL)
{

while(T->Left!=NULL)
T=T->Left;

}
return T;

}

8

6

4

2

3

1

Implementation: FindMax

(cid:132) Function:

(cid:133) find the maximum tree node if available.

//use recursion
Position FindMax(SearchTree T)
{

if(T==NULL)

return NULL;

else if(T->Right==NULL)

return T;

else

}

return FindMax(T->Right);

8

6

4

2

3

1

Implementation: Insert

(cid:132) Function:

(cid:133) Insert a data into the tree and return the new tree.

SearchTree Insert(ElementType X,SearchTree T)
{

if(T==NULL)
{

else

;

return T;

}

T = (SearchTree)malloc(sizeof(struct TreeNode));

T->data = X;
T->Left = NULL;
T->Right = NULL;

}
else if(X<T->data)

else if(X>T->data)

T->Left = Insert(X,T->Left);

T->Right = Insert(X,T->Right);

6

4

2

1

8

3

5

Implementation: Delete

(cid:132) Function:

(cid:133) Delete a tree node with certain value.

8

1

6

4

2

3

delete 
node 4

8

6

4

2

3

1

If the node is a leaf, it 
can be deleted directly.
If the node has one 
child, the node can be 
deleted after its parent 
adjusts a link to 
bypass the node.

Implementation: Delete

(cid:132) Function:

(cid:133) Delete a tree node with certain value.

8

1

6

5

2

3

4
delete 
node 2

8

6

5

3

4

1

If the node has two 
children, replace the 
data of this node with 
the smallest data of 
the right subtree and 
recursively delete that 
node.

Implementation: Delete

SearchTree Delete(ElementType X,SearchTree T)
{

Position Tmp;
if(T==NULL)

;

else if(X<T->data)

else if(X>T->data)

T->Left = Delete(X,T->Left);

T->Right = Delete(X,T->Right);

else if(T->Left!=NULL && T->Right!=NULL)
{

Tmp = FindMin(T->Right);
T->data = Tmp->data;
T->Right = Delete(T->data,T->Right);

}
else
{

Tmp = T;

}
return T;

}

if(T->Left==NULL)

T = T->Right;
else if(T->Right==NULL)
T = T->Left;

free(Tmp);

Implementation: Retrieve

(cid:132) Function:

(cid:133) Get the data of a tree node.

ElementType Retrieve(Position P)
{

return P->data;

}

Test Example

(cid:132) TestBinarySearchTree.c

Appendix

(cid:132) BinarySearchTree.h

BinarySearchTree.c

TestBinarySearchTree.c

