Stacks and Queues. 

Dynamic Memory Allocation.

Lecture 5

2013

Stacks, queues and dequeues

 Stacks and queues are dynamic sets such that the element removed is pre-specified. 


In a stack, the element removed is the last element inserted. So a stack implements the 
principle Last In First Out  LIFO.
In a queue, the element removed is the first element inserted. So a queue implements the 
principle First In First Out  FIFO.



 A double ended queue  dequeue is a list such that insertions and removals can be 

explicitly made to either ends of the list.

 Stacks and queues have a lot of applications in computer science:

 Stacks are used in: 

 Compilers, for language parsing, for code generation
 Language implementation, to implement procedure calls
 Algorithms, to implement recursive algorithms

 Queues are used in:

 Operating systems, to store messages passed between processes or input/output 

events

 Simulation, to manage the simulation events
 Data communication, for buffering

 Stacks and queues can be implemented using arrays or linked lists.

2013

Stacks

 The main operations with stacks are:

 STACK-PUSH(S,x) is the insertion operation for stacks.
 STACK-POP(S) is the removal operation for stacks.
 STACK-EMPTY(S) is an operation that checks if a stack is empty or not.

 A stack can be implemented using an array S[1..n]. In the implementation there is a 

special field top[S] that is called the top of the stack. It represents the index of the 
element that has been inserted the most recently into the stack. Thus, at a certain 
moment in time the stack S contains the following elements S[1], S[2], ..., S[top[S]].
If top[S] = 0 then the stack is empty. Of course, initially we have to assure that top[S] 
is set to 0.



 Whenever we are trying to pop an element from an empty stack we have a stack 

underflow.

 Whenever we are trying to push an element onto a stack and top[S] = n we have a 

stack overflow.

 Clearly, an underflow has to be always reported as an error. For an overflow we have 

two choices: either to report it as an error or to try to work out the situation by 
increasing dynamically the size of the array S. In what follows we ignore potential 
stack overflows.

2013

Algorithms for stacks

Note that all the stack operations take a constant time.

2013

Queues

 The main operations with queues are:

 QUEUE-PUSH(Q,x) is the insertion operation for queues.
 QUEUE-POP(Q) is the removal operation for queues.
 QUEUE-EMPTY(Q) is an operation that checks if a queue is empty or not.

 A queue of maximum n1 elements can be implemented using a circular array 
Q[1..n] (i.e. the successor of index n is 1). In the implementation there are two 
special fields:
 front[Q], the index of the element in front of the queue (the oldest element in the queue)
 rear[Q], the index of the element at the rear of the queue where a new element will be 

inserted.

 The elements of the queue are (starting with the oldest one and ending with the most 

recently inserted one): Q[front[Q]], Q[front[Q]+1], ..., Q[rear[Q]-1].

 The condition front[Q] = rear[Q] is used to signal that the queue is empty. Initially 

we have to set front[Q] and rear[Q] such that this condition holds.

 Whenever we are trying to pop an element from an empty queue we have a queue 

underflow.

 Whenever we are trying to push an element onto a queue and front[Q] = rear[Q]+1 

we have a queue overflow.

Algorithms for queues

Note that length[Q] is n. The 
comparisons with n are needed 
to implement the circular 
behavior of Q.

Note that all the queue 
operations take constant 
time.

2013

2013

Implementation of  stacks (I)

The implementation contains 2 modules:

#ifndef STACK_H

1. The stack module (files stack.h and stack.c).
2. The main module (file main.c).

We have added two more operations:

#define STACK_H
#define STACK_SIZE 100

1.

2.

stackInit() to initialize the top of the 
stack.
stackTop() to return the value on top of 
the stack.

typedef struct stack {

int top;
int elements[STACK_SIZE];

} Stack;

The program takes command lines from the
standard input:

- u number to push the number onto
the stack
- o to pop a number from the stack
- p to print the contents of the stack
with the top shown to the left
- x to exit the program

Additionally, the program prints each
command before executing it.

void stackInit(Stack *s);
int stackEmpty(Stack *s);
void stackPush(Stack *s,

int x);

int stackPop(Stack *s);
int stackTop(Stack *s);

#endif

2013

Implementation of  stacks (II)

#include <stdio.h>
#include <stdlib.h>
#include "stack.h"
#define error(x)

fprintf(stderr,x);exit(1);

void stackInit(Stack *s) {

s -> top = -1;

}

int stackEmpty(Stack *s) {

return s->top == -1;

}

void stackPush(Stack *s,int x) {

if (s->top<STACK_SIZE-1) {

s->elements[++s->top] = x;

}
else {

error("Stack overflow\n");

}

}

int stackPop(Stack *s) {

if (s->top>=0) {

return s->elements[s->top--];

}
else {

error("Stack underflow\n")

}

}

int stackTop(Stack *s) {

if (s->top>=0) {

return s->elements[s->top];

}
else {

error("Stack is empty\n")

}

}

2013

Implementation of  stacks (III)

#include <stdio.h>
#include <stdlib.h>
#include "stack.h"

void stackPrint(Stack *s) {

int i;

i = s->top;
while (i>=0) {

printf("%3d",

s->elements[i--]);

}
printf("\n");

}

main() {

Stack s;
int k;
char cmdLine[80];

}

}

stackInit(&s);
gets(cmdLine);
while (tolower(cmdLine[0])!='x') {

puts(cmdLine);
switch(tolower(cmdLine[0])) {
case 'u':

sscanf(cmdLine+1,"%d",&k);
stackPush(&s,k);
break;

case 'o':

k = stackPop(&s);
break;

case 'p':

stackPrint(&s);
break;

}
gets(cmdLine);

A trace of the stack program

Input file:
u 12
u 45
p
o
u 14
p
u 7
p
o
o 
p
u 9
p
u 5
u 10
p
o
o
o
o
p

10  5  9 12

p

o
o
o
o
p

o
Stack underflow

Output file:
u 12
u 45
p

45 12

o
u 14
p

14 12

u 7
p

7 14 12

o
o 
p

12
u 9
p

9 12

u 5
u 10

2013

2013

Dynamic memory allocation (I)

 Dynamic memory = memory allocated at run-time.
 Static memory = memory allocated at compile-time.
 Programming languages like C and Pascal provide libraries for managing 

dynamic memory. This memory is allocated from a special area called 
heap. The heap is managed by a special language component that 
implements functions like new and dispose in Pascal or malloc(), 
calloc() and free() in C.
In languages that do not provide facilities for dynamic memory allocation 
it is possible to simulate it using static memory. Also, even if the pointer 
data type is not supported , it is possible to simulate it using integer 
indices.



 The idea is to define the heap as a static block of memory and define a set 

of operations for managing objects allocated in this block. To simplify 
things, we shall assume that all the objects have the same size (i.e. they are 
homogenous).

2013

Dynamic memory allocation (II)

 We propose an implementation of dynamic memory allocation for fixed-

size objects that uses the following variables:
 The array storage for storing the objects;
 The array succ for storing links of the available objects;
 An integer available that stores the index of the first available object. The available 

objects are linked together using the links stored in the array succ.



Initially all the objects in array storage are available. Whenever a request 
for allocating a new object is made, the object is taken from the available
list. Whenever an object is released, it is pushed onto the available list. 
Thus, the available list behaves like a stack and object creation/deletion 
takes constant time.

 For representing NIL we are using a value that is not a valid index in 



storage (i.e. if storage has indices starting with 0 we can take NIL = -1, or 
if it has indices starting with with 1 we cam take NIL = 0).
If available = NIL then the allocation of a new object fails. This means 
that all the objects from the storage array have already been allocated 
before.

2013

Algorithms for dynamic memory allocation

1. We assume that the arrays 

succ and storage have indices 
from 1 to n and that n = 
size[storage]. NIL = -1

2. OBJECT-NEW and OBJECT-
DELETE can be implemented 
such that they use pointers to 
objects instead of integer 
indices.

2013

storage

head

Example

-

-

-

-1

9

-

-

-

9

8

9

1

6

-

7

15

17

7

-1

-

6

0

5

-

5

8

5

4

-

4

3

4

3

-

3

4

3

2

-

2

7

2

7

-

1

1

-1

5

-

0

key

next

pred

succ

available

In this example the objects are nodes of a doubly-linked list. 
The links shown in the array storage follow the next field of a 
node of this list.
In this example array subscripts start with 0 !

2013

Implementation of  dynamic memory allocation (I)
 We consider the implementation of dynamic memory allocation for the 

nodes of a doubly-linked list. 

 Requirement: the implementation must be done such that the 

implementation of doubly-linked lists shown in the previous lecture will 
need only minimal changes:
 The list module (files list.c and list.h) will not be changed at all;
 The main program will be changed only where the calls to dynamic memory 

allocation functions were made.

 The allocator is implemented as a separated module oalloc (files oalloc.c

and oalloc.h). This module must know the type of the objects 
(ListNode) so it will include the header list.h.

 The main program must initialize and then call the allocator. So it will 

include the header oalloc.h.

 Conclusion: in this way the interaction between the original program and 

the allocator is minimized.

 Note that because we dont want to change the list module the allocator 

must return pointers, not integer indices.

2013

Implementation of  dynamic memory allocation (II)
#include <stdlib.h>
#include "oalloc.h"
void storageInit(void) {

#ifndef OALLOC_H

#define OALLOC_H

int i;
for (i=0;i<N_OBJECTS-1;i++) {

succ[i] = i+1;

}
succ[N_OBJECTS-1] = NIL;
available = 0;

}
ListNode* objectNew(void) {

if (available == NIL) {

return NULL;

}
else {

int x = available;
available = succ[x];
return &storage[x];

}

}
void objectDelete(ListNode *x) {

int y = x-storage;
succ[y] = available;
available = y;

}

#include "list.h"

#define N_OBJECTS 100
#define NIL -1

ListNode storage[N_OBJECTS];
int succ[N_OBJECTS];
int available;

void storageInit(void);
ListNode* objectNew(void);
void objectDelete(ListNode *);

#endif

2013

Implementation of  dynamic memory allocation (III)

#include <stdio.h>
#include <stdlib.h>
#include "list.h"
#include "oalloc.h"

void printList(List l) {

ListNode *n;
n = l.head;
while (n != NULL) {

printf("%3d",n->key);
n = n->next;

}
printf("\n");

}

main() {

List l;
int k;
char cmdLine[80];
ListNode *n = NULL;
storageInit();
l.head = NULL;

gets(cmdLine);
while (tolower(cmdLine[0]) != 'x') {

switch(tolower(cmdLine[0])) {
case 'i':

sscanf(cmdLine+1,"%d",&k);
n = objectNew();
n->key = k;
listInsert(&l,n); break;

case 'r':

sscanf(cmdLine+1,"%d",&k);
n = listSearch(&l,k);
if (n != NULL) {

listRemove(&l,n);
objectDelete(n);

}
break;

case 'p':

printList(l); break;

}
gets(cmdLine);

}

}

The lines that have been underlined show the points where the original main 
program has been changed.

2013

