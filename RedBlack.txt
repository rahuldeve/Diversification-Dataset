Left-Leaning

Red-Black Trees

Robert Sedgewick

Princeton University

Original version: Data structures seminar at Dagstuhl (Feb 2008)




red-black trees made simpler (!)
full delete() implementation

This version: Analysis of Algorithms meeting at Maresias (Apr 2008)

 back to balanced 4-nodes
 back to 2-3 trees (!)


scientific analysis

Addendum: observations developed after talk at Maresias

Java code at www.cs.princeton.edu/~rs/talks/LLRB/Java
Movies at www.cs.princeton.edu/~rs/talks/LLRB/movies

Introduction
2-3-4 Trees

Red-Black Trees

Left-Leaning RB Trees

Deletion

Red-black trees

are now found throughout our computational infrastructure

Introduction
Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Textbooks on algorithms

.  .  .

Library search function in many programming environments

.  .  .

Popular culture (stay tuned)

Worth revisiting?

Red-black trees

are now found throughout our computational infrastructure

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Typical:

Digression:

Red-black trees are found in popular culture??

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Mystery: black door?

Mystery: red door?

An explanation ?

Primary goals

Red-black trees (Guibas-Sedgewick, 1978)

 reduce code complexity
 minimize or eliminate space overhead
 unify balanced tree algorithms
 single top-down pass (for concurrent algorithms)


find version amenable to average-case analysis

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Current implementations

 maintenance
 migration
 space not so important (??)
 guaranteed performance
 support full suite of operations

Worth revisiting ?

Primary goals

Red-black trees (Guibas-Sedgewick, 1978)

 reduce code complexity
 minimize or eliminate space overhead
 unify balanced tree algorithms
 single top-down pass (for concurrent algorithms)


find version amenable to average-case analysis

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Current implementations

 maintenance
 migration
 space not so important (??)
 guaranteed performance
 support full suite of operations

Worth revisiting ?   YES. Code complexity is out of hand.

Introduction
2-3-4 Trees
LLRB Trees

Deletion
Analysis

2-3-4 Tree

Generalize BST node to allow multiple keys.
Keep tree in perfect balance.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Perfect balance.  Every path from root to leaf has same length.

Allow 1, 2, or 3 keys per node.

 2-node:  one key, two children.
 3-node:  two keys, three children.
 4-node:  three keys, four children.

K  R

smaller than K

larger than R

between
K and R

C  E

M  O

W

A

D

F  G  J

L

N

Q

S  V

Y  Z

Search in a 2-3-4 Tree

Compare node keys against search key to guide search.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Search.

 Compare search key against keys in node.
 Find interval containing search key.
 Follow associated link (recursively).

Ex: Search for L

K  R

between
K and R

C  E

M  O

W

smaller than M

A

D

F  G  J

L

N

Q

S  V

Y  Z

found L

Insertion in a 2-3-4 Tree

Add new keys at the bottom of the tree.

Insert.

 Search to bottom for key.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Ex: Insert B

smaller than K

K  R

smaller than C

C  E

M  O

W

A

D

F  G  J

L

N

Q

S  V

Y  Z

B not found

Insertion in a 2-3-4 Tree

Add new keys at the bottom of the tree.

Insert.

 Search to bottom for key.
 2-node at bottom: convert to a 3-node.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Ex: Insert B

smaller than K

K  R

smaller than C

C  E

M  O

W

A  B

D

F  G  J

L

N

Q

S  V

Y  Z

B fits here

Insertion in a 2-3-4 Tree

Add new keys at the bottom of the tree.

Insert.

 Search to bottom for key.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Ex: Insert X

K  R

larger than R

C  E

M  O

W

larger
than W

A

D

F  G  J

L

N

Q

S  V

Y  Z

X not found

Insertion in a 2-3-4 Tree

Add new keys at the bottom of the tree.

Insert.

 Search to bottom for key.
 3-node at bottom: convert to a 4-node.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Ex: Insert X

K  R

larger than R

C  E

M  O

W

larger
than W

A

D

F  G  J

L

N

Q

S  V

X  Y  Z

X fits here

Insertion in a 2-3-4 Tree

Add new keys at the bottom of the tree.

Insert.

 Search to bottom for key.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Ex: Insert H

smaller than K

K  R

C  E

M  O

W

larger than E

A

D

F  G  J

L

N

Q

S  V

Y  Z

H not found

Insertion in a 2-3-4 Tree

Add new keys at the bottom of the tree.

Insert.

 Search to bottom for key.
 2-node at bottom: convert to a 3-node. 
 3-node at bottom: convert to a 4-node.
 4-node at bottom: no room for new key.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Ex: Insert H

smaller than K

K  R

C  E

M  O

W

larger than E

A

D

F  G  J

L

N

Q

S  V

Y  Z

no room for H

Splitting 4-nodes in a 2-3-4 tree

is an effective way to make room for insertions

C  E

C  E  G

A  B

D

F  G  J

A  B

D

F

J

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis
move middle
key to parent

split remainder
into two 2-nodes

H does not fit here

H does fit here !

Problem: Doesnt work if parent is a 4-node

Bottom-up solution (Bayer, 1972)

 Use same method to split parent
 Continue up the tree while necessary
Top-down solution (Guibas-Sedgewick, 1978)

 Split 4-nodes on the way down


Insert at bottom

C  E  G

A  B

D

F

H  J

Splitting 4-nodes on the way down

ensures that the current node is not a 4-node

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Transformations to split 4-nodes:

local transformations

that work anywhere in the tree

Invariant: Current node is not a 4-node

Consequences:

 4-node below a 4-node case never happens 
 Bottom node reached is always a 2-node or a 3-node

Splitting a 4-node below a 2-node

is a local transformation that works anywhere in the tree

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

D

D  Q

K  Q  W

A-C

K

W

A-C

E-J

L-P

R-V

X-Z

E-J

L-P

R-V

X-Z

could be huge

 unchanged

Splitting a 4-node below a 3-node

is a local transformation that works anywhere in the tree

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

D H

D  H  Q

K  Q  W

K

W

A-C

E-G

A-C

E-G

I-J

L-P

R-V

X-Z

I-J

L-P

R-V

X-Z

could be huge

 unchanged

Growth of a 2-3-4 tree

happens upwards from the bottom

insert A

A

insert S

A  S

insert E

A  E  S

insert R

E

split 4-node to

E

A

S

tree grows
up one level

A

R  S

and then insert

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

insert C

E

A  C

R  S

insert D

E

A  C  D

R  S

insert I

E

A  C  D

I  R  S

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Growth of a 2-3-4 tree (continued)

happens upwards from the bottom

E

insert N

A  C  D

I  R  S

split 4-node to

E  R

I

S

and then insert

E  R

A  C  D

I  N

S

insert B

split 4-node to

C  E  R

A D

and then insert

insert X

split 4-node to

C  E  R

A  B

D

I  N

S

E

C

R

and then insert

E

C

R

A  B

D

I  N

S  X

tree grows
up one level

Balance in 2-3-4 trees

Key property: All paths from root to leaf are the same length

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Tree height.

  [all 2-nodes]

 Worst case:  lg N  
 Best case:  log4 N = 1/2 lg N    [all 4-nodes]
 Between 10 and 20 for 1 million nodes.
 Between 15 and 30 for 1 billion nodes.

Guaranteed logarithmic performance for both search and insert.

Direct implementation of 2-3-4 trees

is complicated because of code complexity.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Maintaining multiple node types is cumbersome.

 Representation?
 Need multiple compares to move down in tree.
 Large number of cases for splitting.
 Need to convert 2-node to 3-node and 3-node to 4-node.

fantasy

code

Bottom line: Could do it, but stay tuned for an easier way.

private void insert(Key key, Val val){   Node x = root;   while (x.getTheCorrectChild(key) != null)   {      x = x.getTheCorrectChild(key);      if (x.is4Node()) x.split();   }   if      (x.is2Node()) x.make3Node(key, val);   else if (x.is3Node()) x.make4Node(key, val);   return x;}Introduction
2-3-4 Trees
LLRB Trees

Deletion
Analysis

Red-black trees (Guibas-Sedgewick, 1978)

1. Represent 2-3-4 tree as a BST.
2. Use "internal" red edges for 3- and 4- nodes.

3-node

4-node

or

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Key Properties

 elementary BST search works
 easy to maintain a correspondence with 2-3-4 trees

(and several other types of balanced trees)

C  E

A  B

D

F  G  J

C

B

D

A

E

E

J

G

F

C

Note: correspondence is not 1-1.

(3-nodes can lean either way)

C

J

B

A

D

G

F

A

E

D

B

Many variants studied ( details omitted. )
NEW VARIANT (this talk): Left-leaning red-black trees

C

A

E

B

D

J

G

F

J

G

F

Left-leaning red-black trees

1. Represent 2-3-4 tree as a BST.
2. Use "internal" red edges for 3- and 4- nodes.
3. Require that 3-nodes be left-leaning.

3-node

4-node

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Key Properties

 elementary BST search works
 easy-to-maintain 1-1 correspondence with 2-3-4 trees


trees therefore have perfect black-link balance

C  E

A  B

D

F  G  J

E

C

B

D

G

F

J

A

Left-leaning red-black trees

1. Represent 2-3-4 tree as a BST.
2. Use "internal" red edges for 3- and 4- nodes.
3. Require that 3-nodes be left-leaning.

3-node

4-node

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Disallowed

 right-leaning 3-node representation

standard red-black trees

allow this one



two reds in a row

original version of left-leaning trees

 used this 4-node representation

single-rotation trees

allow all of these

Java data structure for red-black trees

adds one bit for color to elementary BST data structure

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

color of incoming link

constants

E

C

B

D

G

F

J

A

helper method to test node color

public class BST<Key extends Comparable<Key>, Value>{    private static final boolean RED   = true;    private static final boolean BLACK = false;    private Node root;    private class Node    {        Key key;        Value val;        Node left, right;        boolean color;        Node(Key key, Value val, boolean color)        {            this.key   = key;            this.val = val;            this.color = color;        }    }    public Value get(Key key)   // Search method.    public void put(Key key, Value val)   // Insert method.}private boolean isRed(Node x){     if (x == null) return false;   return (x.color == RED);}Search implementation for red-black trees

is the same as for elementary BSTs

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

( but typically runs faster because of better balance in the tree).

BST (and LLRB tree) search implementation

E

C

B

D

G

F

J

A

Important note: Other BST methods also work

Ex: Find the minimum key

 order statistics


iteration

public Value get(Key key){   Node x = root;   while (x != null)   {      int cmp = key.compareTo(x.key);      if (cmp == 0)     return x.val;      else if (cmp < 0) x = x.left;      else if (cmp > 0) x = x.right;   }   return null;}public Key min(){   Node x = root;   while (x != null) x = x.left;   if (x == null) return null;   else           return x.key;}Insert implementation for LLRB trees

is best expressed in a recursive implementation

Recursive insert() implementation for elementary BSTs

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Nonrecursive

.  .  .

associative model
(no duplicate keys)

Recursive

Note: effectively travels down the tree and then up the tree.

 simplifies correctness proof
 simplifies code for balanced BST implementations
 could remove recursion to get stack-based single-pass algorithm

private Node insert(Node h, Key key, Value val){    if (h == null)       return new Node(key, val);   int cmp = key.compareTo(h.key);   if (cmp == 0) h.val = val;   else if (cmp < 0)       h.left = insert(h.left, key, val);    else       h.right = insert(h.right, key, val);    return h;}Balanced tree code

is based on local transformations known as rotations

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

In red-black trees, we only rotate red links
(to maintain perfect black-link balance)

h

F

Q

A-E

x

Q

F

R-Z

G-P

R-Z

A-E

G-P

h

Q

F

x

F

Q

R-Z

A-E

A-E

G-P

G-P

R-Z

private Node rotateLeft(Node h){     Node x = h.right;   h.right = x.left;   x.left = h;   x.color = x.left.color;   x.left.color = RED;   return x;}private Node rotateRight(Node h){     Node x = h.left;   h.left = x.right;   x.right = h;   x.color = x.right.color;   x.right.color = RED;   return x;}Insert a new node at the bottom in a LLRB tree

follows directly from 1-1 correspondence with 2-3-4 trees

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

1. Add new node as usual, with red link to glue it to node above
2. Rotate if necessary to get correct 3-node or 4-node representation

rotate

left

rotate
right

rotate

left

Splitting a 4-node

is accomplished with a color flip

Flip the colors of the three nodes

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

h

E

M

Q

h

E

M

Q

A-D

F-L

N-P

R-Z

A-D

F-L

N-P

R-Z

Key points:

 preserves prefect black-lin balance
 passes a RED link up the tree
 reduces problem to inserting (that link) into parent

private Node colorFlip(Node h){     x.color       = !x.color;   x.left.color  = !x.left.color;   x.right.color = !x.right.color;   return x;}Splitting a 4-node in a LLRB tree

follows directly from 1-1 correspondence with 2-3-4 trees

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

1. Flip colors, which passes red link up one level
2. Rotate if necessary to get correct representation in parent
    (using precisely the same transformations as for insert at bottom) 

Parent is a 2-node:  two cases

color
flip

color
flip

rotate

left

Splitting a 4-node in a LLRB tree

follows directly from 1-1 correspondence with 2-3-4 trees

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

1. Flip colors, which passes red link up one level
2. Rotate if necessary to get correct representation in parent
    (using precisely the same transformations as for insert at bottom) 

Parent is a 3-node:  three cases

color
flip

rotate
right

color
flip

rotate

left

rotate
right

color
flip

Inserting and splitting nodes in LLRB trees

are easier when rotates are done on the way up the tree.

Search as usual

if key found reset value, as usual

if key not found  insert new red node at the bottom

 might leave right-leaning red or two reds in a row 

higher up in the tree

Split 4-nodes on the way down the tree.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

or

flip color


 might leave right-leaning red or two reds in a row 

higher up in the tree

NEW TRICK: Do rotates on the way UP the tree.

left-rotate any right-leaning link on search path

 right-rotate top link if two reds in a row found
trivial with recursion (do it after recursive calls)

 no corrections needed elsewhere

could be

right or left

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

or

Insert code for LLRB trees

is based on four simple operations.

1. Insert a new node at the bottom.

2. Split a 4-node.

3. Enforce left-leaning condition.

4. Balance a 4-node.

if (h == null)       return new Node(key, value, RED);if (isRed(h.left) && isRed(h.right))      colorFlip(h);if (isRed(h.right))      h = rotateLeft(h);if (isRed(h.left) && isRed(h.left.left))      h = rotateRight(h);Insert implementation for LLRB trees

is a few lines of code added to elementary BST insert

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

insert at the bottom

split 4-nodes on the way down

standard BST insert code

fix right-leaning reds on the way up

fix two reds in a row on the way up

   private Node insert(Node h, Key key, Value val)   {       if (h == null)          return new Node(key, val, RED);      if (isRed(h.left) && isRed(h.right))         colorFlip(h);      int cmp = key.compareTo(h.key);      if (cmp == 0) h.val = val;      else if (cmp < 0)          h.left = insert(h.left, key, val);       else          h.right = insert(h.right, key, val);       if (isRed(h.right))         h = rotateLeft(h);            if (isRed(h.left) && isRed(h.left.left))         h = rotateRight(h);      return h;   }LLRB (top-down 2-3-4) insert movie

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

A surprise

Q. What happens if we move color flip to the end?

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

   private Node insert(Node h, Key key, Value val)   {       if (h == null)          return new Node(key, val, RED);      if (isRed(h.left) && isRed(h.right))         colorFlip(h);      int cmp = key.compareTo(h.key);      if (cmp == 0) h.val = val;      else if (cmp < 0)          h.left = insert(h.left, key, val);       else          h.right = insert(h.right, key, val);       if (isRed(h.right))         h = rotateLeft(h);            if (isRed(h.left) && isRed(h.left.left))         h = rotateRight(h);      return h;   }A surprise

Q. What happens if we move color flip to the end?

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

   private Node insert(Node h, Key key, Value val)   {       if (h == null)          return new Node(key, val, RED);      int cmp = key.compareTo(h.key);      if (cmp == 0) h.val = val;      else if (cmp < 0)          h.left = insert(h.left, key, val);       else          h.right = insert(h.right, key, val);       if (isRed(h.right))         h = rotateLeft(h);            if (isRed(h.left) && isRed(h.left.left))         h = rotateRight(h);      if (isRed(h.left) && isRed(h.right))         colorFlip(h);      return h;   }A surprise

Q. What happens if we move color flip to the end?
A. It becomes an implementation of 2-3 trees (!)

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

   private Node insert(Node h, Key key, Value val)   {       if (h == null)          return new Node(key, val, RED);      int cmp = key.compareTo(h.key);      if (cmp == 0) h.val = val;      else if (cmp < 0)          h.left = insert(h.left, key, val);       else          h.right = insert(h.right, key, val);       if (isRed(h.right))         h = rotateLeft(h);            if (isRed(h.left) && isRed(h.left.left))         h = rotateRight(h);      if (isRed(h.left) && isRed(h.right))         colorFlip(h);      return h;   }Insert in 2-3 tree:attach new node with red link2-node  3-node3-node  4-nodesplit 4-nodepass red link up to parent and repeatno 4-nodes left!Insert implementation for 2-3 trees (!)

is a few lines of code added to elementary BST insert

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

insert at the bottom

standard BST insert code

fix right-leaning reds on the way up

fix two reds in a row on the way up

split 4-nodes on the way up

   private Node insert(Node h, Key key, Value val)   {       if (h == null)          return new Node(key, val, RED);      int cmp = key.compareTo(h.key);      if (cmp == 0) h.val = val;      else if (cmp < 0)          h.left = insert(h.left, key, val);       else          h.right = insert(h.right, key, val);       if (isRed(h.right))         h = rotateLeft(h);            if (isRed(h.left) && isRed(h.left.left))         h = rotateRight(h);      if (isRed(h.left) && isRed(h.right))         colorFlip(h);      return h;   }LLRB (bottom-up 2-3) insert movie

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Why revisit red-black trees?

Which do you prefer?

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Left-Leaning

Red-Black Trees

Robert Sedgewick
Princeton University

straightforward

very
tricky

private Node insert(Node x, Key key, Value val, boolean sw){    if (x == null)      return new Node(key, value, RED);   int cmp = key.compareTo(x.key);   if (isRed(x.left) && isRed(x.right))   {       x.color = RED;      x.left.color  = BLACK;      x.right.color = BLACK;   }   if (cmp == 0) x.val = val;   else if (cmp < 0))   {      x.left = insert(x.left, key, val, false);      if (isRed(x) && isRed(x.left) && sw)        x = rotR(x);     if (isRed(x.left) && isRed(x.left.left))               {         x = rotR(x);         x.color = BLACK; x.right.color = RED;        }   }   else // if (cmp > 0)   {       x.right = insert(x.right, key, val, true);      if (isRed(h) && isRed(x.right) && !sw)         x = rotL(x);      if (isRed(h.right) && isRed(h.right.right))       {         x = rotL(x);         x.color = BLACK; x.left.color = RED;         }   }   return x;}private Node insert(Node h, Key key, Value val){    if (h == null)       return new Node(key, val, RED);   int cmp = key.compareTo(h.key);   if (cmp == 0) h.val = val;   else if (cmp < 0)       h.left = insert(h.left, key, val);    else       h.right = insert(h.right, key, val);    if (isRed(h.right))      h = rotateLeft(h);     if (isRed(h.left) && isRed(h.left.left))      h = rotateRight(h);   if (isRed(h.left) && isRed(h.right))      colorFlip(h);   return h;}Why revisit red-black trees?

Take your pick:

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

TreeMap.java

wrong scale!

Adapted from

CLR by

experienced 
professional
programmers

(2004)

150

46

33

lines of code for insert

(lower is better!)

Why revisit red-black trees?

left-leaning restriction reduces number of cases 

LLRB implementation is far simpler than previous attempts.

 recursion gives two (easy) chances to fix each node


take your pick: top-down 2-3-4 or bottom-up 2-3

Improves widely used implementations
 AVL, 2-3, and 2-3-4 trees
 red-black trees
Same ideas simplify implementation of other operations
 delete min, max
 arbitrary delete

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

2008
1978

1972

Why revisit red-black trees?

left-leaning restriction reduces number of cases 

LLRB implementation is far simpler than previous attempts.

 recursion gives two (easy) chances to fix each node


take your pick: top-down 2-3-4 or bottom-up 2-3

Improves widely used implementations
 AVL, 2-3, and 2-3-4 trees
 red-black trees
Same ideas simplify implementation of other operations
 delete min, max
 arbitrary delete

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

2008
1978

1972

Introduction
2-3-4 Trees
LLRB Trees

Deletion
Analysis

Lessons learned from insert() implementation

also simplify delete() implementations

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

1. Color flips and rotations preserve perfect black-link balance.
2. Fix right-leaning reds and eliminate  4-nodes on the way up.

rotate-left right-leaning reds

rotate-right red-red pairs

split 4-nodes

Delete strategy (works for 2-3 and 2-3-4 trees)
invariant: current node is not a 2-node
introduce 4-nodes if necessary



 remove key from bottom
 eliminate 4-nodes on the way up

private Node fixUp(Node h){   if (isRed(h.right))      h = rotateLeft(h);   if (isRed(h.left) && isRed(h.left.left))      h = rotateRight(h);   if (isRed(h.left) && isRed(h.right))      colorFlip(h);   return h;}Warmup 1: delete the maximum

1. Search down the right spine of the tree.
2. If search ends in a 3-node or 4-node: just remove it.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

3. Removing a 2-node would destroy balance




transform tree on the way down the search path
Invariant: current node is not a 2-node

combine siblings

borrow from sibling

Note: LLRB representation reduces number of cases (as for insert)

Warmup 1: delete the maximum

by carrying a red link down the right spine of the tree.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Invariant: either h or h.right is RED
Implication: deletion easy at bottom

1. Rotate red links to the right
2. Borrow from sibling if necessary

  when h.right and h.right.left are both BLACK
  Two cases, depending on color of h.left.left

Easy case: h.left.left is BLACK

h

color 
flip

h

Harder case: h.left.left is RED

after
flip

h

rotate
right

h

h.right
is RED

color 
flip

h

h.right.right
turns RED

private Node moveRedRight(Node h){     colorFlip(h);     if (isRed(h.left.left))   {       h = rotateRight(h);      colorFlip(h);   }   return h;}deleteMax() implementation for LLRB trees

is otherwise a few lines of code

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

lean 3-nodes to the right

remove node on bottom level
(h must be RED by invariant)

borrow from sibling if necessary

move down one level

fix right-leaning red links

and eliminate 4-nodes

on the way up

   public void deleteMax()   {     root = deleteMax(root);     root.color = BLACK;   }   private Node deleteMax(Node h)   {      if (isRed(h.left))         h = rotateRight(h);      if (h.right == null)         return null;            if (!isRed(h.right) && !isRed(h.right.left))         h = moveRedRight(h);      h.left = deleteMax(h.left);      return fixUp(h);   }deleteMax() example 1

push reds down
1

D

H

fix right-leaning reds

on the way up
5

D

L

H

L

B

F

J

N

B

F

J

N

A

C

E

G

I

K

M

O

A

C

E

G

I

K

M

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

H

2

B

D

F

A

C

E

G

I

J

H

L

N

6

H

D

L

K

M

O

B

F

A

C

E

G

I

K

M

J

H

N

L

F

J

N

3

A

D

L

B

F

J

N

C

E

G

I

K

M

O

D

7

B

H

A

C

E

G

I

K

M

4

D

L

B

F

J

N

A

C

E

G

I

K

M

O

remove maximum

D

L

H

5

B

F

J

N

A

C

E

G

I

K

M

(nothing to fix!)

deleteMax() example 2

push reds down
1

H

D

L

remove maximum
D

4

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

B

F

J

N

A

C

E

G

I

K

M

2

D

B

H

A

C

F

L

B

H

A

C

F

J

E

G

I

L

K

M

N

fix right-leaning reds

on the way up

5

D

E

G

J

N

I

K

M

3

D

B

H

A

C

F

J

E

G

I

L

4

D

K

N

M

B

H

A

C

F

J

E

G

I

L

K

M

N

B

H

A

C

F

E

G

6

D

B

F

J

I

K

H

L

J

M

L

M

A

C

E

G

I

K

LLRB deleteMax() movie

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Warmup 2: delete the minimum

is similar but slightly different (since trees lean left).

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Invariant: either h or h.left is RED
Implication: deletion easy at bottom

Borrow from sibling
 if h.left and h.left.left are both BLACK
 two cases, depending on color of h.right.left

Easy case: h.right.left is BLACK

h

color 
flip

h

Harder case: h.right.left is RED

after
flip

h

rotate
right

h

rotate

left

h

h.left
is RED

color 
flip

h

h.left.left
turns RED

private Node moveRedLeft(Node h){                   colorFlip(h);   if (isRed(h.right.left))   {      h.right = rotateRight(h.right);      h = rotateLeft(h);      colorFlip(h);   }   return h;}deleteMin() implementation for LLRB trees

is a few lines of code

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

remove node on bottom level
(h must be RED by invariant)

push red link down if necessary

move down one level

fix right-leaning red links

and eliminate 4-nodes

on the way up

   public void deleteMin()   {     root = deleteMin(root);     root.color = BLACK;   }   private Node deleteMin(Node h)   {      if (h.left == null)         return null;      if (!isRed(h.left) && !isRed(h.left.left))         h = moveRedLeft(h);      h.left = deleteMin(h.left);      return fixUp(h);   }deleteMin() example

push reds down
1

D

H

L

fix right-leaning reds

on the way up
5

H

D

L

B

F

J

N

B

F

J

N

A

C

E

G

I

K

M

O

C

E

G

I

K

M

O

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

H

2

B

D

F

A

C

E

G

I

L

N

K

M

O

J

H

3

A

D

L

B

F

J

N

C

E

G

I

K

M

O

4

H

D

L

B

F

J

N

A

C

E

G

I

K

M

O

remove minimum

D

L

H

5

B

F

J

N

C

E

G

I

K

M

O

6

D

H

L

C

B

F

J

N

E

G

I

K

M

O

H

L

G

J

N

I

K

M

O

7

F

D

C

E

B

8

F

H

L

N

J

M

O

G

I

K

D

C

E

B

LLRB deleteMin() movie

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Deleting an arbitrary node

involves the same general strategy.

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

1. Search down the left spine of the tree.
2. If search ends in a 3-node or 4-node: just remove it.

3. Removing a 2-node would destroy balance




transform tree on the way down the search path
Invariant: current node is not a 2-node

Difficulty:

 Far too many cases!
 LLRB representation dramatically reduces the number of cases.

Q: How many possible search paths in two levels ?  
A:   9 * 6  +  27 * 9  +  81 * 12   =    1269  (! !)

Deleting an arbitrary node

reduces to deleteMin()

A standard trick:

h

D

H

to delete D

L

B

F

J

N

A

C

E

G

I

K

M

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

H

replace its key, value with those of its successor

E

L

B

F

J

N

A

C

E

G

I

K

M

deleteMin(right child of D)
     
 
      flip colors, delete node

      fix right-leaning red link

H

then delete the successor

E

L

B

F

J

N

A

C

E

G

I

K

M

H

E

L

B

G

J

N

A

C

F

I

K

M

h.key   = min(h.right);h.value = get(h.right, h.key);h.right = deleteMin(h.right);Deleting an arbitrary node at the bottom

can be implemented with the same helper methods
used for deleteMin() and deleteMax().

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Invariant: h or one of its children is RED

 search path goes left: use moveRedLeft().
 search path goes right: use moveRedRight().
 delete node at bottom


fix right-leaning reds on the way up

I

F

L

N

J

M

O

G

I

K

D

C

E

B

L

N

M

O

F

I

G

D

C

E

B

K

J

delete() implementation for LLRB trees

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

LEFT

push red right if necessary

move down (left)

RIGHT or EQUAL

rotate to push red right

EQUAL (at bottom)
      delete node

push red right if necessary

EQUAL (not at bottom)

replace current node with 
successor key, value

delete successor

move down (right)

fix right-leaning red links

and eliminate 4-nodes

on the way up

private Node delete(Node h, Key key){   int cmp = key.compareTo(h.key);   if (cmp < 0)   {      if (!isRed(h.left) && !isRed(h.left.left))          h = moveRedLeft(h);      h.left =  delete(h.left, key);   }   else   {      if (isRed(h.left)) h = leanRight(h);      if (cmp == 0 && (h.right == null))         return null;      if (!isRed(h.right) && !isRed(h.right.left))         h = moveRedRight(h);      if (cmp == 0)      {         h.key = min(h.right);         h.value = get(h.right, h.key);         h.right = deleteMin(h.right);      }      else h.right = delete(h.right, key);   }   return fixUp(h);}LLRB delete() movie

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Alternatives

Red-black-tree implementations in widespread use:
 are based on pseudocode with case bloat
 use parent pointers (!)
 400+ lines of code for core algorithms

Left-leaning red-black trees

 you just saw all the code
 single pass (remove recursion if concurrency matters)
 <80 lines of code for core algorithms
less code implies faster insert, delete

less code implies easier maintenance and migration


Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

2008
1978

1972

accomplishes the same result with less than 1/5 the code

insertdeletehelperinsertdeletehelperIntroduction
2-3-4 Trees
LLRB Trees

Deletion
Analysis

Worst-case analysis

follows immediately from 2-3-4 tree correspondence

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

1. All trees have perfect black balance.
2. No two red links in a row on any path.

Shortest path: lg N (all black)
Longest path: 2 lg N (alternating red-black)

Theorem: With red-black BSTs as the underlying data structure, we 
can implement an ordered symbol-table API that supports insert, 
delete, delete the minimum, delete the maximum, find the minimum, 
find the maximum, rank, select the kth largest, and range count in 
guaranteed logarithmic time.

Red-black trees are the method of choice for many applications.

One remaining question

that is of interest in typical applications

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

The number of searches far exceeds the number of inserts.

Q. What is the cost of a typical search?
A. If each tree node is equally likely to be sought, compute the 
internal path length of the tree and divide by N.

0

1

1

2

2

2

2

3

N: 8

internal path length: 0 + 1 + 1 + 2 + 2 + 2 + 2 + 3  =  13 

average search cost: 13/8 = 1.625

Q. What is the expected internal path length of a tree built with 
randomly ordered keys (average cost of a search)?

Average-case analysis of balanced trees

deserves another look!
Main questions: 
     Is average path length in tree built from random keys ~ c lg N ?
     If so, is c = 1 ?

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Average-case analysis of balanced trees

deserves another look!
Main questions: 
     Is average path length in tree built from random keys ~ c lg N ?
     If so, is c = 1 ?

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Experimental evidence

Ex: Tufte plot of average path length in 2-3 trees

 N = 100, 200, . . . , 50,000
 100 trees each size

Tufte plot

sample
mean

sample 

lg N  1.5

14

5

100

50,000

Average-case analysis of balanced trees

deserves another look!
Main questions: 
     Is average path length in tree built from random keys ~ c lg N ?
     If so, is c = 1 ?

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Experimental evidence strongly suggests YES!

Ex: Tufte plot of average path length in 2-3 trees

 N = 100, 200, . . . , 50,000
 100 trees each size

Average path length in 2-3 tree built from random keys

Tufte plot

sample
mean

sample 

lg N  1.5

14

5

100

50,000

Experimental evidence

can suggest and confirm hypotheses

Average path length in (top-down) 2-3-4 tree built from random keys

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

lg N  1.5

14

5

14

5

100

50,000

Average path length in 2-3 tree built from random keys

lg N  1.5

100

50,000

Average-case analysis of balanced trees

deserves another look!

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Main questions: 
     Is average path length in tree built from random keys ~ c lg N ?
     If so, is c = 1 ?

Some known facts:

 worst case gives easy 2 lg N upper bound
fringe analysis of gives upper bound of ck lgN with ck > 1

 analytic combinatorics gives path length in random trees

Are simpler implementations simpler to analyze?

Is the better experimental evidence that is now available helpful?

A starting point: study balance at the root (left subtree size)

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Left subtree size in left-leaning 2-3 trees 

6

12

12

72

48

288

144

288

2160

864

1152

864

Exact distributions

4

5

6

7

Left subtree size in left-leaning 2-3 trees 

Limiting distribution?

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

7

64

smoothed version (32-64)

Left subtree size in left-leaning 2-3 trees 

Tufte plot 

7

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

64

Left subtree size in left-leaning 2-3 trees 

Tufte plot 

100

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

view of highway for bus driver who 
has had one Caipirinha too many ?

500

Left subtree size in left-leaning 2-3 trees 

Limiting distribution?

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

350

400

10,000 trees for each size

smooth factor 10

An exercise in the analysis of algorithms

Find a proof !

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Average path length in 2-3 tree built from random keys

lg N  1.5

14

5

100

50,000

Addendum: 
Observations

Observation 1

The percentage of red nodes in a 2-3 tree is
between 25 and 25.5% 

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Percentage of red nodes in 2-3 tree built from random keys

25.38168

25

0

100

50,000

Observation 2

The height of a 2-3 tree is ~2 ln N (!!!)

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Height of a 2-3 tree built from random keys

2 ln N

21.66990

lg N - 1.5

22

14

5

100

50,000

Very surprising because the average path length in an elementary BST is also ~2 ln N  1.386 lg N 

Observation 3

The percentage of red nodes on each path in a 2-3 tree
rises to about 25%, then drops by 2 when the root splits

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

Observation 4

In aggregate, the observed number of red links per path
log-alternates between periods of steady growth and
not-so-steady decrease (because root-split times vary widely)

Introduction
2-3-4 Trees
LLRB Trees
Deletion
Analysis

0

500

