The Price of Anarchy is Independent of the Network


Topology


Tim Roughgarden

December 23, 2002

Abstract

We study the degradation in network performance caused by the selfish behavior
of noncooperative network users. We consider a model of selfish routing in which the
latency experienced by network traffic on an edge of the network is a function of the
edge congestion, and network users are assumed to selfishly route traffic on minimum-
latency paths. The quality of a routing of traffic is measured by the sum of travel times,
also called the total latency. The outcome of selfish routinga Nash equilibriumdoes
not in general minimize the total latency; hence, selfish behavior carries the cost of
decreased network performance. We quantify this degradation in network performance
via the price of anarchy, the worst-possible ratio between the total latency of a Nash
equilibrium and of an optimal routing of the traffic.

We show the price of anarchy is determined only by the simplest of networks.
Specifically, we prove that under weak hypotheses on the class of allowable edge latency
functions, the worst-case ratio between the total latency of a Nash equilibrium and of a
minimum-latency routing for any multicommodity flow network is achieved by a single-
commodity instance on a network of parallel links. In the special case where the class
of allowable latency functions includes all of the constant functions, we prove that a
network with only two parallel links suffices to achieve the worst-possible ratio.

Our guarantee that simple networks always furnish worst-possible examples pro-
vides a powerful method for computing the price of anarchy with respect to an arbi-
trary class of latency functions. We apply this method to function classes that have
been well studied in the literature, including degree-bounded polynomials and queueing
delay functions. These are the first tight analyses of the price of anarchy for significant
classes of latency functions outside the class of linear functions.

on the Theory of Computing, May 2002.

A preliminary version of this paper appeared in the Proceedings of the 34th Annual ACM Symposium
Department of Computer Science, Cornell University, Ithaca NY 14853. Supported by an NSF Graduate
Fellowship, a Cornell University Fellowship, and ONR grant N00014-98-1-0589. Research performed in part
while visiting IBM Almaden. Email: timr@cs.cornell.edu.

1

1 Introduction

Selfish Routing and the Price of Anarchy

We study the degradation in network performance caused by the selfish behavior of non-
cooperative network users. More precisely, we consider a directed network in which each
edge possesses a latency function describing the common latency incurred by all traffic on
the edge as a function of the edge congestion. Given a rate of traffic between each pair of
nodes in the network, we aspire toward an assignment of traffic to paths minimizing the sum
of all travel times (the total latency) of the network users. Unfortunately, in many settings
network users are free to route their traffic in a selfish manner, without regard to the total
latency.

Our goal is to quantify the cost of selfish routing in a network. We assume that an
unregulated network user will always choose the minimum-latency path from its source to
its destination, given the link congestion caused by the rest of the network users, and hence
expect the routes chosen by users to form a Nash equilibrium in the sense of classical game
theory [17]. We further assume that each network user controls a negligible fraction of the
overall traffic (e.g., each user could represent a car in a highway system or a packet in a
communication network); feasible assignments of traffic to paths in the network can then be
modeled in a continuous manner via network flow, with the amount of flow between a pair of
nodes in the network equal to the rate of traffic between the two nodes. A Nash equilibrium
then corresponds to a flow in which all flow paths between a given source and destination
have minimum latencyin a flow without this property, some traffic can improve its travel
time by switching from a longer path to a shorter one.

Traffic flows at Nash equilibrium do not in general minimize the total latency incurred by
network users; this is a special case of the more general phenomenon that a Nash equilibrium
in a noncooperative game need not optimize social welfare (perhaps the most famous example
of this is The Prisoners Dilemma [6, 20]). We can therefore study the cost of routing
selfishly with the following question:
for an arbitrary multicommodity flow network with
congestion-dependent edge latencies, what is the worst-case ratio between the total latency
of a flow at Nash equilibrium and that of a flow with minimum-possible total latency?

Roughgarden and Tardos [26] showed that this ratio, dubbed the price of anarchy by Pa-
padimitriou [18], can be arbitrarily large unless additional structure is imposed on the classes
of allowable edge latency functions and/or allowable network topologies. This observation
motivates the central questions of our paper:

(1) Are there nontrivial classes of network topologies for which the price of anarchy is

smaller than for arbitrary networks?

(2) Which classes of edge latency functions admit a finite price of anarchy? What is the

price of anarchy in these cases?

Our Results

We show that the underlying network topology plays no role in the determination of the price
of anarchy. Specifically, we show that under weak hypotheses on the class of allowable latency

2

functions1, the worst-case ratio between the total latency of a flow at Nash equilibrium and
that of a minimum-latency flow in any multicommodity flow network is achieved by a single-
commodity instance in a network of parallel links. Thus, for any fixed class of latency
functions, no nontrivial restriction on the class of allowable network topologies (or on the
number of commodities) will improve the price of anarchy. In the special case of a class of
latency functions that includes all of the constant functions (functions (cid:1) of the form (cid:1)(x) = c
for c > 0), we prove that a network with only two parallel links suffices to achieve the
worst-possible ratio.

Our guarantee that simple networks always furnish worst-possible examples also provides
a powerful method for computing the price of anarchy with respect to an arbitrary class of
latency functions. For example, we show that the price of anarchy for networks with latency
functions that are polynomials with nonnegative coefficients and degree at most p is achieved
by a two-node, two-link network with latency functions (cid:1)(x) = 1 and (cid:1)(x) = xp; a calculation
then shows that the price of anarchy for such networks is precisely [1  p  (p + 1)
1,
ln p ) as p  . We also consider latency functions of the form
which is asymptotically ( p
(cid:1)(x) = (u  x)
1 that arise as the delay functions of M/M/1 queues (where u > 0 should
be interpreted as the edge capacity or the queue service rate) [8]; these latency functions
have been extensively studied in the networking community [2, 10, 11, 13, 16]. As noted by
Friedman [7], the price of anarchy can be finite in this setting only if we constrain the sum
of all traffic rates to be at most a constant Rmax and the minimum allowable edge capacity
to be a constant umin > Rmax; in this case, we prove that the price of anarchy is precisely
umin/(umin  Rmax)]/2. A summary of our work computing the price of anarchy for
[1 +
common classes of latency functions is given in Table 1. These results are the first tight
analyses of the price of anarchy for significant classes of latency functions outside the class
of linear functions, for which the worst-case ratio was shown to be 4
3 by Roughgarden and
Tardos [26].

(p+1)/p]

(cid:1)

Related Work

The idea of quantifying the inefficiency of selfish solutions using the framework of approxi-
mation is due to Koutsoupias and Papadimitriou [12], who proved upper and lower bounds
on the worst-possible objective function value of a Nash equilibrium relative to that of an
optimal solution in a simple load-balancing game. The price of anarchy in this model is also
known as the coordination ratio. These bounds on the coordination ratio were subsequently
improved by Mavronicolas and Spirakis [15], and Czumaj and V ocking [4] provided a sharp
analysis. Czumaj et al. [3] recently defined and studied generalizations of this load-balancing
model.

The traffic routing model studied in this paper dates back to the 1950s [1, 31] and has
been studied extensively ever since (see [24] for further historical references). The price of
anarchy in this model was first investigated by Roughgarden and Tardos [26], who proved
that the price of anarchy in networks with linear edge latency functions is precisely 4/3.

1For example, it suffices for the class to satisfy a mild and standard convexity assumption, to be closed
under multiplication by positive scalars, and to possess some latency function that is positive when evaluated
with zero congestion.

3

Description
Linear
Quadratic

Cubic
Polynomials of degree  p
M/M/1 Delay Functions

M/G/1 Delay Functions

Typical Representative

ax + b

ax3 + bx2 + cx + d

ax2 + bx + c

(cid:2)p
i=0 aixi
(u  x)
1
1
u +

x(1+2u2)
2u(ux)

Price of Anarchy
 1.333
4

 1.626
3

3
3
32
4 3
3
 1.896
4 3
4
43


(p+1) p
p+1
p+1p = ( p
(p+1) p
1
uminRmax
2
See Subsection 5.3

(cid:4)

(cid:3)

1 +

umin

(cid:5)

ln p)

Table 1: The price of anarchy for common classes of edge latency functions. The price of
anarchy for linear latency functions was first determined in [26]; all other results are new to
this paper. Polynomial coefficients are assumed nonnegative. The parameters u and  are
the expectation and standard deviation of the associated queue service rate distribution, see
Section 5 for details. Rmax denotes the maximum allowable amount of network traffic, and
umin denotes the minimum allowable edge service rate (or capacity).

Roughgarden and Tardos [26] also showed that, assuming only that latency functions are
continuous and nondecreasing, the total latency incurred by a flow at Nash equilibrium is
at most that of an optimal flow forced to route twice as much traffic between each source-
destination pair. The model and results of [26] have recently been extended in several
different directions [7, 25, 28, 30] that we will not detail here.

We know of no previous work that proves that the worst-case consequences of selfish
behavior in a class of games always occurs in simple games. Indeed, the guarantee of this
paper that networks of parallel links suffice to capture worst-case examples is provably false
in most known variants of the selfish routing model of this paper. For example, Roughgarden
and Tardos [24, 26] studied two variants of this modelone with network users each carrying
more than a negligible fraction of the overall traffic, and one with a notion of approximate
traffic equilibriaand proved that, for each variant, the cost of routing selfishly is larger in
general networks than in networks of parallel links. In the former variant, even the basic
issues of existence and uniqueness of Nash equilibria are more troublesome in general net-
works than in networks of parallel links [14, 16]. Similarly, Roughgarden showed that the
equilibria in a Stackelberg game related to the traffic model studied here are provably worse
in general graphs than in networks of parallel links [23, 24], that Braesss Paradoxthe coun-
terintuitive phenomenon that removing arcs from a network may decrease the cost of selfish
routinggrows increasingly severe as the underlying network becomes more complex [22],
and that worst-case examples for selfish routing with respect to the maximum (rather than
the total) latency grow in severity with the network size [21].

Organization

After reviewing some technical preliminaries in Section 2, in Section 3 we give an upper bound
on the price of anarchy with respect to an arbitrary class of allowable latency functions. In
Section 4 we give matching lower bounds using simple networks, thereby showing that the

4

price of anarchy is independent of the class of allowable network topologies. In Section 5
we leverage the fact that worst-case examples for selfish routing occur in simple networks to
compute the price of anarchy for several well-studied classes of latency functions.

2 Preliminaries

2.1 The Model

(cid:2)

We consider a directed network G = (V, E) with vertex set V , edge set E, and k source-
destination vertex pairs {s1, t1}, . . . ,{sk, tk}. We allow parallel edges but have no use for
self-loops. We denote the set of (simple) si-ti paths by Pi, and define P = iPi. To avoid
trivialities, we assume that Pi (cid:7)=  for each i. A flow is a function f : P  R+; for a fixed
P :eP fP . We sometimes refer to a source-destination pair {si, ti}
flow f we define fe =
and the si-ti paths of Pi as commodity i.
We associate a finite and positive rate ri with each pair {si, ti}, the amount of flow with
source si and destination ti; a flow f is said to be feasible if for all i,
fP = ri. Finally,
each edge e  E possesses a congestion-dependent latency that we denote by (cid:1)e(). For
each edge e  E, we assume that the latency function (cid:1)e is nonnegative, differentiable, and
nondecreasing. Unless otherwise noted, we will assume that latency functions are defined on
all of [0,). The latency of a path P with respect to a flow f is defined as the sum of the
latencies of the edges in the path, denoted by (cid:1)P (f ) =
eP (cid:1)e(fe). We will call the triple
(cid:2)
(G, r, (cid:1)) an instance.

We define the cost C(f ) of a flow f in G as the total latency incurred by f , so C(f ) =
PP (cid:1)P (f )fP . By summing over the edges in a path P and reversing the order of sum-
eE (cid:1)e(fe)fe. With respect to an instance (G, r, (cid:1)), a

mation, we may also write C(f ) =
feasible flow minimizing C(f ) is said to be optimal or minimum-latency.

(cid:2)

PPi

(cid:2)

(cid:2)

2.2 Flows at Nash Equilibrium

Following Roughgarden and Tardos [26], we formalize our notion of a selfishly defined traffic
flow in the next definition. Intuitively, we expect each unit of such a flow (no matter how
small) to travel along the minimum-latency path available, where latency is measured with
respect to the rest of the flow; otherwise, this unit of flow would reroute itself on a path with
smaller latency.
Definition 2.1 A flow f in G is at Nash equilibrium (or is a Nash flow) if for all i 
{1, . . . , k}, P1, P2  Pi with fP1 > 0, and   (0, fP1], we have (cid:1)P1(f )  (cid:1)P2(  f ), where


 fP  

fP + 
fP

 fP =

if P = P1
if P = P2
if P / {P1, P2}.

Letting  tend to 0, continuity and monotonicity of the edge latency functions give the

following useful characterization of a flow at Nash equilibrium.

5

Proposition 2.2 A flow f is at Nash equilibrium if and only if for every i  {1, . . . , k} and
P1, P2  Pi with fP1 > 0, (cid:1)P1(f )  (cid:1)P2(f ).

Briefly, Proposition 2.2 states that, in a flow at Nash equilibrium, all flow travels on
minimum-latency paths. In particular, if f is at Nash equilibrium then all si-ti flow paths
(si-ti paths to which f assigns a positive amount of flow) have equal latency, say Li(f ). We
can therefore express the cost C(f ) of a flow f at Nash equilibrium in a particularly nice
form.

Proposition 2.3 If f is a flow at Nash equilibrium feasible for the instance (G, r, (cid:1)), then

k(cid:9)

C(f ) =

Li(f )ri.

i=1

It is also reassuring to note that flows at Nash equilibrium always exist and are essentially

unique.

Proposition 2.4 ([1, 5, 26]) Let (G, r, (cid:1)) be an instance with continuous, nondecreasing
latency functions.

(a) (G, r, (cid:1)) admits a feasible flow at Nash equilibrium.
(b) If f and f(cid:3)

are flows at Nash equilibrium feasible for (G, r, (cid:1)), then C(f ) = C(f(cid:3)

).

2.3 Characterizing Optimal Flows via Marginal Cost Functions

We have given in Proposition 2.2 a convenient characterization of flows at Nash equilibrium.
Assuming mild extra conditions on our latency functions, there is an analogous characteri-
zation of optimal flows.
Definition 2.5 A latency function (cid:1) is standard if x  (cid:1)(x) is convex on [0,).

Most but not all latency functions of interest are standard. All convex latency functions
are standard, as are some well-behaved nonconvex functions such as log(1 + x). Nondecreas-
ing and differentiable approximations of step functions are the most notable examples of
nonstandard latency functions.

To state the characterization of optimal flows, we require one further definition.

Definition 2.6 If (cid:1)e is a standard latency function, then the corresponding marginal cost
function (cid:1)

e is defined by

(cid:1)
e =

d

dx(x  (cid:1)e(x)).

By Definitions 2.5 and 2.6, the marginal cost function of a standard latency function is a
nondecreasing function. Basic calculus (see e.g. [27, Pp.108109]) implies that such functions
are also continuous.
an edge by (cid:1)

. We denote the marginal cost function of
since it is in some sense an optimal latency function. Our final preliminary

We will typically denote an optimal flow by f

6

s

1 

x   

t

s

1 

2x   

t

(a) Latency Functions

(b) Marginal Cost Functions

Figure 1: Pigous example

result makes this precise, and asserts that optimal flows arise as Nash flows with respect to
latency functions (cid:1)

.

Proposition 2.7 ([1, 5, 26]) Let (G, r, (cid:1)) be an instance with standard latency functions
and marginal cost function (cid:1)
feasible for (G, r, (cid:1)) is optimal if and only if
it is at Nash equilibrium for (G, r, (cid:1)

. Then, a flow f

).

2.4 Pigous Example and the Inefficiency of Nash Flows

We next illustrate the definitions and propositions of this section with a simple but important
example, essentially due to Pigou [19]. Consider a network with two nodes s and t, two
parallel edges with latency functions (cid:1)(x) = 1 and (cid:1)(x) = x, and a traffic rate of 1 (see
Figure 1(a)). Routing all flow on the bottom link equalizes the latencies of the two available
s-t paths at 1, and thus by Proposition 2.2 provides a flow f at Nash equilibrium. By
Proposition 2.3 or by inspection, the cost C(f ) of f is 1.
Next, the marginal cost functions of the network are (cid:1)

(x) = 2x, as shown
in Figure 1(b). Routing half of the traffic on each link thus equalizes the marginal costs of
the two s-t paths at 1, and so by Proposition 2.7 furnishes a minimum-latency flow f
. The
cost of f
4. Pigous example thus demonstrates our assertion in
Section 1 that Nash flows fail to optimize the total latency.

(x) = 1 and (cid:1)

 1 = 3

 1
2 + 1

2

is C(f

) = 1
2

A qualitative explanation for the inefficiency of the Nash flow in Pigous example is
easily found. The lower edge of the network is capable of providing some traffic with a quick
alternative to the upper edge, provided it is used in moderation. The optimal flow quite
sensibly realizes this and divides traffic equally among the two routes, so that half of the
traffic enjoys a relatively uncongested ride on the bottom edge. The selfish users in the Nash
flow, by contrast, are unable to resist traveling along the bottom route until the congestion
is so great as to render the edge useless.

The inefficiency of selfish routing can be more severe. Consider the minor modification
of Pigous example obtained by replacing the latency function (cid:1)(x) = x by the nonlinear
one (cid:1)(x) = xp for p  2. With a traffic rate of 1, the Nash flow f is the same as in Pigous
example; all flow is routed on the bottom link and the total latency is 1 (for any choice of
p). On the other hand, the discrepancy between the latency functions (1 and xp) and the

7

marginal cost functions (1 and (p + 1)xp) is larger; now, the flow f
units on the lower link and the remainder on the upper link equalizes the marginal costs of
the two links at 1 and is thus optimal. The cost C(f
(p+1)/p, which
tends to 0 as p  . Thus, if arbitrarily steep latency functions are allowed, a flow at Nash
equilibrium can be arbitrarily more costly than an optimal flow.

is 1  p  (p + 1)

) of f

that routes (p + 1)

1/p

We have given a family of examples in which the price of selfishness, quantified by the
ratio of the costs of the Nash and optimal flows, grows with the degree of nonlinearity of the
network latency functions. From a qualitative perspective, however, all of these examples
are identical: the Nash flow is inefficient because selfish users cannot resist overcongesting
an edge that is beneficial when used in moderation. Put differently, the singular obstruction
preventing Nash flows from optimizing the total latency in these examples is the inability
(or unwillingness) of selfish users to discern which of two competing routes is superior from
a global perspective.

In general multicommodity flow networks, we might expect additional problems to arise
with unregulated traffic; for example, it is plausible that centralized control could be used
to prevent different commodities from interfering with one another and thereby radically
improve over the network performance achieved by selfish routing. Such problems would in
turn complicate any explanation for the worst-case losses due to selfish routing. A central
theme of this paper is that additional obstructions to selfish users optimizing the total latency
do not arise in multicommodity flow networks, and that the worst-case inefficiency due to
selfish routing can always be explained with the simplest of examples.

3 Upper-Bounding the Price of Anarchy

The goal of this section is to provide an upper bound on the worst-case ratio between the
cost of a Nash flow and of an optimal flow, given a fixed but arbitrary class of allowable
latency functions. We saw in Subsection 2.4 that this worst-case ratio depends crucially on
how nice the class of allowable latency functions is, and one may therefore ask whether any
meaningful upper bound is possible for an arbitrary class of latency functions. The answer
is affirmative, provided that the upper bound is a function of the class of allowable latency
functions.
To state the main result of this section precisely, denote by (G, r, (cid:1))  1 the ratio
between the cost of a Nash and of an optimal flow for instance (G, r, (cid:1)) (this ratio is well
defined by Proposition 2.4). We will associate a real number (L)  1 to each class L of
allowable edge latency functions that quantifies the steepness of the latency functions in
L, and will then prove that for any instance (G, r, (cid:1)) with latency functions in the class L,
(G, r, (cid:1))  (L). In Section 4 we will provide a matching lower bound, by exhibiting (for
any class L) instances with latency functions in L and -value arbitrarily close to (L).

3.1 Quantifying Steepness with the Anarchy Value
Our first task is to find a definition for a real number (L) that captures how nice a class
L of allowable latency functions is. Intuitively, we will define (L) to be the worst-case ratio
between the cost of a Nash and of an optimal flow in a Pigou-like example (see Subsection 2.4)

8

with latency functions in L. As a first step toward making this precise, we will consider a
motivating example. It will be convenient to apply Proposition 2.7 to compute the optimal
flow in this example; for this reason and others that will become clear later in this section, we
will henceforth only consider networks with standard latency functions (see Definition 2.5).
Definition 3.1 A class L of latency functions is standard if it contains a nonzero function
and each function (cid:1)  L is standard.

We now introduce the motivating example. Suppose we are given a standard class L of
allowable latency functions, and wish to construct an example in which the Nash flow incurs
much more latency than the optimal flow. A natural idea is to mimic the bad examples
of Subsection 2.4 as best we can, given that L is the class of latency functions that we are
allowed to work with. For simplicity, assume that L contains all of the constant functions
and let (cid:1)1 denote the function (cid:1)1(x) = 1. Then, we can consider the usual two-node, two-
link network, assign the first link the latency function (cid:1)1 and the second link the steepest
latency function that we can find. More formally, suppose (cid:1)2  L is assigned to the second
link where (cid:1)2 satisfies (cid:1)2(0) < 1 and (cid:1)2(x) > 1 for x sufficiently large. Choosing r > 0 to
satisfy (cid:1)2(r) = 1, we find that a Nash flow with traffic rate r routes all of its flow on the second
edge for a total latency of r. The definition of marginal cost functions (cid:1)
(Definition 2.6)
and letting   [0, 1] satisfy (cid:1)
2(r) = 1, we find that an optimal flow routes r units of
flow on the second link and (1  )r units of flow on the first link, for a total latency of
r(cid:1)2(r) + (1  )r. Letting   [0, 1] denote (cid:1)2(r)/(cid:1)2(r) = (cid:1)2(r), the ratio between the
total latency of the Nash flow and of the optimal flow is [ + (1)]
1. Since this argument
can be used with (cid:1)1 replaced by any constant function, we arrive at the following expression
for the worst-possible -value arising in two-node, two-link networks with one link endowed
with a constant function and the other endowed with the latency function (cid:1).

Definition 3.2 Let (cid:1) be a nonzero standard latency function. The anarchy value ((cid:1)) of (cid:1)
is

((cid:1)) = sup

r>0 : (cid:2)(r)>0

[ + (1  )]
1

(r) = (cid:1)(r) and  = (cid:1)(r)/(cid:1)(r)  [0, 1].

where   [0, 1] solves (cid:1)
The scalar   [0, 1] exists because (cid:1)
nition 2.6and (cid:1)
determined by (cid:1) and r; otherwise, the assumption that (cid:1) is standard ensures that (cid:1)
creasing and hence the anarchy value is well defined (i.e., that [ + (1)]
of the choice of  satisfying (cid:1)

is continuousrecall the comments following Defi-
(r). In most cases of interest  will be uniquely
is nonde-
1 is independent

(0) = (cid:1)(0)  (cid:1)(r)  (cid:1)

(r) = (cid:1)(r)).

The definition of the anarchy value of a latency function (cid:1) looks rather opaque from a
mathematical perspective, but we emphasize that it is nothing more than the worst-case
inefficiency of selfish routing in Pigou-like examples that make use of the latency function (cid:1).
Since we are interested only in the most ill-behaved latency functions of a class, the next

definition should be unsurprising.

9

Definition 3.3 The anarchy value (L) of a standard class L of latency functions is

(L) = sup
0(cid:5)=(cid:2)L

((cid:1)).

Remark 3.4
(a) The anarchy value of a class lies in [1,] and need not be finite.

(b) The anarchy value may appear a fearsome expression to compute analytically, but we
will see in Section 5 that it can typically be worked out in cases of practical interest.
We have already argued informally that if L is a standard class of latency functions
containing the constant functions, then there are instances I on a network with two nodes
and two links and latency functions in L with ratio  arbitrarily close to the anarchy value
(L). On the other hand, there is no reason a priori to expect the anarchy value to have any
connection to the -value of instances defined on more general networks (or even to those
defined on parallel networks with more than two links). The central technical result of this
paper is that, assuming only that the class L of allowable latency functions is standard, the
anarchy value (L) upper bounds the ratio (G, r, (cid:1)) for any instance (G, r, (cid:1)) with latency
functions in L (with an arbitrary network topology and an arbitrary number of commodities).

3.2 Proof Approach

We next discuss our proof approach. At the highest level, the proof of the main theorem
of this section is inspired by that of a theorem of Roughgarden and Tardos [26], which
states: in an arbitrary network with linear latency functions (latency functions of the form
(cid:1)(x) = ax + b for a, b  0), the cost of a Nash flow is at most 4/3 times that of an optimal
flow. The proof of this theorem has three steps, as follows. First, the characterizations of
Nash and optimal flows (Propositions 2.2 and 2.7) are used to show that if f is a flow at Nash
equilibrium for an instance (G, r, (cid:1)) with linear latency functions, then the scaled-down flow
f /2 is optimal for the instance (G, r/2, (cid:1)). Second, the cost of f /2 is lower bounded in terms
of the cost of f ; this is not difficult since the scaled-down flow f /2 is a significant fraction
of f . Finally, the cost of augmenting the flow f /2 to a flow optimal for (G, r, (cid:1)) is bounded
below relative to the cost of f . This is the most difficult part of the proof; roughly, the
argument leverages the connection between Nash and optimal flows given in Proposition 2.7
to show that the marginal cost of routing new flow with respect to f /2 is high, and thus
augmenting the flow f /2 to a flow at the full set of traffic rates r is costly.

A direct attempt at adapting the three-step approach of [26] to more general latency
functions fails immediately.
In networks with nonlinear latency functions (even networks
with quadratic latency functions), there is no constant c for which a scaled-down version f /c
of a Nash flow f is optimal for the reduced traffic rates r/c. Thus, it is not at all clear how
to exploit our characterizations of Nash and optimal flows to relate their respective costs. To
circumvent this problem, we view the proof approach of [26] in the following more general
way: chop up an optimal flow into two pieces (in [26], f /2 and an augmentation from
f /2 to a flow feasible for rates r) such that each piece can be lower-bounded in terms of the
cost of a Nash flow. Guided by a desire to define the second piece of the optimal flow as an

10

augmentation of the first and to lower bound its cost by means of marginal cost functions
(as in [26]), we will define the first piece in a way that ensures that any augmentation with
respect to it has large marginal cost. Unfortunately, this requires scaling down a Nash
flow f by different factors on different edges, thereby producing an object which is not a
flowit is a more general object that need not obey conservation constraints, that we call
a pseudoflow. This does not significantly complicate the lower bound for the cost of the
scaled-down pseudoflow (it is a significant fraction of the Nash flow, as in [26]). However,
a more careful analysis is now required to lower bound the cost of an augmentation from
the scaled-down pseudoflow to a flow feasible for the original instance, as we are augmenting
with respect to an object more complicated than simply a flow at reduced traffic rates.

3.3 Proof of the Upper Bound

We now turn toward making these ideas precise. We first define what we mean by a scaled-
down pseudoflow. The idea is to scale down the amount of Nash flow on a single edge
until the value of the marginal cost function equals the original latency incurred by the
Nash flow on that edge (this original latency is then our definition of large marginal cost).
Formally, if f is a flow at Nash equilibrium, our scaled-down pseudoflow will be defined by
{efe}eE where e satisfies (cid:1)
e(efe) = (cid:1)e(fe) (as in Definition 3.2). As discussed following
Definition 3.2, these scaling factors always exist but need not be unique; our analysis must
work with an arbitrary choice of scaling factors.

The next lemma formalizes the notion of breaking up the optimal flow into two pieces.
Again, the idea is to express the cost of the optimal flow as one term that is a scaled-down
version of a Nash flow, and a second term that corresponds to an augmentation with respect
to large marginal costs.
Lemma 3.5 Let f
standard latency functions. For an edge e, let e  [0, 1] solve (cid:1)

and f be optimal and Nash flows, respectively, for instance (G, r, (cid:1)) with

e(efe) = (cid:1)e(fe). Then,

C(f

) 

[(cid:1)e(efe)efe + (f

e  efe)(cid:1)e(fe)] .

(cid:9)

e

Since each edge latency function (cid:1)e is standard, each marginal cost function (cid:1)

e is

Proof.
nondecreasing. For an edge e, we may thus write

(cid:1)e(f

e )f

e = (cid:1)e(efe)efe +

(cid:10) f
(cid:1)
e(x)dx
 (cid:1)e(efe)efe + (f
e  efe)(cid:1)
e(efe)
e  efe)(cid:1)e(fe)
= (cid:1)e(efe)efe + (f

efe

e

with the final equality following from the definition of e. Summing over all edges proves
the lemma.

Neither the statement nor the proof of Lemma 3.5 assumes that the expression f

e  efe
is nonnegative for all edges e; put differently, the augmentation from the pseudoflow defined

11

by {efe}eE to a flow f
amount of flow on an edge.

optimal for the original instance may increase or decrease the

To lower bound the right-hand side of Lemma 3.5, we require two more easy lemmas.

The next lemma simply rephrases Definitions 3.2 and 3.3.
Lemma 3.6 Let L be a standard class of latency functions with anarchy value (L). For
(cid:1)  L and f > 0, let   [0, 1] solve (cid:1)
(f ) = (cid:1)(f ) and put  = (cid:1)(f )/(cid:1)(f ) (if (cid:1)(f ) = 0, put
 = 1). Then  + (1  )  1
(L) .

Our final lemma states that if f is a Nash flow for (G, r, (cid:1)), then f is a min-cost flow (in
the classical sense of network flow theory [29]) with respect to the cost vector (cid:1)e(fe). It is an
easy consequence of the fact that, in a Nash flow f , all flow travels along minimum-latency
paths (with latency measured with respect to f ).
(cid:9)
Lemma 3.7 Let f be at Nash equilibrium and f

(cid:9)

(cid:1)e(fe)fe 

e

e

feasible for instance (G, r, (cid:1)). Then,
(cid:1)e(fe)f
e .
(cid:9)

Proof. Let Li(f ) denote the common latency of every si-ti flow path of f , so that

by Proposition 2.3. Since f is at Nash equilibrium, by Proposition 2.2 we have (cid:1)P (f )  Li(f )
for every si-ti path P . It follows that

k(cid:9)

i=1

(cid:9)

Li(f )ri = C(f ) =

(cid:1)e(fe)fe

k(cid:9)

(cid:9)

i=1

PPi

e

P  k(cid:9)

i=1

(cid:1)e(fe)f

e =

(cid:1)P (f )f

Li(f )ri,

which proves the lemma.

e

With all of the preliminaries now in place, we state and prove the main result of this
section: the anarchy value of a standard class L of latency functions upper bounds the ratio
 for any instance with latency functions in L.
Theorem 3.8 Let L be a standard class of latency functions with anarchy value (L). Let
(G, r, (cid:1)) denote an instance with latency functions drawn from L. Then (G, r, (cid:1))  (L).
Proof. Let f
and f be optimal and Nash flows, respectively, for an instance (G, r, (cid:1)) with
latency functions in the standard class L. We begin by applying Lemma 3.5 to rewrite the
cost C(f
) of the optimal flow in a form that is easier to relate to the cost C(f ) of the Nash
flow:

C(f

) 

(cid:9)
(cid:9)
(cid:9)

e

e

=

=

[(cid:1)e(efe)efe + (f
[eefe + (1  e)fe + (f
[ee + (1  e)](cid:1)e(fe)fe +

e  efe)(cid:1)e(fe)]
e  fe)](cid:1)e(fe)
(cid:9)

e  fe](cid:1)e(fe);
[f

e

e

12

following Definition 3.2, each scalar e  [0, 1] is chosen (arbitrarily) to satisfy (cid:1)
e(efe) =
(cid:1)e(fe), and e = (cid:1)e(efe)/(cid:1)e(fe) (if (cid:1)e(fe) = 0, put e = 1). In the second and third lines, we
have rewritten the expression inherited from Lemma 3.5 so that the first sum enjoys a close
connection with the anarchy value (L), our desired upper bound for (G, r, (cid:1)); the second
sum can be regarded as an error term. This error term is nonnegative by Lemma 3.7, so
the inequality

(cid:9)

C(f

) 

[ee + (1  e)](cid:1)e(fe)fe

is valid. By Lemma 3.6, ee + (1  e)  1/(L) for each edge e; thus, the quantities
[ee + (1  e)](cid:1)e(fe)fe and (cid:1)e(fe)fe differ by at most an (L) factor for each edge e.
and f also differ by at most an (L)
Summing over all edges, we find that the costs of f
factor:
C(f )
(cid:1)e(fe)fe
(L)
(L)

(cid:9)

C(f

) 

=

.

e

e

The theorem is proved.

4 Matching Lower Bounds in Simple Networks

With Theorem 3.8 in hand, it is now a relatively easy matter to prove the main results of the
paper. In Subsection 4.1 we prove that, for a standard class of latency functions that contains
the constant functions, the worst possible value of (G, r, (cid:1)) for a multicommodity instance
(G, r, (cid:1)) is realized (up to an arbitrarily small additive factor) by a single-commodity instance
on a two-node, two-link network. In Subsection 4.2, we prove that under significantly weaker
conditions on the class of allowable latency functions, the worst-case -value is achieved
(again, up to an arbitrarily small factor) by a single-commodity instance on a network of
parallel links. We show in Subsection 4.3 that worst-case examples are simple for still broader
classes of latency functions, including the queueing delay functions mentioned in Section 1.

4.1 Lower Bounds in Two-Link Networks

We begin by formalizing an argument of the previous section; the following lemma is essen-
tially a restatement of Definitions 3.2 and 3.3.

Lemma 4.1 Let G2 denote the graph with one source vertex, one sink vertex, and two edges
directed from source to sink. Let L denote a standard class of latency functions containing
the constant functions, with anarchy value (L). If I2 denotes the set of all single-commodity
instances with underlying network G2 and latency functions in L, then

(G2, r, (cid:1))  (L).

sup

(G2,r,(cid:2))I2

Combining Theorem 3.8 and Lemma 4.1, we find that the price of anarchy with respect
to a class of latency functions containing the constant functions is independent of the class
of allowable network topologies, with the two-node, two-link networks of Figure 2 always
furnishing worst-case examples.

13

s

t

Figure 2: Worst-case networks for standard classes of latency functions that include the
constant functions.

Theorem 4.2 Let G2 denote the graph with one source vertex, one sink vertex, and two
edges directed from source to sink. Let L be a standard class of latency functions containing
the constant functions. If I denotes the set of all instances with latency functions in L and
I2  I the single-commodity instances with underlying network G2, then

sup

(G2,r,(cid:2))I2

(G2, r, (cid:1)) = (L) = sup
(G,r,(cid:2))I

(G, r, (cid:1)).

4.2 Lower Bounds in Networks of Parallel Links

We now relax the assumption that the class of allowable latency functions contains all of the
constant functions, and assume instead a much weaker condition that we call diversity.
Definition 4.3 A class L of latency functions is diverse if for each positive scalar c > 0
there is a latency function (cid:1)  L satisfying (cid:1)(0) = c.

For any class of latency functions that is closed under multiplication by positive scalars2,

diversity merely asserts that some latency function is positive when evaluated at 0.

We next show that networks of parallel links always provide worst-case examples of the
inefficiency of selfish routing with respect to a standard diverse class of allowable latency
functions.

Lemma 4.4 Let Gm denote the graph with one source vertex, one sink vertex, and m edges
directed from source to sink. Let L be a standard and diverse class of latency functions with
anarchy value (L). If Im denotes the set of all single-commodity instances with underlying
network Gm and latency functions in L, then

(G, r, (cid:1))  (L).

sup

(G,r,(cid:2))mIm

Proof. We will assume that (L) is finite, and will leave the straightforward modifications
necessary for the (L) = + case to the interested reader.

2Since a scalar multiplication of the latency functions can be effected merely by changing the units in

which we measure latency, we expect many classes of interest to satisfy this property.

14

s

t

Figure 3: Worst-case networks for standard diverse classes of latency functions. The number
of parallel links can be arbitrarily large.

2(r) = (cid:1)2(r) so that [ + (1  )]

Roughly speaking, the proof idea is to reduce the lemma to the previous case of a class
of latency functions containing the constant functions. We compensate for the absence of a
constant function (cid:1)(x) = c (which need not lie in L) by simulating it with many parallel
links endowed with latency functions satisfying (cid:1)(0) = c.
For any  > 0, choose a nonzero latency function (cid:1)2  L, a positive number r > 0
1 
with (cid:1)2(r) > 0, and a scalar   [0, 1] satisfying (cid:1)
(L) /2, where  = (cid:1)2(r)/(cid:1)2(r). By the definition of the anarchy value, these parameter
choices correspond to an instance in a two-node, two-link network with traffic rate r, latency
functions (cid:1)1(x) = (cid:1)2(r) and (cid:1)2, and -value at least (L)  /2. This bad instance is not
immediately useful to us because the constant latency function (cid:1)1(x) = (cid:1)2(r) need not lie
in L. We will transform this bad instance into one with equally large -value and latency
functions in L by simulating the troublesome constant function (cid:1)1 with parallel edges, all
possessing a latency function (cid:1)  L satisfying (cid:1)(0) = (cid:1)2(r).
The class L is diverse, so there is a function (cid:1)  L with the property that (cid:1)(0) = (cid:1)2(r).
m1 )  (cid:1)2(r) +  where  is a sufficiently small positive number
(1)r
Let m be so large that (cid:1)(
(depending on ) to be chosen later; existence of the integer m follows from continuity of (cid:1)
at 0. Define an instance on the network Gm of m parallel links with traffic rate r, latency
function (cid:1)2 on the last link, and latency function (cid:1) on the first m 1 links. The total latency
incurred by the Nash flow is (cid:1)2(r)r (all flow is routed on the last link). By our choice of m,
the flow routing r units of flow on the last link and (1  )r/(m  1) units of flow on each
of the first m  1 links has cost at most (cid:1)2(r)r[ + (1  ) + 1
]; choosing  sufficiently
small, we obtain an instance with -value at least (L)  . Since  > 0 was arbitrary, the
lemma follows.

(cid:2)2(r)

Theorem 3.8 and Lemma 4.4 together imply that, assuming only that the class of al-
lowable latency functions is standard and diverse, the worst-case inefficiency of Nash flows
occurs in networks of parallel links (see Figure 3).

Theorem 4.5 Let Gm denote the graph with one source vertex, one sink vertex, and m edges
directed from source to sink. Let L be a standard and diverse class of latency functions. If
I denotes the set of all single-commodity instances with latency functions in L and Im  I

15

s

t

Figure 4: Worst-case networks for standard inhomogeneous classes of latency functions. The
number of paths and the number of edges in each path can be arbitrarily large.

the instances with underlying network Gm, then

sup

(G,r,(cid:2))mIm

(G, r, (cid:1)) = (L) = sup
(G,r,(cid:2))I

(G, r, (cid:1)).

Remark 4.6 The conclusion of the theorem is false with mIm replaced by I2 (for a coun-
terexample, take L = {(cid:1)(x) = x}  {(cid:1)(x) = a(1 + x) : a > 0}). The conclusion of the
theorem is also false when the class of allowable latency functions need not be diverse (for a
counterexample, take L = {(cid:1)(x) = 1 + x}).

4.3 Lower Bounds in Networks of Disjoint Paths

In this subsection we give our third and final result stating that worst-case examples for
selfish routing are always simple. We will replace the hypothesis of diversity (Definition 4.3)
with the still weaker condition that some available latency function is positive when evaluated
with zero congestion. Our motivation is not generalization for its own sake; as we will see
in Section 5, classes of latency functions common to networking applications need not be
diverse.
In addition to characterizing worst-possible network topologies for such function
classes, the results of this subsection are essential for computing the price of anarchy with
respect to these classes (a task we undertake in Section 5).

As in the previous subsection, we begin with a definition.

Definition 4.7 A class L of latency functions is homogeneous if (cid:1)(0) = 0 for all (cid:1)  L and
inhomogeneous otherwise.

It is clear that a diverse class of latency functions is inhomogeneous, but that the converse
need not hold.

Call a network a union of paths if it can be obtained from a network of parallel links by
repeated edge subdivisions (see Figure 4). We will show that unions of paths provide worst-
case examples for the inefficiency of Nash flows with respect to a standard inhomogeneous
class of latency functions.

16

Lemma 4.8 Let L be a standard and inhomogeneous class of latency functions with anarchy
value (L). If Iu denotes the set of all single-commodity instances with underlying network
a union of paths and latency functions in L, then

(G, r, (cid:1))  (L).

sup

(G,r,(cid:2))Iu

Proof. Let L be a standard inhomogeneous class of allowable latency functions. We again
assume for simplicity that (L) is finite. As in the proof of Lemma 4.4, the idea is to work
with a richer class of latency functions and then argue that any latency function in the class
can be simulated with a collection of edges all possessing latency functions in L.
Let L denote the closure of L under multiplication by positive scalars, so that L = {(cid:1) :
(cid:1)  L,  > 0}. Since L is standard and inhomogeneous, L is standard and diverse. Moreover,
since (cid:1) and (cid:1) have equal anarchy value for any standard latency function (cid:1) and any  > 0
(see Definition 3.2), (L) = (L). For arbitrary  > 0, Lemma 4.4 then assures us of a
single-commodity instance (G, r, (cid:1)) on a network G of parallel links with latency functions
in L and -value at least (L)  /2. We next transform this instance into one on a union
of paths with latency functions in L and -value at least (L)  .
For each edge e of G, write (cid:1)e = e(cid:1)e for e > 0 and (cid:1)e  L. The ratio  is a continuous
function of each scalar e (holding the network G and the traffic rate r fixed), so we may
replace each e by a sufficiently close positive rational number e to obtain a new instance
with -value at least (L)  . Clearing denominators, we may assume that each scalar e
is a positive integer (multiplying all latency functions of an instance by a common positive
number does not affect its -value).

The rest of the proof consists of observing that integral multiples of latency functions
can be simulated with a path of edges, all possessing the original latency function. More
precisely, define G by replacing each edge e of G by a directed path of e new edges, each
endowed with latency function (cid:1)e. Since G is a network of parallel links, G is a union
of paths. It is straightforward to check that the natural bijective correspondence between
flows feasible for (G, r, (cid:1)) and flows feasible for (G, r, (cid:1)) preserves both equilibria and total
latency; therefore, (G, r, (cid:1))  (L)  . Since  > 0 is arbitrary, the lemma is proved.

By Theorem 3.8 and Lemma 4.8, worst-case examples for a inhomogeneous standard class

of allowable latency functions occur in networks that are unions of paths.
Theorem 4.9 Let L be a standard and inhomogeneous class of latency functions, I the set
of instances with latency functions in L and Iu  I the single-commodity instances with
underlying network a union of paths. Then

sup

(G,r,(cid:2))Iu

(G, r, (cid:1)) = (L) = sup
(G,r,(cid:2))I

(G, r, (cid:1)).

Remark 4.10 The conclusion of Theorem 4.9 fails if the set Iu of instances with underlying
network a union of paths is replaced by the smaller set of instances defined on networks
of parallel links.
It also fails if the hypothesis of inhomogeneity is omitted, as a result
of Roughgarden and Tardos [26, Cor 4.2] implies that any instance (G, r, (cid:1)) with latency
functions in the homogeneous class L = {ax : a > 0} satisfies (G, r, (cid:1)) = 1 < 4/3 = (L).

17

We do not know if the assumption that the function class is standard can be omitted. We
leave open the problems of characterizing worst-case examples and computing the price of
anarchy for classes of latency functions that fail to satisfy these two hypotheses.

5 Computing the Price of Anarchy

The past two sections have been devoted to finding simple examples that exhibit worst-
possible losses due to selfish routing. One consequence of this work, Theorem 4.9, is that
the price of anarchy (the largest ratio between the costs of the Nash and optimal flows) with
respect to any standard inhomogeneous class L of allowable latency functions is nothing
more than the anarchy value (L) of Definition 3.3. This provides a general reduction from
a combinatorial problem (finding a worst-case example among all possible multicommodity
flow instances) to a much simpler analytical one (finding the nastiest latency function in a
given class), which in turn permits the computation of the price of anarchy for many different
function classes. In this section, we give three illustrative examples of such computations, and
determine the price of anarchy for degree-bounded polynomials, delay functions of M/M/1
queues, and delay functions of M/G/1 queues. It will be obvious that other function classes
can be treated in a similar way.

5.1 The Price of Anarchy for Polynomial Latency Functions
For a positive integer p, let Lp denote the set of polynomials with nonnegative coefficients
and degree at most p. As the first showcase for our machinery, we next compute the price
of anarchy with respect to latency functions Lp.
Proposition 5.1 If Ip is the set of instances with latency functions in Lp, then

(cid:5)

.

(cid:3) p

ln p

(G, r, (cid:1)) = [1  p  (p + 1)

(p+1)/p]

1 = 

sup

(G,r,(cid:2))Ip

(cid:1)e(x) =

(cid:2)p

Proof. Since Lp is standard and contains the constant functions, Theorem 4.2 implies that
the price of anarchy is simply the anarchy value of Lp. We claim that it suffices to compute
one term, namely (cid:11)Lp  {axi
the anarchy value of the smaller function class consisting of functions of Lp comprising only
: a  0, i  {0, 1, 2, . . . , p}}. This claim is valid because
instance with latency functions in (cid:11)Lp by replacing an edge e of G with latency function
an instance (G, r, (cid:1)) with latency functions in Lp can be transformed into an equivalent
latency function (cid:11)(cid:1)e,i(x) = aixi.3
(cid:11)Lp (recall Definition 3.2). If i = 0 then ((cid:1)) = 1; otherwise, (cid:1)

We next compute the anarchy value ((cid:1)) of an arbitrary nonzero function (cid:1)(x) = axi of
is strictly increasing and
In this case, for r > 0 we have
3This maneuver illustrates a general principle: if L is the cone generated by a (possibly infinite) class of
latency functions S (i.e., L is all finite affine combinations of functions in S), then the price of anarchy with
respect to S and the price of anarchy with respect to L are equal.

i=0 aixi by a directed path of p + 1 edges, with the ith edge of the path possessing

the scalar  is uniquely determined by the choice of r.

18

1/i, hence  = i = (i + 1)

(i+1)/i + (1 (i +
 = (i + 1)
1/i)]
1. Since this expression is independent of r > 0, we obtain
on [0, p] (as shown by a simple derivative test), so the functions of (cid:11)Lp with largest anarchy
1)
((cid:1)) = [1  i  (i + 1)
1. This expression is independent of a and is increasing in i

1, hence [ + (1 )]

1 = [(i + 1)

1 = [1 i (i + 1)

(i+1)/i]

(i+1)/i]

sup

(G,r,(cid:2))Ip

value are those of the form axp for a > 0; hence,

(G, r, (cid:1)) = ((cid:11)Lp) = [1  p  (p + 1)

(p+1)/p]

1.

Remark 5.2 A sharp lower bound on the left-hand side of Proposition 5.1 is provided by
the bad examples of Subsection 2.4; the content of the proposition is that no worse example
is possible, even in arbitrary multicommodity flow networks.

5.2 The Price of Anarchy for Delay Functions of M/M/1 Queues
The latency function (cid:1)(x) = (u x)
1 for x < u arises as the (expected) delay function of an
M/M/1 queue4 with service rate (or capacity) u [8]. For this reason, such latency functions
have been extensively studied in the networking literature [2, 10, 11, 13, 16]. These functions
do not directly fit into our framework, since they are defined only on the set [0, u), rather
than on all of [0,). Nevertheless, only minor generalizations of our results are needed to
compute the price of anarchy in this setting.

We will fix two parameters, the largest allowable sum of all traffic rates Rmax and the
smallest allowable edge capacity umin. We will make the strong assumption that Rmax <
umin; we will see that in the absence of this or similar assumptions, price of anarchy is +.
Under this assumption, the restricted domains of the latency functions pose no difficulty;
every feasible flow routes at most Rmax units of flow on every edge and hence has a well-
defined cost.
1 : u  umin} and, for this ex-
ample, redefine the anarchy value ((cid:1)) of a latency function (cid:1) to be ((cid:1)) = supr : 0<rRmax[+
(1 )]
(r) = (cid:1)(r) and  = (cid:1)(r)/(cid:1)(r). The key
difference between this definition and the original definition of anarchy value (Definition 3.2)
is that the range of traffic rates we consider is restricted to lie in (0, Rmax] rather than (0,);
this ensures that the equations defining  and  make sense.

Let L denote the set of latency functions {(cid:1)(x) = (u  x)

1, where  is the unique scalar satisfying (cid:1)

Next, it is straightforward to check that Theorem 4.9 remains valid with our new defi-
nition of anarchy value, provided we only care about the worst-possible value of  achieved
by instances whose sum of all traffic rates is at most Rmax. Since the class L satisfies both
hypotheses of Theorem 4.9, computing the price of anarchy for instances with latency func-
tions in L and sum of all traffic rates at most Rmax reduces to computing the anarchy value
of L. Straightforward calculations, which can be found in [24], then yield the following
proposition.

4By M/M/1, we mean a single queue with Poisson arrivals and exponentially distributed service times [8].

19

Proposition 5.3 If I is the set of instances with latency functions in L and sum of all
traffic rates at most Rmax < umin, then

(cid:12)

(cid:13)

(cid:14)

.

umin

sup

(G,r,(cid:2))I

(G, r, (cid:1)) =

1
1 +
2
Remark 5.4 The class L = {(cid:1)(x) = (u  x)
1 : u  umin} is not diverse, since (cid:1)(0)  1
for all (cid:1)  L. Therefore, Theorems 4.2 and 4.5 are not sufficient to compute the price of
anarchy in this application.

umin  Rmax

As foreshadowed above, the anarchy value of L and hence the worst possible value of
 goes to + as Rmax  umin. This fact was previously noted by Friedman [7]. We can
therefore conclude that selfish routing is, in the worst case, quite costly in networks with
M/M/1 delay functions.

umin

On the bright side, Proposition 5.3 makes precise the intuition that selfish routing should
not be costly in a lightly loaded network. It is also not hard to extend Proposition 5.3 to
other classes of networks in which our draconian assumption Rmax < umin fails: roughly
speaking, the price of anarchy will remain finite provided Nash flows are guaranteed to leave
some bounded amount of capacity unused on all edges of the network.

Finally, we mention a theorem of Roughgarden and Tardos [26] that suggests a simple
design strategy for combating the inefficiency of selfish routing in congested networks with
M/M/1 delay functions: doubling the capacity of all edges in the network reduces the total
latency of selfish routing as much as routing traffic optimally.

5.3 The Price of Anarchy for Delay Functions of M/G/1 Queues

As a final example, we extend the preceding analysis to queues that need not have exponen-
tially distributed service timesthat is, to M/G/1 delay functions (we retain our assump-
tions of a single queue and Poisson arrivals). Our solution will not be as clean as in the
M/M/1 case, but will demonstrate that our techniques for computing the price of anarchy
remain useful even for relatively complex classes of allowable latency functions.

Recall that if a queue service distribution (specifying the number of customers served
in a time step) has finite expectation  and finite standard deviation , then the expected
waiting time with Poisson arrivals with rate  <  is

1
 +

(1 + 22)
2(  )

;

see [8] or [9] for a derivation. To rephrase this formula in our usual notation, we view the
parameter  as the edge capacity u and the Poisson rate  as the amount of traffic assigned
to an edge; we are then interested in latency functions (cid:1) of the following form:

(cid:1)(x) =

1
u +

x(1 + 2u2)
2u(u  x)

.

As in the M/M/1 case, to achieve an interesting result we will need to assume a minimum
allowable capacity umin and a maximum allowable sum of all traffic rates Rmax < umin.

20

The anarchy value of such a function can be computed by the same method as for the
M/M/1 case. After some (tedious) calculations and an application of Theorem 4.9, we obtain
the following proposition.
Proposition 5.5 Let L be a nonempty collection of M/G/1 delay functions with expected
service rate at least umin. Then, the price of anarchy for instances with latency functions in
L and sum of all traffic rates at most Rmax < umin is precisely
(cid:2) u2
2u(cid:2) + Rmax(2

(cid:2)  1)

(cid:13)

(cid:12)

(cid:14)

u(cid:2)(u(cid:2)  Rmax))(2
(cid:2)  1)
(cid:2) u2

sup
(cid:2)L

1 +

u(cid:2)

u(cid:2)  Rmax

4u(cid:2) + (u(cid:2) + Rmax (cid:1)

where u(cid:2) and (cid:2) denote the expectation and standard deviation of the service rate distribution
associated with (cid:1).

In the absence of additional assumptions on the class L, we cannot simplify the expression
of Proposition 5.5 further; this reflects the relative complexity of M/G/1 delay functions,
which are specified by two independent parameters u(cid:2) and (cid:2) (unlike the simpler M/M/1
case). On the other hand, reducing the computation of the price of anarchy to computing
the expression of Proposition 5.5 is both nontrivial and useful. When the class L possesses
structure beyond merely being some collection of M/G/1 delay functions, the expression of
Proposition 5.5 may become simple and transparent (as in the special case of M/M/1 delay
functions, where (cid:2)u(cid:2) = 1 for all (cid:1)). Even for classes for which no analytical simplification is
possible, Proposition 5.5 should permit the approximate (if not exact) computation of the
price of anarchy with respect to L by straightforward numerical methods. In the simplest
case where L is finite and not astronomically largeand we suspect almost all classes of
M/G/1 delay functions can be closely approximated by such an Lthe price of anarchy can
be computed simply by enumeration.

We emphasize that without the assurance provided by our previous work that simple
network topologies always provide worst-case examples, such an enumerative approach to
computing the price of anarchy would be unthinkable.

6 Conclusion

We have studied the worst-possible degradation in network performance due to selfish rout-
ing, as quantified by the price of anarchy, the ratio of the total latency incurred by a flow
at Nash equilibrium and by a minimum-latency flow. The price of anarchy is unbounded
unless the class of allowable edge latency functions is restricted, a fact that motivated our
investigation of the price of anarchy with respect to a fixed but arbitrary class of latency
functions. Our work has two related aspects: we have shown that worst-case examples for
selfish routing always occur in simple network topologies, and we have used this fact to give
a general technique for computing the price of anarchy with respect to an arbitrary class
of latency functions. While the precise description of worst-case examples depends on the
hypotheses placed on the class L of allowable latency functions (see Table 2 for a summary),
the price of anarchy is always, under the very weak assumptions that L is standard and
inhomogeneous, the anarchy value (L) of Definition 3.3.

21

Class of allowable latency functions
Standard, includes constant functions
Standard, diverse
Standard, inhomogeneous

Worst-case examples

two-node, two-link networks

networks of parallel links

unions of paths

Price of anarchy

(L)
(L)
(L)

Table 2: Summary of main results, as stated in Theorems 4.2, 4.5, and 4.9. The expression
(L) denotes the anarchy value of a class L of latency functions, see Definition 3.3. A class
L is standard if x  (cid:1)(x) is convex for all (cid:1)  L, is diverse if {(cid:1)(0) : (cid:1)  L}  (0,), and is
inhomogeneous if {(cid:1)(0) : (cid:1)  L} (cid:7)= {0}.

In addition to characterizing worst-case examples and giving methods to compute the
price of anarchy, our work demonstrates that the worst-possible consequences of selfish rout-
ing always have a simple, transparent explanation: flows at Nash equilibrium are inefficient
because selfish users cannot resist overcongesting a route that is beneficial when used in
moderation. We saw in Subsection 2.4 that this phenomenon occurs even in two-node, two-
link networks, and is an obvious obstruction to selfish users achieving global optimality; our
results imply that additional complications do not arise in arbitrary multicommodity flows
networks.5

As discussed in Section 1, our central theorem stating that worst-case examples always
occur in the simplest of networks is provably false in several related models of selfish routing,
including models with other objective functions and models in which network users carry
more than a negligible fraction of the overall traffic. It is therefore natural to ask: what are
the properties of a selfish routing model that permit such a succinct explanation of the
worst-case consequences of selfish behavior? Are there other natural classes of noncooper-
ative games in which simple games always provide worst-case examples? We expect future
work on these questions to guide us to a deeper understanding of selfish behavior in a variety
of game-theoretic contexts.

Acknowledgements
We thank Amir Ronen for substantially simplifying our original proof of Theorem 3.8,  Eva
Tardos for helpful discussions and for suggestions on an earlier draft of this paper, and the
anonymous referees for their comments.

References

[1] M. Beckmann, C. B. McGuire, and C. B. Winsten. Studies in the Economics of Trans-

portation. Yale University Press, 1956.

[2] D. P. Bertsekas and R. Gallager. Data Networks. Prentice-Hall, 1992. Second Edition.

5While worst-case examples occur in networks somewhat more complicated than those with two nodes
and two links when edges cannot possess constant latency functions, the qualitative explanation for the
inefficiency of selfish routing in such examples remains the same.

22

[3] A. Czumaj, P. Krysta, and B. V ocking. Selfish traffic allocation for server farms. In
Proceedings of the 34th Annual ACM Symposium on the Theory of Computing, pages
287296, 2002.

[4] A. Czumaj and B. V ocking. Tight bounds for worst-case equilibria. In Proceedings of

the 13th Annual Symposium on Discrete Algorithms, pages 413420, 2002.

[5] S. C. Dafermos and F. T. Sparrow. The traffic assignment problem for a general network.
Journal of Research of the National Bureau of Standards, Series B, 73B(2):91118, 1969.

[6] P. Dubey. Inefficiency of Nash equilibria. Mathematics of Operations Research, 11(1):1

8, 1986.

[7] E. J. Friedman. A generic analysis of selfish routing. Working paper, 2001.

[8] D. Gross and C. M. Harris. Queueing Theory. Wiley, 1998. Third Edition.

[9] S. Karlin and H. M. Taylor. A Second Course in Stochastic Processes. Academic Press,

1981.

[10] Y. A. Korilis, A. A. Lazar, and A. Orda. Capacity allocation under noncooperative

routing. IEEE Transactions on Automatic Control, 42(3):309325, 1997.

[11] Y. A. Korilis, A. A. Lazar, and A. Orda. Avoiding the Braess paradox in noncooperative

networks. Journal of Applied Probability, 36(1):211222, 1999.

[12] E. Koutsoupias and C. Papadimitriou. Worst-case equilibria. In Proceedings of the 16th
Annual Symposium on Theoretical Aspects of Computer Science, pages 404413, 1999.

[13] A. A. Lazar, A. Orda, and D. E. Pendarakis. Virtual path bandwidth allocation in

multiuser networks. IEEE/ACM Transactions on Networking, 5:861871, 1997.

[14] L. Libman and A. Orda. Atomic resource sharing in noncooperative networks. Telecom-

munication Systems, 17(4):385409, 2001. Preliminary version in INFOCOM 97.

[15] M. Mavronicolas and P. Spirakis. The price of selfish routing. In Proceedings of the 33rd

Annual ACM Symposium on the Theory of Computing, pages 510519, 2001.

[16] A. Orda, R. Rom, and N. Shimkin. Competitive routing in multi-user communication

networks. IEEE/ACM Transactions on Networking, 1:510521, 1993.

[17] G. Owen. Game Theory. Academic Press, 1995. Third Edition.

[18] C. Papadimitriou. Algorithms, games, and the Internet.

In Proceedings of the 33rd

Annual ACM Symposium on the Theory of Computing, pages 749753, 2001.

[19] A. C. Pigou. The economics of welfare. Macmillan, 1920.

[20] A. Rapoport and A. M. Chammah. Prisoners Dilemma. University of Michigan Press,

1965.

23

[21] T. Roughgarden. The price of anarchy for the maximum latency of selfish routing.

Unpublished.

[22] T. Roughgarden. Designing networks for selfish users is hard.

In Proceedings of the

42nd Annual Symposium on Foundations of Computer Science, pages 472481, 2001.

[23] T. Roughgarden. Stackelberg scheduling strategies. In Proceedings of the 33rd Annual

ACM Symposium on the Theory of Computing, pages 104113, 2001.

[24] T. Roughgarden. Selfish Routing. PhD thesis, Cornell University, 2002.

[25] T. Roughgarden and  E. Tardos. Bounding the inefficiency of equilibria in nonatomic

congestion games. Technical Report TR2002-1866, Cornell University, 2002.

[26] T. Roughgarden and  E. Tardos. How bad is selfish routing?

Journal of the ACM,

49(2):236259, 2002. Preliminary version in FOCS 00.

[27] W. Rudin. Principles of Mathematical Analysis. McGraw-Hill, 1976. Third Edition.

[28] A. S. Schulz and N. Stier Moses. Performance of user equilibria in traffic networks. In

Proceedings of the 14th Annual Symposium on Discrete Algorithms, 2003. To appear.

[29] R. E. Tarjan. Data Structures and Network Algorithms. SIAM, 1983.

[30] A. Vetta. Nash equilibria in competitive societies, with applications to facility loca-
In Proceedings of the 43rd Annual Symposium on

tion, traffic routing and auctions.
Foundations of Computer Science, 2002. To appear.

[31] J. G. Wardrop. Some theoretical aspects of road traffic research. In Proceedings of the

Institute of Civil Engineers, Pt. II, volume 1, pages 325378, 1952.

24

