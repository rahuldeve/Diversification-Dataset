Balanced Binary Trees

With pictures by John Morris (ciips.ee.uwa.edu.au/~morris)

Reminders about Trees

A binary tree is a tree with exactly two sub-trees for each node, called the left and right sub-trees.

A binary search tree is a binary tree where, for each node m,
the left sub-tree only has nodes with keys smaller than (according to some total order) the key of m,
while the right sub-tree only has nodes with keys larger than the key of m.

The height of a tree is the number of nodes on its longest branch (a path from the root to a leaf).

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 1 of 11

Observations

The search time in a binary search tree depends on the form of the tree,
that is on the order in which its nodes were inserted.

A pathological case: The n nodes were inserted by increasing order on the keys,
yielding something like a linear list (but with a worse space consumption), with O(n) search time.

Node search, insertion, deletion, ... all take time proportional to the height of the binary search tree.
The height h of a binary tree of n nodes is such that log2n < h  n.
The height of a randomly built binary search tree of n nodes is O(log2n).

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 2 of 11

Observations

(continued)

In practice, one can however not always guarantee that binary search trees are built randomly.
Binary search trees are thus only interesting if they are relatively complete.

So we must look for specialisations of binary search trees whose worst-case performance
on the basic tree operations can be guaranteed to be good, that is O(log2n) time.

A balanced tree is a tree where every leaf is not more than a certain distance away
from the root than any other leaf.

The various balancing schemes give actual definitions for not more than a certain distance
and require different efforts to keep the trees balanced:

 AVL trees

 Red-black trees.

Inserting into, and deleting from, a balanced binary search tree involves transforming the tree
if its balancing property  which is to be kept invariant  is violated.
These re-balancing transformations should also take O(log2n) time, so that the effort is worth it.
These transformations are built from operators that are independent from the balancing scheme.

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 3 of 11

Operations on Binary Trees
A walk of a tree is a way of visiting each of its nodes exactly once. For binary trees,
we distinguish preorder walk (visit the root, then the left sub-tree, and last the right sub-tree),
inorder walk (left, root, right), and postorder walk (left, right, root).
Remark: The inorder walk of a binary search trees gives its nodes in sorted (increasing) key order.
A rotation of a binary tree transforms it so that its inorder-walk key ordering is preserved.
We distinguish left rotation and right rotation:

inorder walk = A x B y C

preorder walk = y x A B C
postorder walk = A B x C y

preorder walk = x A y B C
postorder walk = A B C y x

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 4 of 11

Definition

AVL Trees

Named after their inventors  G.M. Adelson-Velskii and E.M. Landis (USSR) 
AVL trees were the first dynamically balanced trees to be proposed, namely in 1962.
They are not perfectly balanced, but maintain O(log2n) search, insertion, and deletion times,
when n is the number of nodes in the tree.

An AVL tree is a binary search tree where the sub-trees of every node differ in height by at most 1.

and conversely, when the left and right sub-trees are exchanged,

or when both are of height h - 1

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 5 of 11

Two Examples and One Counter-Example



Let us annotate each node with a balance factor:
 when the tree rooted at this node is stable
when the tree rooted at this node is left-heavy
+ when the tree rooted at this node is right-heavy
- when the tree rooted at this node is left-unbalanced
++ when the tree rooted at this node is right-unbalanced

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 6 of 11

-
-
What Performance Can We Expect from AVL Trees?
Key question: What is the maximal height hmax(n) of an AVL tree with n nodes?
Conversely: What is the minimal number of nodes nmin(h) of an AVL tree of height h?
The latter question is easier to answer!

nmin(0) = 0
nmin(1) = 1
nmin(h) = 1 + nmin(h - 1) + nmin(h - 2), when h >1

Compare this with the Fibonacci series:

1
1
1

0
h
nmin(h) 0
0
fib(h)

2
2
1
Hence: nmin(h) = fib(h +2) - 1.
Conversely, the maximal height hmax(n) of an AVL tree with n nodes is the largest h such that:

(Homework: Prove this!)

6
20
8

7
33
13

8
54
21

...
...
...

3
4
2

4
7
3

5
12
5

fib(h +2) - 1  n
which simplifies into hmax(n)  1.44 log2(n +1) - 1.33
so that search in an AVL tree indeed takes O(log2n) time!

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 7 of 11

Insertion into AVL Trees
How to insert  in O(log2n) time  a node into an AVL tree such that it remains an AVL tree?
After locating the insertion place and performing the insertion, there are three cases:

(1) The tree remains balanced (, -
(2) A tree was left-heavy (- ) and became left-unbalanced (-
(3) A tree was right-heavy (+) and became right-unbalanced (++): symmetric to the second case.

, or +): do nothing.

- ): see below.

Regarding case (2), there are two sub-cases:

 The left sub-tree became left-heavy: right-rotate the left sub-tree to the root.

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 8 of 11

Example:

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 9 of 11

 The left sub-tree became right-heavy: first left-rotate the right sub-tree of the left sub-tree to its

parent, and then right-rotate the left sub-tree to the root.

Property: An insertion requires re-balancing fi

It does not modify the height of the tree.

Insertion requires at most two walks of the path from the root to the added node,
hence indeed takes O(log2n) time.

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 10 of 11

Conclusion

AVL trees are interesting when:

 the number n of nodes is large (say n  50), and

 the keys are suspected of not appearing randomly, and

 the ratio s / i of searches to insertions is large enough (say s / i  5)

to justify the cost of re-balancing.

Balanced Binary Trees

Pierre Flener, IT Dept, Uppsala University

Page 11 of 11

