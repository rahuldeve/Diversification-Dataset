MINIMUM SPANNING TREE
• Prim-Jarnik algorithm
• Kruskal algorithm

1500

SEA

MSN

800
SFO

PVD

1000

800

400

1800

LAX

LGA
STL 1200

400
1500

DFW
1000

Minimum Spanning Tree

1500
MIA

1

Minimum Spanning Tree
• spanning tree of minimum total weight
• e.g., connect all the computers in a building with the
least amount of cable
• example
SEA

1500
MSN

800
SFO
400
LAX

1000

PVD
200

800
1800
1500

1200
STL

LGA
1500

400
DFW

MIA

1000

• not unique in general
SEA

1500
MSN

800
SFO
400
LAX

1000

PVD
200

800
1800
1500

1200
STL

LGA
1500

400
DFW

MIA

1000
Minimum Spanning Tree

2

Prim-Jarnik Algorithm
• similar to Dijkstra’s algorithm
• grows the tree T one vertex at a time
• cloud covering the portion of T already computed
• labels D[v] associated with vertex v
• if v is not in the cloud, then D[v] is the minimum
weight of an edge connecting v to the tree
2704

BOS

867
849

ORD

1464

1391

1464

1258

BWI
1090

DFW
LAX

JFK

144

184

802

SFO
337

187
740
621

1846

PVD

946

1235

1235

1121
MIA
2342

Minimum Spanning Tree

946
3

Example
∞
2704

∞

849
ORD

337

1391

1464
DFW

LAX

1235

∞

∞

∞

∞

1258

BWI
1090
946

1121
MIA
2342

Minimum Spanning Tree

JFK

∞

144

184

802

SFO

PVD
187

740
621

1846

∞

BOS

867

∞

4

Pseudo Code
Algorithm PrimJarnik(G):
Input: A weighted graph G.
Output: A minimum spanning tree T for G.
pick any vertex v of G
{grow the tree starting with vertex v}

T ← {v}
D[u] ← 0
E[u] ← ∅
for each vertex u ≠ v do
D[u] ← +∞
let Q be a priority queue that contains all the
vertices using the D labels as keys
while Q ≠ ∅ do
{pull u into the cloud C}

u ← Q.removeMinElement()
add vertex u and edge (u,E[u]) to T
for each vertex z adjacent to u do
if z is in Q
{perform the relaxation operation on edge (u, z) }

if weight(u, z) < D[z] then
D[z] ← weight(u, z)
E[z] ← (u, z)
change the key of z in Q to D[z]
return tree T
Minimum Spanning Tree

5

Running Time
T ← {v}
D[u] ← 0
E[u] ← ∅
for each vertex u ≠ v do
D[u] ← +∞
let Q be a priority queue that contains all the
vertices using the D labels as keys
while Q ≠ ∅ do
u ← Q.removeMinElement()
add vertex u and edge (u,E[u]) to T
for each vertex z adjacent to u do
if z is in Q
if weight(u, z) < D[z] then
D[z] ← weight(u, z)
E[z] ← (u, z)
change the key of z in Q to D[z]
return tree T

O((n+m) log n)

Minimum Spanning Tree

6

Kruskal Algorithm
• add the edges one at a time, by increasing weight
• accept an edge if it does not create a cycle

2704

BOS

867
849

ORD

1391

1464

JFK
1258

BWI
1090

DFW
LAX

144

184

802

SFO
337

187
740
621

1846

PVD

946

1235
1121
MIA
2342

Minimum Spanning Tree

7

Data Structure for Kruskal
Algortihm
• the algorithm maintains a forest of trees
• an edge is accepted it if connects vertices of distinct
trees
• we need a data structure that maintains a partition,
i.e.,a collection of disjoint sets, with the following
operations
- find(u): return the set storing u
- union(u,v): replace the sets storing u and v with
their union
2704

BOS

867
849

ORD

1391

1464

144
1258

BWI
1090

DFW
LAX

JFK
184

802

SFO
337

187
740
621

1846

PVD

946

1235
1121
MIA
2342

Minimum Spanning Tree

8

Representation of a Partition
• each set is stored in a sequence
• each element has a reference back to the set

A
9

3

6

2

• operation find(u) takes O(1) time
• in operation union(u,v), we move the elements of the
smaller set to the sequence of the larger set and
update their references
• the time for operation union(u,v) is min(nu,nv),
where nu and nv are the sizes of the sets storing u
and v
• whenever an element is processed, it goes into a set
of size at least double
• hence, each element is processed at most log n times
Minimum Spanning Tree

9

Pseudo Code
Algorithm Kruskal(G):
Input: A weighted graph G.
Output: A minimum spanning tree T for G.
let P be a partition of the vertices of G, where each
vertex forms a separate set
let Q be a priority queue storing the edges of G and
their weights
T←∅
while Q ≠ ∅ do
(u,v) ← Q.removeMinElement()
if P.find(u) ≠ P.find(u) then
add edge (u,v) to T
P.union(u,v)
return T

Running time: O((n+m) log n)
Minimum Spanning Tree

10

