Hashing & Hash Tables
Hashing & Hash Tables

Cpt S 223. School of EECS, WSU

111111

Overview

 Hash Table Data Structure : Purpose

 To support insertion, deletion and search in 

average-case constant time

t tti

 Assumption: Order of elements irrelevant
 ==> data structure *not* useful for if you want to 
maintain and retrieve some kind of an order of the 
elements

ki d f

i t i

f th

t i

d

d

 Hash function

 Hash[ string key] ==> integer value

 Hash table ADT

 Implementations, Analysis, Applications

i A li

A l

t ti

ti

I

l

Cpt S 223. School of EECS, WSU

22222

Hash table: Main components

key

value

Hash index

john

key
key

h(john)

Hash 
function

i

e
e
z
S
e
b
a
T

l

How to determine ... ?

Cpt S 223. School of EECS, WSU

Hash table
(implemented as a vector)

3

Hash Table

 Hash table is an array of fixed 

size TableSize

 Array elements indexed by a 
key, which is mapped to an 
array index (0...TableSize-1)

 Mapping (hash function) h
 Mapping (hash function) h 

from key to index
 E.g., h(john) = 3

key

Element value

Cpt S 223. School of EECS, WSU

4

Hash Table Operations

 Insert

Hash key

Hash 
f
function
ti

 T [h(john)] = <john,25000>

 Delete

 T [h(john)] = NULL
 T [h( john )] = NULL

Data 
record

 Search

 T [h(john)] returns the 
element hashed for john

What happens if h(john) == h(joe) ?
What happens if h( john ) == h( joe ) ?

collision

Cpt S 223. School of EECS, WSU

5

Factors affecting Hash Table 
Design

 Hash function

 Table size
y

 Usually fixed at the start

 Collision handling scheme
Collision handling scheme

Cpt S 223. School of EECS, WSU

6

Hash Function

 A hash function is one which maps an 

elements key into a valid hash table index
 h(key) => hash table index

Note that this is (slightly) different from saying: 

h(string) => int
Because the key can be of any type
 Because the key can be of any type
 E.g., h(int) => int  is also a hash function!

 But also note that any type can be converted into 

y yp
an equivalent string form

Cpt S 223. School of EECS, WSU

7

h(key) ==> hash table index

Hash Function Properties

 A hash function maps key to integer

 Constraint: Integer should be between 

[0, TableSize-1]

 A hash function can result in a many-to-one mapping 

(causing collision)
(causing collision)
 Collision occurs when hash function maps two or more keys 

to same array index
t b

 Collisions cannot be avoided but its chances can be 

h
C lli i
reduced using a good hash function

id d b t it

b

Cpt S 223. School of EECS, WSU

8

h(key) ==> hash table index

Hash Function Properties

 A good hash function should have the 

properties:
properties:
1. Reduced chance of collision

Different keys should ideally map to different
Different keys should ideally map to different 
indices
Distribute keys uniformly over table 

2. Should be fast to compute

Cpt S 223. School of EECS, WSU

99

Hash Function - Effective use 
of table size

 Simple hash function (assume integer keys)

 h(Key) = Key modTableSize

 For random keys, h() distributes keys evenly 

over table
over table
 What if TableSize = 100 and keys are ALL 

multiples of 10?

 Better if TableSize is a prime number

Cpt S 223. School of EECS, WSU

10

Different Ways to Design a 
Hash Function for String Keys

A very simple function to map strings to integers:
 Add up character ASCII values (0-255) to produce 

integer keys
integer keys

 E.g., abcd = 97+98+99+100 = 394
 ==>  h(abcd) = 394 % TableSize 

Potential problems:
Potential problems:
 Anagrams will map to the same index

 h(abcd) == h(dbac)

 Small strings may not use all of table

 Strlen(S) * 255 < TableSize

 Time proportional to length of the string
Time proportional to length of the string

Cpt S 223. School of EECS, WSU

11

Different Ways to Design a 
Hash Function for String Keys

 Approach 2

 Treat first 3 characters of string as base-27 integer (26 

letters plus space)
letters plus space)

 Key = S[0] + (27 * S[1]) + (272 * S[2])
 Better than approach 1 because ... ?

Potential problems:
 Assumes first 3 characters randomly distributed

 Not true of English

Apple
Apply
Appointment
Apricot

pp

collision

Cpt S 223. School of EECS, WSU

12
12

Different Ways to Design a 
Hash Function for String Keys

 Approach 3

Use all N characters of string as an 

N-digit base-K number

g

 Choose K to be prime number 
larger than number of different 
digits (characters)
I.e., K = 29, 31, 37





Sh
)(

L 1
L
1

i



0

iLS
[

]1


If L = length of string S, then


 


 Use Horners rule to compute h(S)
 Limit L for long strings



i mod



TableSize

it L f

37

t i

Li

l

Problems:

potential overflow 
larger runtime

Cpt S 223. School of EECS, WSU

13

Collision resolution techniques

q

T h i
ith
Techniques to Deal with 
Collisions
Collisions

t D l

Chaining
Open addressing
Open addressing
Double hashing
EtcEtc.

Cpt S 223. School of EECS, WSU

14

Resolving Collisions

 What happens when h(k1) = h(k2)?

 ==> collision !
> collision !



 Collision resolution strategies

Chaining
 Chaining
 Store colliding keys in a linked list at the same 

hash table index
hash table index

 Open addressing

 Store colliding keys elsewhere in the table

g

y

Cpt S 223. School of EECS, WSU

15

Ch i
Chaining

i

Collision resolution technique #1

Cpt S 223. School of EECS, WSU

16

Chaining strategy: maintains a linked list at
Chaining strategy: maintains a linked list at 
every hash index for collided elements

Insertion sequence: { 0 1 4 9 16 25 36 49 64 81 }
Insertion sequence: { 0 1 4 9 16 25 36 49 64 81 } 

 Hash table T is a vector of 

linked lists
 Insert element at the head 

(as shown here) or at the tail

 Key k is stored in list at
 Key k is stored in list at 

T[h(k)]

 E.g., TableSize = 10

g
 h(k) = k mod 10
 Insert first 10 perfect 

squares
squares

Cpt S 223. School of EECS, WSU

17

Implementation of Chaining 
Hash Table

Vector of linked lists
(this is the main 
hashtable)

Current #elements in 
the hashtable
the hashtable

Hash functions for 
i
integers and string 
keys

d t i

t

Cpt S 223. School of EECS, WSU

18

Implementation of Chaining 
Hash Table

This is the hashtables 
current capacity
current capacity 
(aka. table size)

This is the hash table 
index for the element 
x
x

Cpt S 223. School of EECS, WSU

19

Duplicate check

Later, but essentially 
resizes the hashtable if its 
getting crowded

Cpt S 223. School of EECS, WSU

20

Each of these
Each of these 
operations takes time 
linear in the length of 
the list at the hashed 
index location

Cpt S 223. School of EECS, WSU

21

All hash objects must 
define == and != 
operators.

Hash function to 
handle Employee 
object type

Cpt S 223. School of EECS, WSU

22

Collision Resolution by 
Chaining: Analysis

 Load factor  of a hash table T is defined as follows:

 N = number of elements in T 
 M = size of T
f T
  = N/M

M

i

(current size)
(t bl
)
(table size)
( load factor)

i

i.e.,  is the average length of a chain



 Unsuccessful search time: O()

 Same for insert time
 Same for insert time

 Successful search time:  O(/2)
 Ideally, want   1 (not a function of N)

Cpt S 223. School of EECS, WSU

23

Potential disadvantages of 
Chaining
Linked lists could get long

 Especially when N approaches M 
 Longer linked lists could negatively impact 
t
l

li k d li t

ld

L
performance

ti

i

More memory because of pointers

Absolute worst-case (even if N << M):
 All N elements in one linked list!
 Typically the result of a bad hash function

Cpt S 223. School of EECS, WSU

24

O
Open Addressing

Add

i

Collision resolution technique #2

Cpt S 223. School of EECS, WSU

25

Collision Resolution by
Open Addressing

An inplace approach

When a collision occurs, look elsewhere in the 

table for an empty slot
 Advantages over chaining
 No need for list structures
 No need to allocate/deallocate memory during 
g

o eed o a oca e/dea oca e

insertion/deletion (slow)

e o y du

 Disadvantages

Slower insertion May need several attempts to find an
 Slower insertion  May need several attempts to find an 
empty slot

 Table needs to be bigger (than chaining-based table) to 

achieve average case constant time performance
achieve average-case constant-time performance

 Load factor   0.5

Cpt S 223. School of EECS, WSU

26

Collision Resolution by
Open Addressing

 A Probe sequence is a sequence of slots in hash table while 

searching for an element x
 h0(x) h1(x) h2(x)
 h0(x), h1(x), h2(x), ...
 Needs to visit each slot exactly once
 Needs to be repeatable (so we can find/delete what weve 

inserted)
inserted)

 Hash function

 hi(x) = (h(x) + f(i)) mod TableSize
 f(0) = 0
 f(i) is the distance to be traveled relative to the 0thprobe 

==> position for the 0th probe

p

( )
position, during the ithprobe.

Cpt S 223. School of EECS, WSU

27

Linear Probingith probe 

index =
index 
 

+ i
+ i
 f(i) = is a linear function of i, 

0th probe 

index

Linear probing:

i

occupied

occupied
occupied

0th
0th probe

b E.g., f(i) = i

1st probe
2nd probe
2 probe

3rd probe

h(x)=(h(x)+i)modTableSize
hi(x) = (h(x) + i) mod TableSize

...

unoccupied

Probe sequence: +0, +1, +2, +3, +4, ... 

Populate x here

Continue until an empty slot is found

#failed probes is a measure of performance

Cpt S 223. School of EECS, WSU

28

ith probe 
index = 

0th probe 

index

+ i

Linear Probing

 f(i) = is a linear function of i, e.g., f(i) = i

 hi(x) = (h(x) + i) mod TableSize

 Probe sequence: +0, +1, +2, +3, +4, ... 

 Example: h(x) = x mod TableSize
 Example: h(x) = x mod TableSize
 h0(89) = (h(89)+f(0)) mod 10 = 9
 h0(18) = (h(18)+f(0)) mod 10 = 8
 h0(49) = (h(49)+f(0)) mod 10 = 9 (X)
 h1(49) = (h(49)+f(1)) mod 10

= (h(49)+ 1 ) mod 10 = 0
= (h(49)+  1 ) mod 10 = 0

Cpt S 223. School of EECS, WSU

29

Linear Probing Example

I
89 18 49 58 69
Insert sequence: 89, 18, 49, 58, 69

t

time

#unsuccessful 
probes:

0

0

1

3

3

Cpt S 223. School of EECS, WSU

7
total

30

Linear Probing: Issues

Probe sequences can get longer with time
Primaryclustering
Primary clustering

 Keys tend to cluster in one part of table
Keys that hash into cluster will be added to
 Keys that hash into cluster will be added to 
the end of the cluster (making it even 
bigger)
bigger)

 Side effect: Other keys could also get 

affected if mapping to a crowded
affected if mapping to a crowded 
neighborhood

Cpt S 223. School of EECS, WSU

31

Linear Probing: Analysis

 Expected number of 

probes for insertion or 
unsuccessful search
unsuccessful search

1



1
2
2






1
2)
)




1(
1(






 Expected number of 
probes for successful 
search






1
)
 )



1
2
2







1(
1(

1



 Example ( = 0.5)

 Insert / unsuccessful 

search
search

 2.5 probes

 Successful search

 1.5 probes

1 5

b

 Example ( = 0.9)

 Insert / unsuccessful 

/

search

 50.5 probes

 Successful search
Successful search

 5.5 probes

Cpt S 223. School of EECS, WSU

32

Random Probing: Analysis

 Random probing does not suffer from 

clustering

 Expected number of probes for insertion or 

unsuccessful search:

l1
1
ln
 1


 Example

  = 0.5: 1.4 probes
  = 0.9: 2.6 probes

Cpt S 223. School of EECS, WSU

33

Linear vs. Random Probing

s
e
e
b
o
r
p
 
#

Linear probing
Random probing

good

bad

U - unsuccessful search
S - successful search
I - insert

Load factor 

Cpt S 223. School of EECS, WSU

34

Quadratic Probing

Quadratic probing:

i

occupied

occupied

occupied

0th probe
1st probe
1st probe

2nd probe

3rd probe

 Avoids primary clustering
 f(i) is quadratic in i
 f(i) is quadratic in i 

e.g., f(i) = i2
h(x)=(h(x)+i2)mod
hi(x) = (h(x) + i) mod 
TableSize
q

 Probe sequence:

+0, +1, +4, +9, +16, ... 

occupied

...
Continue until an empty slot is found

#failed probes is a measure of performance

Cpt S 223. School of EECS, WSU

35

Quadratic Probing

 Avoids primary clustering
 f(i) is quadratic in I e g f(i)=i2
 f(i) is quadratic in I, e.g., f(i) = i

 hi(x) = (h(x) + i2) mod TableSize
 Probe sequence: +0 +1 +4 +9 +16
 Probe sequence: +0, +1, +4, +9, +16, ... 

 Example:

h (58)

(h(58) f(0))

8 (X)
 h0(58) = (h(58)+f(0)) mod 10 = 8 (X)
 h1(58) = (h(58)+f(1)) mod 10 = 9 (X)
 h2(58) = (h(58)+f(2)) mod 10 = 2
2

d 10

h ( 8)

(h( 8) f(2))

d 0

Cpt S 223. School of EECS, WSU

36

Q) Delete(49), Find(69)  - is there a problem?

Quadratic Probing Example

I
89 18 49 58 69
Insert sequence: 89, 18, 49, 58, 69

t

+12
+12

+02

+02

+02

+22

2+02
+12

#unsuccessful 
probes:

0

0

1

2

2

Cpt S 223. School of EECS, WSU

+12

+22

+02

5
total

37

Quadratic Probing: Analysis

 Difficult to analyze
 Theorem 5.1

 New element can always be inserted into a table 
that is at least half empty and TableSize is prime

 Otherwise, may never find an empty slot, 

even is one exists

 Ensure table never gets half full

 If close, then expand it

Cpt S 223. School of EECS, WSU

38

Quadratic Probing

 May cause secondary clustering

 Deletion

 Emptying slots can break probe sequence and 

p y g

q

p

could cause find stop prematurely

 Lazy deletion

Diff

ti t b t

 Differentiate between empty and deleted slot
d d l t d l t
 When finding skip and continue beyond deleted slots
 If you hit a non-deleted empty slot, then stop find procedure 

t

returning not found
returning not found

 May need compaction at some time

Cpt S 223. School of EECS, WSU

39

Quadratic Probing: 
Implementation

Cpt S 223. School of EECS, WSU

40

Quadratic Probing: 
Implementation

Lazy deletion

Cpt S 223. School of EECS, WSU

41

Quadratic Probing: 
Implementation

Ensure table 
size is prime

Cpt S 223. School of EECS, WSU

42

Quadratic Probing: 
Implementation

Find

Skip DELETED;
No duplicates
No duplicates

Quadratic probe 
sequence (really)

Cpt S 223. School of EECS, WSU

43

Quadratic Probing: 
Implementation

Insert

No duplicates
No duplicates

Remove

No deallocation 
needed

Cpt S 223. School of EECS, WSU

44

Double Hashing: keep two 
hash functions h1 and h2
 Use a second hash function for all tries I 

other than 0: 

f(i) = i * h2(x)

 Good choices for h2(x) ?
 Should never evaluate to 0
 h2(x) = R  (x mod R)

 R is prime number less than TableSize
i

l

 Previous example with R=7
ith R 7

P
 h0(49) = (h(49)+f(0)) mod 10 = 9 (X)
 h1(49) = (h(49)+1*(7  49 mod 7)) mod 10 = 6
49 mod 7)) mod 10 = 6

h (49) = (h(49)+1*(7

Cpt S 223. School of EECS, WSU

f(1)

45
45

Double Hashing Example

Cpt S 223. School of EECS, WSU

46

Double Hashing: Analysis

 Imperative that TableSize is prime

 E g insert 23 into previous table
 E.g., insert 23 into previous table

 Empirical tests show double hashing 

close to random hashing
close to random hashing

 Extra hash function takes extra time to 

compute
t

Cpt S 223. School of EECS, WSU

47

Probing Techniques - review

Linear probing:

Quadratic probing:

Double hashing*:

i

i

0th t
0th try

1st try
2nd try
2 try

3rd try

...

0th try
1st try

2nd t
2nd try

i

3rd try
3rd try

...

0th try

2nd try

t

1st try

3rd try

...
...

Cpt S 223. School of EECS, WSU

*(determined by a second
hash function)

48

Rehashing

 Increases the size of the hash table when load factor 

becomes too high (defined by a cutoff)
 Anticipating that prob(collisions) would become 

higher

 Typically expand the table to twice its size (but still
 Typically expand the table to twice its size (but still 

prime)

 Need to reinsert all existing elements into new hash 

table

Cpt S 223. School of EECS, WSU

49

Rehashing Example

h(x) = x mod 7
0 57
 = 0.57


h(x) = x mod 17
0 29
 = 0.29


Insert 23

Rehashing

 = 0.71

Cpt S 223. School of EECS, WSU

50

Rehashing Analysis

 Rehashing takes time to do N insertions
 Therefore should do it infrequently
 Therefore should do it infrequently
 Specifically

ti

i

l

b

N/2 i

 Must have been N/2 insertions since last 
t

M t h
rehash
i
ti i
A
insertions yields only constant additional 
time per insertion
time per insertion

th N/2

 Amortizing the O(N) cost over the N/2 prior 

th O(N)

t

Cpt S 223. School of EECS, WSU

51

Rehashing Implementation

 When to rehash

 When load factor reaches some threshold
 When load factor reaches some threshold 

(e.g,.  0.5), OR
 When an insertion fails
When an insertion fails

 Applies across collision handling 

schemes
schemes

Cpt S 223. School of EECS, WSU

52

Rehashing for Chaining

Cpt S 223. School of EECS, WSU

53

Rehashing for
Quadratic Probing

Cpt S 223. School of EECS, WSU

54

Hash Tables in C++ STL

 Hash tables not part of the C++ 

Standard Library
Standard Library

 Some implementations of STL have 

hash tables (e g SGIs STL)
hash tables (e.g., SGI s STL)
 hash_set
 hash map
 hash_map

Cpt S 223. School of EECS, WSU

55

Hash Set in STL

#include <hash set>
#include <hash_set>
struct eqstr
{

bool operator()(const char* s1, const char* s2) const
{{
}

return strcmp(s1, s2) == 0;

};
void lookup(const hash_set<const char*, hash<const char*>, eqstr>& Set,
{

const char* word)

hash_set<const char*, hash<const char*>, eqstr>::const_iterator it
= Set.find(word);
cout << word << ": "

<< (it != Set end() ? "present" : "not present")
<< (it != Set.end() ? "present" : "not present")
<< endl;

}
int main()
{
{

}

Key

Hash fn

Key equality test

hash_set<const char*, hash<const char*>, eqstr> Set;
Set.insert("kiwi");
lookup(Set, kiwi");

Cpt S 223. School of EECS, WSU

56

Hash Map in STL

>
#include <hash_map>
#i l d <h h
struct eqstr
{

};
int main()
{

bool operator() (const char* s1, const char* s2) const
{
}

return strcmp(s1, s2) == 0;

Key

Data

Hash fn

Key equality test

hash_map<const char*, int, hash<const char*>, eqstr> months;
months["january"] = 31;
months["february"] = 28;
...
months["december"] = 31;
cout << january -> " << months[january"] << endl;

Internally
treated
treated 
like insert
(or overwrite
if key 
already present)

}
}

Cpt S 223. School of EECS, WSU

57

Problem with Large Tables

 What if hash table is too large to store 

in main memory?
in main memory?

 Solution: Store hash table on disk

Minimize disk accesses
 Minimize disk accesses

 But...
ll

 Collisions require disk accesses
 Rehashing requires a lot of disk accesses

d k

Solution: Extendible Hashing

Cpt S 223. School of EECS, WSU

58

Hash Table Applications

 Symbol table in compilers
 Accessing tree or graph nodes by name

 E.g., city names in Google maps
aps

g , c ty a es

Goog e

 Maintaining a transposition table in games

 Remember previous game situations and the move taken 

(avoid re-computation)
(avoid re computation)

 Dictionary lookups

 Spelling checkers
 Natural language understanding (word sense)
)

d
 Heavily used in text processing languages

t di

d

N t

l l

(

 E.g., Perl, Python, etc.

Cpt S 223. School of EECS, WSU

59

Summary

 Hash tables support fast insert and 

search
search
 O(1) average case performance
 Deletion possible but degrades
 Deletion possible, but degrades 

performance

 Not suited if ordering of elements is
 Not suited if ordering of elements is 

important
 Many applications
Many applications

Cpt S 223. School of EECS, WSU

60

Points to remember - Hash 
tables

 Table size prime
 Table size much larger than number of inputs 

(to maintain  closer to 0 or < 0.5)

 Tradeoffs between chaining vs. probing
C lli i
 Collision chances decrease in this order: 
linear probing => quadratic probing => 
{random probing, double hashing}
{random probing, double hashing}

hi

h

d

i

d

 Rehashing required to resize hash table at a 

time when  exceeds 0.5

 Good for searching. Not good if there is some 

order implied by data.

Cpt S 223. School of EECS, WSU

61

