Introduction to Stacks
In a stack data structure, all insertions and deletions of
entries are made at one end, called the top of the stack.
Stack is usefull in applications involving reversing. When we
add an item to a stack, we say that we push it onto the stack,
and when we remove an item, we say that we pop it out the
stack. Note that the last item pushed onto the stack is always
the first that will be popped out the stack. This property is
called last in, first out, or LIFO for short.
The two problems which arise when we add to or remove
from stack are stack overflow and stack underflow situations.
We might attempt to pop an entry out an empty stack or to push
an entry onto a full stack. These conditions must be
recognized and reported with the return of an error code. If
the stack is not full, item is added to the top of the stack.
If the stack is full, an error code of overflow is returned
and the stack is left unchanged. Similarly, if the stack is
not empty, the top of the stack is returned in item. If the
stack is empty an error code of underflow is returned.
Here is an example illustrating the stack operation.
#include <iostream>
#include <conio>
const int MAXARRAY=10;
int stack[MAXARRAY];
int top = 0;
int item;
int flag;
void
void
bool
bool

//stack size
//an array to be used as stack
//stack pointer
//an item to be pushed onto the stack

Push();
Pop();
Empty();
Full();

int main ()
{
int tag;
flag = 1;
while(flag != 0)
{
cout << "Enter 1 to push onto the stack\n";
cout << "or enter 0 to pop out the stack: ";
cin >> tag;
cout << endl;
switch(tag){
case 1:
cout << "Enter item: ";
cin >> item;
cout << endl;
Push();
break;
case 0:

1

Pop();
break;
default:
cout<<"Incorrect value entered."<<" Enter 0 or 1.\n\n";
}
for (int i=0; i<=top-1; i++)
cout << stack[i] << " ";
cout << "\n\n";
cout << "Enter 0 if you want to exit,\n";
cout << "or enter any integer to continue: ";
cin >> flag;
cout << endl;
}
getch();
return 0;
}
//******Push an item onto the stack********************
void Push()
{
if (Full() == false)
{
stack[top]=item;
top++;
}
else
cout << "Stack overflow!\n\n";
}
//*******Pop an item out the stack**********************
void Pop()
{
if (Empty() == true)
cout << "Stack underflow!\n\n";
else
--top;
}
//*******Check whether the stack is empty***************
bool Empty()
{
if (top<=0)
return true;
else
return false;
}
//*******Check whether the stack is full****************
bool Full()
{
if (top>=MAXARRAY)
return true;
else
return false;
}

2

Application of stacks: Polish notation
The method of writing all oparators either before their
operands, or after them, is called Polish notation, in
honour of its discoverer, the Polish mathematician Jan
Lukasiewicz. When the orerators are written before their
operands, it is called the prefix form. When the operators
come after their operands, it is called the postfix form,
or, sometimes, reverse Polish form or suffix form. Finally,
in this context, it is customary to use the coined phrase
infix form to denote the usual custom of writing binary
operators between their operands.
The expression a × b becomes ×ab in prefix form and ab ×
in
postfix
form.
In
the
expression,
a + b × c , the
multiplication is done first, so we convert it first,
obtaining first a + (bc×) and then abc × + in postfix form.
The prefix form of this expression is + a × bc . Note that
prefix and postfix formsa re not related by taking mirror
images or other such simple transformations. Note also that
parentheses have been omitted in the Polish forms.
The method of evaluating postfix expressions can be
accomplished by the following four rules, which are
repeatedly applied until all operators have been processed:
1. Find the leftmost operator in the expression.
2. Select the operand(s) immediately to the left of the
operator found.
3. Perform the indicated operator.
4. Replace the operator and the operand(s) by the result.
The rules for evaluation
established in similar way.

of

prefix

expressions

can

be

Conversion of infix expressions to Polish notation
When we convert an expression in infix form into postfix
form or prefix form we take into account the order in which
the operators are carried out. Usually, we distinguish
between unary and binary operations. The first requires a
single operand for execution, while the latter takes two
operands. We carry out the operators in order of the their
priorities. The priorities of the operator are listed in the
following table:

Operators
Priority
^, all unary operators
6
× / %
5

3

+ - (binary)
== !=
< <= > >=
&& &
=
A

4
3
2
1
0
variable

In this table ^ and & denote exponentiation and OR
operators, respectively.
Let us consider the problem of converting an infix
expression
containing
parenthesized
expression.
The
algorithm works in the following way:
1. Initialize stack contents to the left parentheses whose
precedence number is greater than that of any other
operator.
2. Scan the leftmost symbol in the given infix expression
and denote it as the current input symbol.
3. Repeat through step 6 while the current symbol is not the
last right parentheses, a counterpart of the left
parentheses pushed onto the stack first.
4. Remove and output all stack symbols whose priority values
are greater than or equal to the precedence of the
current input symbol.
5. Push the current input symbol onto the stack.
6. Scan the leftmost symbol in the infix expression and let
it be the current input symbol.
Algorithm begins with pushing left parentheses onto the
stack. Then it scans the leftmost symbol and pushes it onto
the stack. If the next symbol is the one whose priority is
lower than the priority of the symbols in the stack, then we
pop those symbols off the stack and add to the right of the
postfix expression in the same order. Then push a new symbol
onto the stack. This procedure continues untill all the
symbols of infix expression have been scanned, pushed onto
the stack and then added to the postfix expression. If the
right parenthesesisencountered we pop all the symbol out the
stack until the rightmost left parenthases and add them to
the right of the expression.
Here is example illustrating the above algorithm.
Symbol

(

Contents
of
the
stack
(rightmost
symbol
is
on
top)

(
((

4

Postfix expression
(Reverse-Polish)

A
+
B
^
C
^
D
)
*
(
E
+
F
/
D
)
)

((A
((+
((+B
((+^
((+^C
((+^^
((+^^D
(
(*
((*
((*E
((*+
((*+F
((*+/
((*+/D
(

A
A
AB
AB
ABC
ABC
ABCD^^+
ABCD^^+
ABCD^^+
ABCD^^+
ABCD^^+E
ABCD^^+E
ABCD^^+EF
ABCD^^+EF
ABCD^^+EFD/+*

Consider another example of conversion of infix form into
postfix form. Let x = ( −13 + (4 ^ 2 − 3 × 2 + 6) ^ 1/ 2) /(2 × 5) be the
given expression.
No
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27

Symbol
X
=
(
~
13
+
(
4
^
2
3
*
2
+
6
)
^
½
)
/
(
2
*
5
)
)

Stack
(
(X
(=
(=(
(=(~
(=(~13
(=(+
(=(+(
(=(+(4
(=(+(^
(=(+(^2
(=(+((=(+(-3
(=(+(-*
(=(+(-*2
(=(+(+
(=(+(+6
(=(+
(=(+^
(=(+^½
(=
(=/
(=/(
(=/(2
(=/(*
(=/(*5
(=/

Postfix expression
X
X
X
X
X
X13~
X13~
X13~
X13~4
X13~4,
X13~4,2^
X13~4,2^
X13~4,2^3
X13~4,2^3
X13~4,2^3,2*X13~4,2^3,2*X13~4,2^3,2*-6+
X13~4,2^3,2*-6+
X13~4,2^3,2*-6+
X13~4,2^3,2*-6+½^+
X13~4,2^3,2*-6+½^+
X13~4,2^3,2*-6+½^+
X13~4,2^3,2*-6+½^+
X13~4,2^3,2*-6+½^+2
X13~4,2^3,2*-6+½^+2
X13~4,2^3,2*-6+½^+2,5*
X13~4,2^3,2*-6+½^+2,5*/=

5

Expression trees
An expression tree is built up from the simple operands and
operators of an (arithmetic or logical) expression by
placing the simple operands as the leaves o f a binary tree,
and the operators as the interior nodes. For each binary
operator, the left tree contains left and right subtrees.
For a unary operator, one subtree will be empty.
We traditionaly write some unary operators to the left of
their operands, such as “-” (unary negation) or the standard
functions like log() , and cos() . Others are written on the
right, such as the factorial function ()!, or the function
2

that takes the square of a number, () . Sometimes, either
side is permissible, such as the derivative operator, which
can be written as d / dx on
the left,or the incrementing
||
operator ++ in the C.
The expression tree of a
simple expression is shown
<
<
below. In this figure the
operands and operators of
the expression (a < b) & (c<d)
are assigned to the nodes of
b
c
a
d
the binary tree, where &
stands for logical OR operator.

Traversal of binary tree
In many applications it is necessary, not only to find a
node within a binary tree, but to be able to move through
all the nodes of the binary tree, visiting each one in turn.
If there are n nodes in the binary tree, then there are n!
different orders in which they could be visited, but most of
these have little regularity or pattern. When we write an
algortithm to traverse a binary tree we shall almost always
wish to proceed so that the same rules are applied at each
node. At a given node, then, there are three tasks we shall
wish to do in some order: We shall visit the node itself; we
shall traverse its left subtree; we shall traverse its right
subtree. The tree distinguished traversals are: preorder
(itself, left, right), inorder (left, itself, right), and
postorder (left, right, itself).
As an example we can write down the prefix and postfix
forms of an arithmetic expression, starting from its
expression tree. Consider the figure given above. The

6

results of preorder, inorder and postorder traversals are as
follows:

& < ab < cd
a < b &< cd
ab < cd <&

Preorder:
Inorder:
Postorder:

Consider an example of x = ( −13 + (4 ^ 2 − 3 × 2 + 1) ^ 1/ 2) /(2 × 5) ,
that we analized in the previous section. Corresponding
expression tree is demonstrated below.
=

X

/

+

*

+

13

5

1/2

-

6

^

4

2

^

~

*

2

3

2

Let us traverse the tree in postorder. The resulting
expression is X13~4,2^3,2 × -6+½^+2,5 × /= , which matches with
the one we obtained in the previous section.

7

