Binary Search Trees 

6 May 2013	


OSU CSE	


1	


Faster Searching 

  The BinaryTree component family can 
be used to arrange the labels on binary 
tree nodes in a variety of useful ways 

  A common arrangement of labels, which 

supports searching that is much faster 
than linear search, is called a binary 
search tree (BST) 

6 May 2013	


OSU CSE	


2	


BSTs Are Very General 

  BSTs may be used to search for items of 
any type T for which one has defined a 
total preorder, i.e., a binary relation on T 
that is total, reflexive, and transitive 

6 May 2013	


OSU CSE	


3	


A binary relation on T may be 

BSTs Are Very General 

viewed as a set of ordered pairs of T, 
or as a boolean-valued function R of 
  BSTs may be used to search for items of 
two parameters of type T that is true 
any type T for which one has defined a 
total preorder, i.e., a binary relation on T 
that is total, reflexive, and transitive 

iff that pair is in the set. 

6 May 2013	


OSU CSE	


4	


BSTs Are Very General 

The binary relation R is total 

whenever: 
  for all x, y: T 
  BSTs may be used to search for items of 
    (R(x, y) or R(y, x)) 
any type T for which one has defined a 
total preorder, i.e., a binary relation on T 
that is total, reflexive, and transitive 

6 May 2013	


OSU CSE	


5	


BSTs Are Very General 

whenever: 

The binary relation R is reflexive 
  BSTs may be used to search for items of 
  for all x: T (R(x, x)) 
any type T for which one has defined a 
total preorder, i.e., a binary relation on T 
that is total, reflexive, and transitive 

6 May 2013	


OSU CSE	


6	


The binary relation R is transitive 

BSTs Are Very General 

whenever: 

for all x, y, z: T 
  BSTs may be used to search for items of 
 (if R(x, y) and R(y, z) 
  then R(x, z)) 
any type T for which one has defined a 
total preorder, i.e., a binary relation on T 
that is total, reflexive, and transitive 

6 May 2013	


OSU CSE	


7	


Simplifications 

  For simplicity in the following illustrations, 

we use only one kind of example: 
 T = integer 
 The ordering is   

  For simplicity (and because of how we will 
use BSTs), we assume that no two nodes 
in a BST have the same labels 

6 May 2013	


OSU CSE	


8	


Simplifications 

  For simplicity in the following illustrations, 

we use only one kind of example: 
 T = integer 
 The ordering is   

Both these simplifications 
are inessential: BSTs are not 
  For simplicity (and because of how we will 
limited to these situations!  
use BSTs), we assume that no two nodes 
in a BST have the same labels 

6 May 2013	


OSU CSE	


9	


BST Arrangement Properties 
  A binary tree is a BST whenever the 
arrangement of node labels satisfies these 
two properties: 
1.  For every node in the tree, if its label is x 

and if y is a label in that nodes left subtree, 
then y < x  

2.  For every node in the tree, if its label is x 

and if y is a label in that nodes right subtree, 
then y > x 

6 May 2013	


OSU CSE	


10	


The Big Picture 

x 

6 May 2013	


OSU CSE	


11	


Every label y in this 

tree satisfies 

The Big Picture 

y < x 

x 

6 May 2013	


OSU CSE	


12	


The Big Picture 

Every label y in this 

tree satisfies 

y > x 

x 

6 May 2013	


OSU CSE	


13	


And Its So Everywhere 

x 

6 May 2013	


OSU CSE	


14	


Every label y in this 

And Its So Everywhere 
y < x 

tree satisfies 

x 

6 May 2013	


OSU CSE	


15	


And Its So Everywhere 

Every label y in this 

tree satisfies 

y > x 

x 

6 May 2013	


OSU CSE	


16	


Examples of BSTs 

7 

4 

3 

2 

5 

5 

1 

3 

6 

6 May 2013	


OSU CSE	


9 

17	


Non-Examples of BSTs 

1 

3 

3 

2 

2 

5 

5 

1 

4 

4 

6 May 2013	


OSU CSE	


9 

18	


Non-Examples of BSTs 

1 

3 

3 

2 

2 

5 

5 

1 

4 

4 

Property 1 is 
violated here. 

6 May 2013	


OSU CSE	


9 

19	


Non-Examples of BSTs 

1 

3 

3 

2 

2 

5 

5 

1 

4 

4 

Property 1 is 
violated here. 

6 May 2013	


OSU CSE	


9 

20	


Non-Examples of BSTs 

1 

3 

3 

2 

2 

5 

5 

1 

4 

4 

Property 2 is 
violated here. 

6 May 2013	


OSU CSE	


9 

21	


Searching for x 

  Suppose you are trying to find whether 

any node in a BST t has the label x 
  There are only two cases to consider: 

 t is empty 
 t is non-empty 

6 May 2013	


OSU CSE	


22	


Searching for x 

  Suppose you are trying to find whether 

any node in a BST t has the label x 
  There are only two cases to consider: 

 t is empty 
 t is non-empty 

Easy: Report 
x is not in t. 

6 May 2013	


OSU CSE	


23	


Searching for x 

r 

6 May 2013	


OSU CSE	


24	


Does x = r? 
If so, report that 

x is in t. 
If not ... 

Searching for x 

r 

6 May 2013	


OSU CSE	


25	


Is x < r? 

Searching for x 

r 

If so, report the 

result of searching 
for x in this tree. 

If not ... 

6 May 2013	


OSU CSE	


26	


Then it must be the 
case that x > r. 
Report the result of 
searching for x in 

this tree. 

Searching for x 

r 

6 May 2013	


OSU CSE	


27	


Why Its Faster Than Linear Search 
  You need to compare to the root of the 

tree, and then (only if the root is not what 
youre searching for) search either the left 
or the right subtreebut not both 
 Compare to linear search, where you might 
have to look at all the items, which would be 
equivalent to searching both subtrees  

6 May 2013	


OSU CSE	


28	


Example: Searching for 5 

8 

6 May 2013	


OSU CSE	


29	


Example: Searching for 5 
Does 5 = 8? 
No ... 

8 

6 May 2013	


OSU CSE	


30	


Example: Searching for 5 
Is 5 < 8? 

Yes, so report the 
result of searching 
for 5 in this tree. 

8 

6 May 2013	


OSU CSE	


31	


Recursion 

  Searching the left subtree at this point 

simply involves making a recursive call to 
the method that searches a BST 

  Against our usual advice about recursion, 

lets trace into that call and see what 
happens 
 Why?  Because some people, e.g., 
interviewers, may expect you to understand 
BSTs without mentioning recursion/induction 

6 May 2013	


OSU CSE	


32	


Example: Searching for 5 

8 

3 

6 May 2013	


OSU CSE	


33	


Example: Searching for 5 
Does 5 = 3? 
No ... 

8 

3 

6 May 2013	


OSU CSE	


34	


Example: Searching for 5 
Is 5 < 3? 
No ... 

8 

3 

6 May 2013	


OSU CSE	


35	


Then it must be the 
case that 5 > 3. 
Report the result of 
searching for 5 in 

this tree. 

Example: Searching for 5 

8 

3 

6 May 2013	


OSU CSE	


36	


Its Another Recursive Call 

  Lets continue tracing into calls ... 

6 May 2013	


OSU CSE	


37	


Example: Searching for 5 

8 

3 

6 

6 May 2013	


OSU CSE	


38	


Example: Searching for 5 
Does 5 = 6? 
No ... 

8 

3 

6 

6 May 2013	


OSU CSE	


39	


Yes, so report the 
result of searching 
for 5 in the (empty) 

left subtree. 

Example: Searching for 5 
Is 5 < 6? 

8 

3 

6 

6 May 2013	


OSU CSE	


40	


The Recursion Stops Here 
  Remember, we already noted that when 
searching for something in an empty tree, 
we can simply report it is not there 

  No new recursive call results 

6 May 2013	


OSU CSE	


41	


Example: Searching for 5 

How many nodes 
did the algorithm 
visit, and compare 

At worst, how many 

labels to 5? 
could it be? 

8 

3 

6 

6 May 2013	


OSU CSE	


42	


Example: Searching for 5 

What about in 
this tree? 

8 

5 

6 May 2013	


OSU CSE	


43	


Wait!  How Can This Work? 

  With the BinaryTree components, there 
are no methods to move down the tree 

  This is why recursion is crucial 

 To search a subtree, you disassemble the 
original tree, search in one of the subtrees, 
and then (re)assemble it before returning the 
answer 

6 May 2013	


OSU CSE	


44	


Refined Searching for x 

r 

6 May 2013	


OSU CSE	


45	


Refined Searching for x 

r 

Does x = r? 
If so, report that 

x is in t. 
If not ... 

6 May 2013	


OSU CSE	


46	


Disassemble t into 
the root and its two 

subtrees. 

Refined Searching for x 

r 

6 May 2013	


OSU CSE	


47	


Refined Searching for x 
Is x < r? 

r 

If so, remember the 
result of searching 
for x in this tree. 

If not ... 

6 May 2013	


OSU CSE	


48	


Refined Searching for x 

Then it must be the 
case that x > r. 
Remember the 
result of searching 
for x in this tree. 

r 

6 May 2013	


OSU CSE	


49	


Before returning the 
result of the search, 

(re)assemble t 
from its parts. 

Refined Searching for x 

r 

6 May 2013	


OSU CSE	


50	


Inserting x 

  Suppose now you are trying to insert into a 
BST t the label x (which we assume to be 
not already in t; remember that there are 
no duplicate labels in t) 

  There are only two cases to consider: 

 t is empty 
 t is non-empty 

6 May 2013	


OSU CSE	


51	


Inserting x 

  Suppose now you are trying to insert into a 
BST t the label x (which we assume to be 
not already in t; remember that there are 
no duplicate labels in t) 

  There are only two cases to consider: 

 t is empty 
 t is non-empty 

Easy: Make x the root 

of the updated t. 

6 May 2013	


OSU CSE	


52	


Inserting x 

r 

6 May 2013	


OSU CSE	


53	


There is no reason 

to ask whether 
x = r; why? 

Inserting x 

r 

6 May 2013	


OSU CSE	


54	


Inserting x 

Is x < r? 

If so, insert x into 

this tree. 
If not ... 

r 

6 May 2013	


OSU CSE	


55	


Then it must be the 
case that x > r. 
Insert x into this 

tree. 

Inserting x 

r 

6 May 2013	


OSU CSE	


56	


Removing the Smallest 
  Suppose now you are trying to remove 

 t is non-empty 

from a BST t the smallest label (assuming 
that t is not empty) 

  There is only one case to consider: 

6 May 2013	


OSU CSE	


57	


Removing the Smallest 

r 

6 May 2013	


OSU CSE	


58	


Removing the Smallest 

Does the root have 
a non-empty left 

subtree? 

r 

6 May 2013	


OSU CSE	


59	


If so, remove the 
smallest label from 

this tree. 

Removing the Smallest 

r 

6 May 2013	


OSU CSE	


60	


If not, then r is the 
smallest label in t.  

Removing the Smallest 

r 

Make the right 
subtree the new 
value of t, and 

return r. 

6 May 2013	


OSU CSE	


61	


Removing x 

  Suppose now you are trying to remove 

from a BST t the label x (which we 
assume to be in t) 

  There is only one case to consider: 

 t is non-empty 

6 May 2013	


OSU CSE	


62	


Removing x 

r 

6 May 2013	


OSU CSE	


63	


Removing x 

Does x = r? 
If so, ouch!  
(Later ...) 
If not ... 

r 

6 May 2013	


OSU CSE	


64	


Removing x 

Is x < r? 

If so, remove x 
from this tree. 

If not ... 

r 

6 May 2013	


OSU CSE	


65	


Then it must be the 
case that x > r. 
Remove x from this 

tree. 

Removing x 

r 

6 May 2013	


OSU CSE	


66	


Removing x 

Back to the 

problematic case: 
 x = r, i.e., we 

need to remove the 

root of t. 

What can we do? 

x 

6 May 2013	


OSU CSE	


67	


The Idea 

  To avoid restructuring the entire tree, we 

can move to the root some label from 
further down in the tree that would not 
violate the BST arrangement properties 
  There are two good possibilities for the 

label to be moved: 
 The next-smaller label than x 
 The next-larger label than x 

6 May 2013	


OSU CSE	


68	


Leverage Prior Work 
  We already know how to remove the 

smallest label from a tree 

  So, it is easier to implement this strategy: 

 Remove the smallest label from the right 
subtree (because this is the next-larger label 
after x in the original tree t) 
 Make that label the new root of t 

6 May 2013	


OSU CSE	


69	


smallest label from a tree 

But first, what if the 

Leverage Prior Work 
  We already know how to remove the 
empty? 

right subtree is 
  So, it is easier to implement this strategy: 

 Remove the smallest label from the right 
subtree (because this is the next-larger label 
after x in the original tree t) 
 Make that label the new root of t 

6 May 2013	


OSU CSE	


70	


If the right subtree 

Removing x 

is empty, then 
make the left 
value of t. 

subtree the new 

x 

6 May 2013	


OSU CSE	


71	


Removing x 

smallest label from 
the right subtree. 

If the right subtree 
is not empty, then 
replace x in the 

root with the 

x 

s 

6 May 2013	


OSU CSE	


72	


Resources 

  Big Java Late Objects, Section 17.3 

  http://proquest.safaribooksonline.com.proxy.lib.ohio-state.edu/book/

programming/java/9781118087886/chapter-17-tree-structures/
navpoint-136 

6 May 2013	


OSU CSE	


73	


