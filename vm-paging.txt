18
Paging: Introduction
It is sometimes said that the operating system takes one of two approaches
when solving most any space-management problem. The first approach
is to chop things up into variable-sized pieces, as we saw with segmentation in virtual memory. Unfortunately, this solution has inherent difficulties. In particular, when dividing a space into different-size chunks, the
space itself can become fragmented, and thus allocation becomes more
challenging over time.
Thus, it may be worth considering the second approach: to chop up
space into fixed-sized pieces. In virtual memory, we call this idea paging,
and it goes back to an early and important system, the Atlas [KE+62, L78].
Instead of splitting up a process’s address space into some number of
variable-sized logical segments (e.g., code, heap, stack), we divide it into
fixed-sized units, each of which we call a page. Correspondingly, we view
physical memory as an array of fixed-sized slots called page frames; each
of these frames can contain a single virtual-memory page. Our challenge:
T HE C RUX :
H OW T O V IRTUALIZE M EMORY W ITH PAGES
How can we virtualize memory with pages, so as to avoid the problems of segmentation? What are the basic techniques? How do we make
those techniques work well, with minimal space and time overheads?

18.1 A Simple Example And Overview
To help make this approach more clear, let’s illustrate it with a simple
example. Figure 18.1 (page 2) presents an example of a tiny address space,
only 64 bytes total in size, with four 16-byte pages (virtual pages 0, 1, 2,
and 3). Real address spaces are much bigger, of course, commonly 32 bits
and thus 4-GB of address space, or even 64 bits1 ; in the book, we’ll often
use tiny examples to make them easier to digest.
1
A 64-bit address space is hard to imagine, it is so amazingly large. An analogy might
help: if you think of a 32-bit address space as the size of a tennis court, a 64-bit address space
is about the size of Europe(!).

1

2

PAGING : I NTRODUCTION

0
(page 0 of the address space)
16
(page 1)
32
(page 2)
48
(page 3)
64

Figure 18.1: A Simple 64-byte Address Space
Physical memory, as shown in Figure 18.2, also consists of a number
of fixed-sized slots, in this case eight page frames (making for a 128-byte
physical memory, also ridiculously small). As you can see in the diagram,
the pages of the virtual address space have been placed at different locations throughout physical memory; the diagram also shows the OS using
some of physical memory for itself.
Paging, as we will see, has a number of advantages over our previous
approaches. Probably the most important improvement will be flexibility: with a fully-developed paging approach, the system will be able to
support the abstraction of an address space effectively, regardless of how
a process uses the address space; we won’t, for example, make assumptions about the direction the heap and stack grow and how they are used.
Another advantage is the simplicity of free-space management that paging affords. For example, when the OS wishes to place our tiny 64-byte
address space into our eight-page physical memory, it simply finds four
free pages; perhaps the OS keeps a free list of all free pages for this, and
just grabs the first four free pages off of this list. In the example, the OS
0
reserved for OS

page frame 0 of physical memory

16
(unused)

page frame 1

page 3 of AS

page frame 2

page 0 of AS

page frame 3

(unused)

page frame 4

page 2 of AS

page frame 5

(unused)

page frame 6

page 1 of AS

page frame 7

32
48
64
80
96
112
128

Figure 18.2: A 64-Byte Address Space In A 128-Byte Physical Memory

O PERATING
S YSTEMS
[V ERSION 0.91]

WWW. OSTEP. ORG

PAGING : I NTRODUCTION

3

has placed virtual page 0 of the address space (AS) in physical frame 3,
virtual page 1 of the AS in physical frame 7, page 2 in frame 5, and page
3 in frame 2. Page frames 1, 4, and 6 are currently free.
To record where each virtual page of the address space is placed in
physical memory, the operating system usually keeps a per-process data
structure known as a page table. The major role of the page table is to
store address translations for each of the virtual pages of the address
space, thus letting us know where in physical memory each page resides.
For our simple example (Figure 18.2, page 2), the page table would thus
have the following four entries: (Virtual Page 0 → Physical Frame 3),
(VP 1 → PF 7), (VP 2 → PF 5), and (VP 3 → PF 2).
It is important to remember that this page table is a per-process data
structure (most page table structures we discuss are per-process structures; an exception we’ll touch on is the inverted page table). If another
process were to run in our example above, the OS would have to manage
a different page table for it, as its virtual pages obviously map to different
physical pages (modulo any sharing going on).
Now, we know enough to perform an address-translation example.
Let’s imagine the process with that tiny address space (64 bytes) is performing a memory access:
movl <virtual address>, %eax

Specifically, let’s pay attention to the explicit load of the data from
address <virtual address> into the register eax (and thus ignore the
instruction fetch that must have happened prior).
To translate this virtual address that the process generated, we have
to first split it into two components: the virtual page number (VPN), and
the offset within the page. For this example, because the virtual address
space of the process is 64 bytes, we need 6 bits total for our virtual address
(26 = 64). Thus, our virtual address can be conceptualized as follows:
Va5 Va4 Va3 Va2 Va1 Va0

In this diagram, Va5 is the highest-order bit of the virtual address, and
Va0 the lowest-order bit. Because we know the page size (16 bytes), we
can further divide the virtual address as follows:

VPN

offset

Va5 Va4 Va3 Va2 Va1 Va0

The page size is 16 bytes in a 64-byte address space; thus we need to
be able to select 4 pages, and the top 2 bits of the address do just that.
Thus, we have a 2-bit virtual page number (VPN). The remaining bits tell
us which byte of the page we are interested in, 4 bits in this case; we call
this the offset.

c 2014, A RPACI -D USSEAU


T HREE
E ASY
P IECES

4

PAGING : I NTRODUCTION
When a process generates a virtual address, the OS and hardware
must combine to translate it into a meaningful physical address. For example, let us assume the load above was to virtual address 21:
movl 21, %eax

Turning “21” into binary form, we get “010101”, and thus we can examine this virtual address and see how it breaks down into a virtual page
number (VPN) and offset:

VPN
0

offset

1

0

1

0

1

Thus, the virtual address “21” is on the 5th (“0101”th) byte of virtual
page “01” (or 1). With our virtual page number, we can now index our
page table and find which physical frame virtual page 1 resides within. In
the page table above the physical frame number (PFN) (also sometimes
called the physical page number or PPN) is 7 (binary 111). Thus, we can
translate this virtual address by replacing the VPN with the PFN and then
issue the load to physical memory (Figure 18.3).
Note the offset stays the same (i.e., it is not translated), because the
offset just tells us which byte within the page we want. Our final physical
address is 1110101 (117 in decimal), and is exactly where we want our
load to fetch data from (Figure 18.2, page 2).
With this basic overview in mind, we can now ask (and hopefully,
answer) a few basic questions you may have about paging. For example,
where are these page tables stored? What are the typical contents of the
page table, and how big are the tables? Does paging make the system
(too) slow? These and other beguiling questions are answered, at least in
part, in the text below. Read on!
VPN
Virtual
Address

0

1

offset
0

1

0

1

0

1

0

1

Address
Translation

Physical
Address

1

1

PFN

1

offset

Figure 18.3: The Address Translation Process

O PERATING
S YSTEMS
[V ERSION 0.91]

WWW. OSTEP. ORG

PAGING : I NTRODUCTION
0
16

page table:
3752

5

page frame 0 of physical memory

(unused)

page frame 1

page 3 of AS

page frame 2

page 0 of AS

page frame 3

(unused)

page frame 4

page 2 of AS

page frame 5

(unused)

page frame 6

page 1 of AS

page frame 7

32
48
64
80
96
112
128

Figure 18.4: Example: Page Table in Kernel Physical Memory

18.2 Where Are Page Tables Stored?
Page tables can get terribly large, much bigger than the small segment
table or base/bounds pair we have discussed previously. For example,
imagine a typical 32-bit address space, with 4KB pages. This virtual address splits into a 20-bit VPN and 12-bit offset (recall that 10 bits would
be needed for a 1KB page size, and just add two more to get to 4KB).
A 20-bit VPN implies that there are 220 translations that the OS would
have to manage for each process (that’s roughly a million); assuming we
need 4 bytes per page table entry (PTE) to hold the physical translation
plus any other useful stuff, we get an immense 4MB of memory needed
for each page table! That is pretty large. Now imagine there are 100
processes running: this means the OS would need 400MB of memory
just for all those address translations! Even in the modern era, where
machines have gigabytes of memory, it seems a little crazy to use a large
chunk of it just for translations, no? And we won’t even think about how
big such a page table would be for a 64-bit address space; that would be
too gruesome and perhaps scare you off entirely.
Because page tables are so big, we don’t keep any special on-chip hardware in the MMU to store the page table of the currently-running process.
Instead, we store the page table for each process in memory somewhere.
Let’s assume for now that the page tables live in physical memory that
the OS manages; later we’ll see that much of OS memory itself can be virtualized, and thus page tables can be stored in OS virtual memory (and
even swapped to disk), but that is too confusing right now, so we’ll ignore it. In Figure 18.4 is a picture of a page table in OS memory; see the
tiny set of translations in there?

c 2014, A RPACI -D USSEAU


T HREE
E ASY
P IECES

6

PAGING : I NTRODUCTION
8

7

6

5

4

3

2

1

0

G
PAT
D
A
PCD
PWT
U/S
R/W
P

31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9

PFN

Figure 18.5: An x86 Page Table Entry (PTE)

18.3

What’s Actually In The Page Table?
Let’s talk a little about page table organization. The page table is just
a data structure that is used to map virtual addresses (or really, virtual
page numbers) to physical addresses (physical frame numbers). Thus,
any data structure could work. The simplest form is called a linear page
table, which is just an array. The OS indexes the array by the virtual page
number (VPN), and looks up the page-table entry (PTE) at that index in
order to find the desired physical frame number (PFN). For now, we will
assume this simple linear structure; in later chapters, we will make use of
more advanced data structures to help solve some problems with paging.
As for the contents of each PTE, we have a number of different bits
in there worth understanding at some level. A valid bit is common to
indicate whether the particular translation is valid; for example, when
a program starts running, it will have code and heap at one end of its
address space, and the stack at the other. All the unused space in-between
will be marked invalid, and if the process tries to access such memory, it
will generate a trap to the OS which will likely terminate the process.
Thus, the valid bit is crucial for supporting a sparse address space; by
simply marking all the unused pages in the address space invalid, we
remove the need to allocate physical frames for those pages and thus save
a great deal of memory.
We also might have protection bits, indicating whether the page could
be read from, written to, or executed from. Again, accessing a page in a
way not allowed by these bits will generate a trap to the OS.
There are a couple of other bits that are important but we won’t talk
about much for now. A present bit indicates whether this page is in physical memory or on disk (i.e., it has been swapped out). We will understand this machinery further when we study how to swap parts of the
address space to disk to support address spaces that are larger than physical memory; swapping allows the OS to free up physical memory by
moving rarely-used pages to disk. A dirty bit is also common, indicating
whether the page has been modified since it was brought into memory.
A reference bit (a.k.a. accessed bit) is sometimes used to track whether
a page has been accessed, and is useful in determining which pages are
popular and thus should be kept in memory; such knowledge is critical
during page replacement, a topic we will study in great detail in subsequent chapters.
Figure 18.5 shows an example page table entry from the x86 architecture [I09]. It contains a present bit (P); a read/write bit (R/W) which
determines if writes are allowed to this page; a user/supervisor bit (U/S)

O PERATING
S YSTEMS
[V ERSION 0.91]

WWW. OSTEP. ORG

PAGING : I NTRODUCTION

7

which determines if user-mode processes can access the page; a few bits
(PWT, PCD, PAT, and G) that determine how hardware caching works for
these pages; an accessed bit (A) and a dirty bit (D); and finally, the page
frame number (PFN) itself.
Read the Intel Architecture Manuals [I09] for more details on x86 paging support. Be forewarned, however; reading manuals such as these,
while quite informative (and certainly necessary for those who write code
to use such page tables in the OS), can be challenging at first. A little patience, and a lot of desire, is required.

18.4 Paging: Also Too Slow
With page tables in memory, we already know that they might be too
big. As it turns out, they can slow things down too. For example, take
our simple instruction:
movl 21, %eax

Again, let’s just examine the explicit reference to address 21 and not
worry about the instruction fetch. In this example, we’ll assume the hardware performs the translation for us. To fetch the desired data, the system
must first translate the virtual address (21) into the correct physical address (117). Thus, before fetching the data from address 117, the system
must first fetch the proper page table entry from the process’s page table,
perform the translation, and then load the data from physical memory.
To do so, the hardware must know where the page table is for the
currently-running process. Let’s assume for now that a single page-table
base register contains the physical address of the starting location of the
page table. To find the location of the desired PTE, the hardware will thus
perform the following functions:
VPN
= (VirtualAddress & VPN_MASK) >> SHIFT
PTEAddr = PageTableBaseRegister + (VPN * sizeof(PTE))

In our example, VPN MASK would be set to 0x30 (hex 30, or binary
110000) which picks out the VPN bits from the full virtual address; SHIFT
is set to 4 (the number of bits in the offset), such that we move the VPN
bits down to form the correct integer virtual page number. For example, with virtual address 21 (010101), and masking turns this value into
010000; the shift turns it into 01, or virtual page 1, as desired. We then use
this value as an index into the array of PTEs pointed to by the page table
base register.
Once this physical address is known, the hardware can fetch the PTE
from memory, extract the PFN, and concatenate it with the offset from
the virtual address to form the desired physical address. Specifically, you
can think of the PFN being left-shifted by SHIFT, and then logically OR’d
with the offset to form the final address as follows:
offset
= VirtualAddress & OFFSET_MASK
PhysAddr = (PFN << SHIFT) | offset

c 2014, A RPACI -D USSEAU


T HREE
E ASY
P IECES

8

PAGING : I NTRODUCTION
1
2

// Extract the VPN from the virtual address
VPN = (VirtualAddress & VPN_MASK) >> SHIFT

3
4
5

// Form the address of the page-table entry (PTE)
PTEAddr = PTBR + (VPN * sizeof(PTE))

6
7
8

// Fetch the PTE
PTE = AccessMemory(PTEAddr)

9
10
11
12
13
14
15
16
17
18
19

// Check if process can access the page
if (PTE.Valid == False)
RaiseException(SEGMENTATION_FAULT)
else if (CanAccess(PTE.ProtectBits) == False)
RaiseException(PROTECTION_FAULT)
else
// Access is OK: form physical address and fetch it
offset
= VirtualAddress & OFFSET_MASK
PhysAddr = (PTE.PFN << PFN_SHIFT) | offset
Register = AccessMemory(PhysAddr)

Figure 18.6: Accessing Memory With Paging
Finally, the hardware can fetch the desired data from memory and put
it into register eax. The program has now succeeded at loading a value
from memory!
To summarize, we now describe the initial protocol for what happens
on each memory reference. Figure 18.6 shows the basic approach. For
every memory reference (whether an instruction fetch or an explicit load
or store), paging requires us to perform one extra memory reference in
order to first fetch the translation from the page table. That is a lot of
work! Extra memory references are costly, and in this case will likely
slow down the process by a factor of two or more.
And now you can hopefully see that there are two real problems that
we must solve. Without careful design of both hardware and software,
page tables will cause the system to run too slowly, as well as take up
too much memory. While seemingly a great solution for our memory
virtualization needs, these two crucial problems must first be overcome.

18.5

A Memory Trace
Before closing, we now trace through a simple memory access example to demonstrate all of the resulting memory accesses that occur when
using paging. The code snippet (in C, in a file called array.c) that we
are interested in is as follows:
int array[1000];
...
for (i = 0; i < 1000; i++)
array[i] = 0;

We compile array.c and run it with the following commands:

O PERATING
S YSTEMS
[V ERSION 0.91]

WWW. OSTEP. ORG

PAGING : I NTRODUCTION

9

A SIDE : D ATA S TRUCTURE — T HE PAGE TABLE
One of the most important data structures in the memory management
subsystem of a modern OS is the page table. In general, a page table
stores virtual-to-physical address translations, thus letting the system
know where each page of an address space actually resides in physical
memory. Because each address space requires such translations, in general there is one page table per process in the system. The exact structure
of the page table is either determined by the hardware (older systems) or
can be more flexibly managed by the OS (modern systems).

prompt> gcc -o array array.c -Wall -O
prompt> ./array

Of course, to truly understand what memory accesses this code snippet (which simply initializes an array) will make, we’ll have to know (or
assume) a few more things. First, we’ll have to disassemble the resulting binary (using objdump on Linux, or otool on a Mac) to see what
assembly instructions are used to initialize the array in a loop. Here is the
resulting assembly code:
0x1024
0x1028
0x102c
0x1030

movl
incl
cmpl
jne

$0x0,(%edi,%eax,4)
%eax
$0x03e8,%eax
0x1024

The code, if you know a little x86, is actually quite easy to understand2 .
The first instruction moves the value zero (shown as $0x0) into the virtual memory address of the location of the array; this address is computed
by taking the contents of %edi and adding %eax multiplied by four to it.
Thus, %edi holds the base address of the array, whereas %eax holds the
array index (i); we multiply by four because the array is an array of integers, each of size four bytes.
The second instruction increments the array index held in %eax, and
the third instruction compares the contents of that register to the hex
value 0x03e8, or decimal 1000. If the comparison shows that two values are not yet equal (which is what the jne instruction tests), the fourth
instruction jumps back to the top of the loop.
To understand which memory accesses this instruction sequence makes
(at both the virtual and physical levels), we’ll have to assume something
about where in virtual memory the code snippet and array are found, as
well as the contents and location of the page table.
For this example, we assume a virtual address space of size 64KB (unrealistically small). We also assume a page size of 1KB.
2
We are cheating a little bit here, assuming each instruction is four bytes in size for simplicity; in actuality, x86 instructions are variable-sized.

c 2014, A RPACI -D USSEAU


T HREE
E ASY
P IECES

10

PAGING : I NTRODUCTION
PageTable[39]

1174
1124
PageTable[1]

1074

Page Table (PA)

1224

40000

7232

1124

4196
4146

1074

4096

1024
0

10

20
30
Memory Access

40

Array (PA)

7282

inc
cmp
jne

40050

Code (PA)

7332

mov

40100

mov

Code (VA)

Array (VA)

1024

50

Figure 18.7: A Virtual (And Physical) Memory Trace
All we need to know now are the contents of the page table, and its
location in physical memory. Let’s assume we have a linear (array-based)
page table and that it is located at physical address 1KB (1024).
As for its contents, there are just a few virtual pages we need to worry
about having mapped for this example. First, there is the virtual page the
code lives on. Because the page size is 1KB, virtual address 1024 resides
on the second page of the virtual address space (VPN=1, as VPN=0 is
the first page). Let’s assume this virtual page maps to physical frame 4
(VPN 1 → PFN 4).
Next, there is the array itself. Its size is 4000 bytes (1000 integers),
and we assume that it resides at virtual addresses 40000 through 44000
(not including the last byte). The virtual pages for this decimal range are
VPN=39 ... VPN=42. Thus, we need mappings for these pages. Let’s assume these virtual-to-physical mappings for the example: (VPN 39 → PFN 7),
(VPN 40 → PFN 8), (VPN 41 → PFN 9), (VPN 42 → PFN 10).

We are now ready to trace the memory references of the program.
When it runs, each instruction fetch will generate two memory references:
one to the page table to find the physical frame that the instruction resides
within, and one to the instruction itself to fetch it to the CPU for processing. In addition, there is one explicit memory reference in the form of
the mov instruction; this adds another page table access first (to translate
the array virtual address to the correct physical one) and then the array
access itself.

O PERATING
S YSTEMS
[V ERSION 0.91]

WWW. OSTEP. ORG

PAGING : I NTRODUCTION

11

The entire process, for the first five loop iterations, is depicted in Figure 18.7 (page 10). The bottom most graph shows the instruction memory
references on the y-axis in black (with virtual addresses on the left, and
the actual physical addresses on the right); the middle graph shows array
accesses in dark gray (again with virtual on left and physical on right); finally, the topmost graph shows page table memory accesses in light gray
(just physical, as the page table in this example resides in physical memory). The x-axis, for the entire trace, shows memory accesses across the
first five iterations of the loop; there are 10 memory accesses per loop,
which includes four instruction fetches, one explicit update of memory,
and five page table accesses to translate those four fetches and one explicit
update.
See if you can make sense of the patterns that show up in this visualization. In particular, what will change as the loop continues to run
beyond these first five iterations? Which new memory locations will be
accessed? Can you figure it out?
This has just been the simplest of examples (only a few lines of C code),
and yet you might already be able to sense the complexity of understanding the actual memory behavior of real applications. Don’t worry: it definitely gets worse, because the mechanisms we are about to introduce only
complicate this already complex machinery. Sorry3 !

18.6 Summary
We have introduced the concept of paging as a solution to our challenge of virtualizing memory. Paging has many advantages over previous approaches (such as segmentation). First, it does not lead to external
fragmentation, as paging (by design) divides memory into fixed-sized
units. Second, it is quite flexible, enabling the sparse use of virtual address spaces.
However, implementing paging support without care will lead to a
slower machine (with many extra memory accesses to access the page
table) as well as memory waste (with memory filled with page tables instead of useful application data). We’ll thus have to think a little harder
to come up with a paging system that not only works, but works well.
The next two chapters, fortunately, will show us how to do so.

3

We’re not really sorry. But, we are sorry about not being sorry, if that makes sense.

c 2014, A RPACI -D USSEAU


T HREE
E ASY
P IECES

12

PAGING : I NTRODUCTION

References
[KE+62] “One-level Storage System”
T. Kilburn, and D.B.G. Edwards and M.J. Lanigan and F.H. Sumner
IRE Trans. EC-11, 2 (1962), pp. 223-235
(Reprinted in Bell and Newell, “Computer Structures: Readings and Examples” McGraw-Hill,
New York, 1971).
The Atlas pioneered the idea of dividing memory into fixed-sized pages and in many senses was an early
form of the memory-management ideas we see in modern computer systems.
[I09] “Intel 64 and IA-32 Architectures Software Developer’s Manuals”
Intel, 2009
Available: http://www.intel.com/products/processor/manuals
In particular, pay attention to “Volume 3A: System Programming Guide Part 1” and “Volume 3B:
System Programming Guide Part 2”
[L78] “The Manchester Mark I and atlas: a historical perspective”
S. H. Lavington
Communications of the ACM archive
Volume 21, Issue 1 (January 1978), pp. 4-12
Special issue on computer architecture
This paper is a great retrospective of some of the history of the development of some important computer
systems. As we sometimes forget in the US, many of these new ideas came from overseas.

O PERATING
S YSTEMS
[V ERSION 0.91]

WWW. OSTEP. ORG

PAGING : I NTRODUCTION

13

Homework
In this homework, you will use a simple program, which is known as
paging-linear-translate.py, to see if you understand how simple
virtual-to-physical address translation works with linear page tables. See
the README for details.

Questions
1. Before doing any translations, let’s use the simulator to study how
linear page tables change size given different parameters. Compute
the size of linear page tables as different parameters change. Some
suggested inputs are below; by using the -v flag, you can see
how many page-table entries are filled.
First, to understand how linear page table size changes as the address space grows:
paging-linear-translate.py -P 1k -a 1m -p 512m -v -n 0
paging-linear-translate.py -P 1k -a 2m -p 512m -v -n 0
paging-linear-translate.py -P 1k -a 4m -p 512m -v -n 0

Then, to understand how linear page table size changes as page size
grows:
paging-linear-translate.py -P 1k -a 1m -p 512m -v -n 0
paging-linear-translate.py -P 2k -a 1m -p 512m -v -n 0
paging-linear-translate.py -P 4k -a 1m -p 512m -v -n 0

Before running any of these, try to think about the expected trends.
How should page-table size change as the address space grows? As
the page size grows? Why shouldn’t we just use really big pages in
general?
2. Now let’s do some translations. Start with some small examples,
and change the number of pages that are allocated to the address
space with the -u flag. For example:
paging-linear-translate.py
paging-linear-translate.py
paging-linear-translate.py
paging-linear-translate.py
paging-linear-translate.py

-P
-P
-P
-P
-P

1k
1k
1k
1k
1k

-a
-a
-a
-a
-a

16k
16k
16k
16k
16k

-p
-p
-p
-p
-p

32k
32k
32k
32k
32k

-v
-v
-v
-v
-v

-u
-u
-u
-u
-u

0
25
50
75
100

What happens as you increase the percentage of pages that are allocated in each address space?
3. Now let’s try some different random seeds, and some different (and
sometimes quite crazy) address-space parameters, for variety:
paging-linear-translate.py -P 8 -a 32
-p 1024 -v -s 1
paging-linear-translate.py -P 8k -a 32k -p 1m
-v -s 2
paging-linear-translate.py -P 1m -a 256m -p 512m -v -s 3

Which of these parameter combinations are unrealistic? Why?

c 2014, A RPACI -D USSEAU


T HREE
E ASY
P IECES

14

PAGING : I NTRODUCTION
4. Use the program to try out some other problems. Can you find the
limits of where the program doesn’t work anymore? For example,
what happens if the address-space size is bigger than physical memory?

O PERATING
S YSTEMS
[V ERSION 0.91]

WWW. OSTEP. ORG

