Heidi C. Ellis and Gerard C. Weatherby

Stacks and Queues : Overview
• Stacks:
* Contract
* Implementations
• Queues:
* Contract
* Implementations
* Variations

Object Structures

Stacks and Queues.1

Heidi C. Ellis and Gerard C. Weatherby

Stacks
• Stack: Collection of elements organized in a linear sequence
where elements may be inserted or deleted only at one end.
• Elements deleted in reverse order in which they are inserted.
• Insertion and deletion from top of stacks.
* Elements may NOT be inserted or removed from middle.
• Has Last In First Out (LIFO) behavior.
• Example: Cafeteria trays.
• Elements in a stack may be any base or user-defined type.
• Stacks are commonly used to manage the calling sequence for
processes.

Object Structures

Stacks and Queues.2

Heidi C. Ellis and Gerard C. Weatherby

Stacks
main()
begin
call A()
end
Proc A()
begin
call B()
end

top
A

A

main

main

main

main calls A

A calls B

top
top

B

B calls C

Proc B()
call C()
end
Proc C()
begin
code
end

top

A
main

top

C ends

main
B ends

Object Structures

A ends

Stacks and Queues.3

Heidi C. Ellis and Gerard C. Weatherby

Stacks
• Stack convention uses:
push: Adds an element to the top of the stack.
pop: Removes an element from the top of the stack.
top: Returns an element from the top of the stack.
B
5

top
top
top
!!s.make

4

4
s.push(4)

Object Structures

s.push(5)

top

4
s.pop

Stacks and Queues.4

Heidi C. Ellis and Gerard C. Weatherby

Stack Contract
• We’ll use a Java interface to define the stack contract:
public interface OSStack {
/** test if stack empty
* @return true if it is */
public boolean empty( );
/** push item on top of stack
* @param obj item to add */
public void push(Object obj);
/** take object off of stack and return it
* @return object removed from stack
* requires stack not be empty
* @throws IllegalStateException if stack empty
*/
public Object pop( ) throws IllegalStateException;

Object Structures

Stacks and Queues.5

Heidi C. Ellis and Gerard C. Weatherby

/** return item from top of stack without removing it
* @return object removed from stack
* requires stack not be empty
* * @throws IllegalStateException if stack empty */
public Object top( ) throws IllegalStateException;
}

Object Structures

Stacks and Queues.6

Heidi C. Ellis and Gerard C. Weatherby

Implementations
• We’ll look at three approaches to implementing a stack:
1. Implement as list
* Since both OSStack and OSList are linear, can we make
OSStack a subtype of OSList???

* What should we do???
* What does the code look like?
* What is the performance?
Object Structures

Stacks and Queues.7

Heidi C. Ellis and Gerard C. Weatherby

Implementations
2. Array
package stack;
/**
* Stack implemented using an array
*/
public class OSArrayStack implements OSStack {
/** default size of implementing array */
public static final int DEFAULT_SIZE = 50;
private static final int EMPTY_INDEX = -1;
private java.util.Vector data;
private int topIndex = EMPTY_INDEX;
/** create stack. Implementing Vector starts at DEFAULT_SIZE */
public OSArrayStack() {
this(DEFAULT_SIZE);
}

Object Structures

Stacks and Queues.8

Heidi C. Ellis and Gerard C. Weatherby

/** create stack. Implementing Vector starts at initialSize */
public OSArrayStack(int initialSize) {
data = new java.util.Vector(initialSize);
}
public boolean empty( ) {
return topIndex == EMPTY_INDEX;
}
public void push(Object obj) {
if (topIndex == data.capacity( )) {
data.ensureCapacity(2 * data.capacity( ));
}
data.add(++topIndex,obj);
}
public Object pop( ) throws IllegalStateException {
if (empty( )) {
throw new IllegalStateException("calling pop on empty stack");
}
Object Structures

Stacks and Queues.9

Heidi C. Ellis and Gerard C. Weatherby

Object r= data.elementAt(topIndex);
data.set(topIndex--,null);
return r;
}
public Object top( ) throws IllegalStateException {
if (empty( )) {
throw new IllegalStateException("calling top on empty stack");
}
return data.elementAt(topIndex);
}

}

* What is the performance?
* Advantages? Disadvantages???
Object Structures

Stacks and Queues.10

Heidi C. Ellis and Gerard C. Weatherby

3. Linked
* Use a node class to build to stack
* What would the code look like
* What is the performance?
* Advantages? Disadvantages???

Object Structures

Stacks and Queues.11

Heidi C. Ellis and Gerard C. Weatherby

Queues
• Queue: A collection of data items organized in a linear
sequence where insertions occur at one end and deletions at
the other end.
• Elements deleted in order in which they are inserted.
* No insertions/deletions allowed in the middle of a queue.
• First In First Out (FIFO) behavior.
• Can be thought of as a waiting line.
• Elements in a queue may be any base or user-defined type.
add to
back

remove
from front

Object Structures

Stacks and Queues.12

Heidi C. Ellis and Gerard C. Weatherby

• Queue convention uses:
add: Adds an element to the back of the queue.
remove: Removes an element from the front of the queue.
front: Returns an element from the front of the queue.
q.add(P)

q.remove

P

A

q.add(T)

P

R
back

A

T
back

back front
q.add(R)

A

back front

front
back
q.add(A)

R

R

A
front

P
front

Object Structures

Stacks and Queues.13

Heidi C. Ellis and Gerard C. Weatherby

Queue Contract
• Contract is very similar to Stack.
package stack;
public interface OSQueue
{
/** test if queue empty
* @return true if it is */
public boolean empty( );
/** add item on to end of queue
* @param obj item to add */
public void add(Object obj);
/** take object off of queue and return it
* @return object removed from queue
* requires queue not be empty
* @throws IllegalStateException if queue empty */
public Object remove( ) throws IllegalStateException;
Object Structures

Stacks and Queues.14

Heidi C. Ellis and Gerard C. Weatherby

/** return item from top of queue without removing it
* @return object removed from queue
* requires queue not be empty
* * @throws IllegalStateException if queue empty */
public Object front( ) throws IllegalStateException;
}

Object Structures

Stacks and Queues.15

Heidi C. Ellis and Gerard C. Weatherby

Queue Implementations
• We have the same three implementations for queues:
1. List
* Which list should we use?
* What does the code look like?
* What is the performance?

Object Structures

Stacks and Queues.16

Heidi C. Ellis and Gerard C. Weatherby

2. Array implementation
package stack;
/** array implementation of queue.
Used fixed array with separate front and back indexes to keep track
of insertion and removal positions */
public class OSArrayQueue implements OSQueue {
/** array for storage */
private Object data[];
/** index of front of queue */
private int backIndex = 0;
/** index of end of queue */
private int frontIndex = 0;
/** default array size */
public static final int DEFAULT_SIZE = 50;
public OSArrayQueue(int arraySize) {
data = new Object[arraySize]; }

Object Structures

Stacks and Queues.17

Heidi C. Ellis and Gerard C. Weatherby

public OSArrayQueue( ) {
this(DEFAULT_SIZE); }
public boolean empty( ) {
return backIndex == frontIndex; }
public void add(Object obj) {
//see if queue is full
if (advance(frontIndex) == backIndex) {
Object newData[] = new Object[2 * data.length];
int i = 0;
while (backIndex != frontIndex) {
newData[i++] = data[backIndex];
backIndex = advance(backIndex); }
backIndex = 0;
frontIndex = i;
data = newData; }
data[frontIndex] = obj;
frontIndex = advance(frontIndex);
}
Object Structures

Stacks and Queues.18

Heidi C. Ellis and Gerard C. Weatherby

public Object remove( ) throws IllegalStateException {
if (empty( )) {
throw new IllegalStateException("calling remove on empty queue");
}
Object rval = data[backIndex];
data[backIndex] = null;
backIndex = advance(backIndex);
return rval;
}
public Object front( ) throws IllegalStateException {
if (empty( )) {
throw new IllegalStateException("calling front on empty queue");
}
return data[backIndex];
}
/** add one, modular on size of data, to value */
private final int advance(int value) {
return (value+1)%data.length;
}}
Object Structures

Stacks and Queues.19

Heidi C. Ellis and Gerard C. Weatherby

3. Linked queue
* What does this look like conceptually?
* What does the code look like?
* What is the performance?
* Advantages? Disadvantages?

Object Structures

Stacks and Queues.20

Heidi C. Ellis and Gerard C. Weatherby

Selecting an implementation
• When should we use which implementation?
• All three have O(1) performance in critical features.
add, remove, front
• Array implementation is better if:
1. Maximum capacity can be predicted, and
2. Queue is usually at least half full or no memory constraints.
• List or node implementation better if queue length is unpredictable.

Object Structures

Stacks and Queues.21

Heidi C. Ellis and Gerard C. Weatherby

Variations
1. Dequeue (Deck): Queue in which elements can be added to or
removed from either end but not in the middle.
* Front and back become left and right.
* Operations become: addleft, removeleft, etc.
2. Priority Queue: Queue where each element has a priority
and the remove order is determined by:
* Element of higher priority processed before all elements of
lower priority.
* Elements with same priority processed in order addedadd.
• Elements in queue are ordered and elements are inserted
according to priority.
* Insertions may occur in middle of queue.
Object Structures

Stacks and Queues.22

Heidi C. Ellis and Gerard C. Weatherby

Java Collections
• java.util.Stack -- subclass of Vector.
boolean empty()
Tests if this stack is empty.
Object peek()
Looks at the object at the top of this stack without removing it from the stack.
Object pop()
Removes the object at the top of this stack and returns that object as the value
of this function.
Object push(Object item)
Pushes an item onto the top of this stack
int search(Object o)
Returns the 1-based position where an object is on this stack.

* Does not require use of Stack interface -- poor
encapsulation
Object Structures

Stacks and Queues.23

Heidi C. Ellis and Gerard C. Weatherby

• No Queue class, but java.util.LinkedList has queue and deque
methods
void

addFirst(Object o)
Inserts the given element at the beginning of this list.

void

addLast(Object o)
Appends the given element to the end of this list.

Object removeFirst()
Removes and returns the first element from this list.
Object removeLast()
Removes and returns the last element from this
list

* Again, poor encapsulation

Object Structures

Stacks and Queues.24

