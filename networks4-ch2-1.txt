Computer Networks
Computer Networks

Network Applications
Network Applications

Based on Computer Networking, 3rd Edition by Kurose and Ross

Stan Kurkovsky

Typical architectures
Typical architectures

Client--server
server

 Client
 PeerPeer--toto--peer (P2P)
peer (P2P)
 Hybrid of client

Hybrid of client--server and P2P
server and P2P

Network applications
Network applications

Sample applications
Sample applications

 EE--mailmail
 WebWeb

Instant messaging
Instant messaging
 Remote login
Remote login
 P2P file sharing
P2P file sharing
 MultiMulti--user network games
user network games
Streaming stored video clips
 Streaming stored video clips

Internet telephone
Internet telephone
 RealReal--time video conference
time video conference
 Massive parallel computing
Massive parallel computing
 ......

Stan Kurkovsky

1

Creating a network application
Creating a network application

Write programs that
Write programs that

run on different end systems and
 run on different end systems and
communicate over a network.
 communicate over a network.
e.g., Web: Web server software 
 e.g., Web: Web server software 
communicates with browser software
communicates with browser software

Little software written for devices 
Little software written for devices 

in network core
in network core
 network core devices 
network core devices 
do not run user application code
do not run user application code
application on end systems  
 application on end systems  
allows for rapid app development, 
allows for rapid app development, 
propagation
propagation

application
transport
network
data link
physical

application
transport
network
data link
physical

application
transport
network
data link
physical

Stan Kurkovsky

Client--server architecture
server architecture
Client

server:
server:

always--on host
 always
on host
 permanent IP address
permanent IP address
 server farms for scaling
server farms for scaling

clients:
clients:

 communicate with server
communicate with server
 may be intermittently connected
may be intermittently connected
may have dynamic IP addresses
 may have dynamic IP addresses
do not communicate directly 
 do not communicate directly 
with each other
with each other

client/server

Stan Kurkovsky

2

Pure P2P architecture
Pure P2P architecture

 no always
no always--on server
on server
arbitrary end systems directly communicate
 arbitrary end systems directly communicate
peers are intermittently connected and change IP addresses
 peers are intermittently connected and change IP addresses
 example: Gnutella
example: Gnutella

Highly scalable
Highly scalable

But difficult to manage
But difficult to manage

peer-peer

Hybrid of client--server and P2P
server and P2P
Hybrid of client

Napster
Napster

File transfer P2P
 File transfer P2P
 File search centralized: 
File search centralized: 

Peers register content at central server
 Peers register content at central server
 Peers query same central server to locate content
Peers query same central server to locate content

Skype
Skype

 voice
voice--overover--IP P2P application
IP P2P application
 centralized server: finding address of remote party
centralized server: finding address of remote party
 client
client--client connection: direct (not through server) 
client connection: direct (not through server) 

Instant messaging
Instant messaging

Chatting between two users is P2P
 Chatting between two users is P2P
 Presence detection/location centralized:
Presence detection/location centralized:

User registers its IP address with central server when it comes online
 User registers its IP address with central server when it comes 
online
 User contacts central server to find IP addresses of buddies
User contacts central server to find IP addresses of buddies

Stan Kurkovsky

Stan Kurkovsky

3

Processes communicating
Processes communicating

Process: program running within a host.
program running within a host.
Process:
 within same host, two processes communicate using  

within same host, two processes communicate using  inter
communication (defined by OS).
(defined by OS).
communication
processes in different hosts communicate by exchanging messages
messages

 processes in different hosts communicate by exchanging 

inter--process 
process 

process that initiates communication
Client process: process that initiates communication
Client process:
Server process: process that waits to be contacted
process that waits to be contacted
Server process:

 Note: applications with P2P architectures have client processes 

Note: applications with P2P architectures have client processes & server 
& server 
processes
processes
Peers in P2P architectures have both client and server functionalities
lities
 Peers are sometimes called 

 Peers in P2P architectures have both client and server functiona

Peers are sometimes called servent

serventss ((servserver and cli

er and clientent))

Sockets
Sockets

 process sends/receives messages to/from its 


process sends/receives messages to/from its socket
socket
socket analogous to door
socket analogous to door
 sending process shoves 
sending process shoves 
message out the door
message out the door
sending process relies on 
 sending process relies on 
transport infrastructure on other 
transport infrastructure on other 
side of door which brings message 
side of door which brings message 
to socket at receiving process
to socket at receiving process

host or
server

process

controlled by
app developer

socket
TCP with
buffers,
variables

Internet

controlled
by OS

Application programming interface (API): 
 Application programming interface (API): 
(1) choice of transport protocol
 (1) choice of transport protocol
 (2) ability to fix a few parameters
(2) ability to fix a few parameters

Stan Kurkovsky

host or
server

process

socket
TCP with
buffers,
variables

Stan Kurkovsky

4

Addressing processes
Addressing processes

 For a process to receive messages, it must have an identifier
For a process to receive messages, it must have an identifier
 A host has a unique 32
A host has a unique 32--bit bit IP address
IP address
 Q:Q: does the IP address of the host on which the  process runs suff

does the IP address of the host on which the  process runs suffice for 
ice for 

port numbers associated with 
associated with 

 Answer:




identifying the process?
identifying the process?
Answer: No, many processes can be running on same host
No, many processes can be running on same host
Identifier includes both the IP address and port numbers
Identifier includes both the IP address and 
the process on the host.
the process on the host.
Example port numbers:
 Example port numbers:
 HTTP server: 80
HTTP server: 80
 Mail server: 25
Mail server: 25
to send HTTP message to gaia.cs.umass.edu
to send HTTP message to 
 IP address:
 Port number:

IP address: 128.119.245.12
128.119.245.12
Port number: 8080

gaia.cs.umass.edu web server:
web server:

Stan Kurkovsky

Application--layer protocol
layer protocol
Application

 Application

Application--layer protocols define
layer protocols define
Types of messages exchanged, e.g., request & response messages
 Types of messages exchanged, e.g., request & response messages
Syntax of message types: what fields in messages & how fields are delineated
 Syntax of message types: what fields in messages & how fields ar
e delineated
Semantics of the fields, i.e., meaning of information in fields
 Semantics of the fields, i.e., meaning of information in fields
 Rules for when and how processes send & respond to messages
Rules for when and how processes send & respond to messages

 Public

Public--domain protocols:
domain protocols:
defined in RFCsRFCs
 defined in 
allows for interoperability
 allows for interoperability
 e.g., HTTP, SMTP
e.g., HTTP, SMTP

 Proprietary protocols:
Proprietary protocols:
KaZaA, Skype
, Skype
 e.g., 

e.g., KaZaA

Stan Kurkovsky

5

What transport service does an application need?
What transport service does an application need?

Data loss
Data loss

 other apps (e.g., file transfer, telnet) require 100% reliable d

some apps (e.g., audio) can tolerate some loss
some apps (e.g., audio) can tolerate some loss
other apps (e.g., file transfer, telnet) require 100% reliable data transfer
ata transfer

Timing
Timing


some apps (e.g., Internet telephony, interactive games) require low delay 
low delay 
some apps (e.g., Internet telephony, interactive games) require 
to be effective
effective
to be 

Bandwidth
Bandwidth


some apps (e.g., multimedia) require minimum amount of bandwidth to to 
some apps (e.g., multimedia) require minimum amount of bandwidth
be be effective
effective
 other apps (
other apps (elastic apps

elastic apps) make use of whatever bandwidth they get 
) make use of whatever bandwidth they get 

Stan Kurkovsky

Transport service requirements of common applications
Transport service requirements of common applications

Application

Data loss

Bandwidth

Time Sensitive

file transfer
e-mail
Web documents
real-time audio/video

no loss
no loss
no loss
loss-tolerant

stored audio/video
interactive games
instant messaging

loss-tolerant
loss-tolerant
no loss

elastic
elastic
elastic
audio: 5kbps-1Mbps
video:10kbps-5Mbps
same as above 
few kbps up
elastic

no
no
no
yes, 100s msec

yes, few secs
yes, 100s msec
yes and no

Stan Kurkovsky

6

Internet transport protocols services
Internet transport protocols services
TCP service:
TCP service:
 connection
 reliable transport 
 flow control:
 congestion control:
 does not provide:

connection--oriented:
reliable transport between sending and receiving process
between sending and receiving process
flow control:sender won
congestion control:throttle sender when network overloaded
throttle sender when network overloaded
does not provide:timing, minimum bandwidth guarantees
timing, minimum bandwidth guarantees

oriented:setup required between client and server processes
setup required between client and server processes

sender wont overwhelm receiver 
t overwhelm receiver 

UDP service:
UDP service:
unreliable data transfer between sending and receiving process
 unreliable data transfer between sending and receiving process
does not provide: connection setup, reliability, flow control, congestion 
 does not provide: connection setup, reliability, flow control, c
ongestion 
control, timing, or bandwidth guarantee 
control, timing, or bandwidth guarantee 

why bother?  Why is there a UDP?
Q:Q: why bother?  Why is there a UDP?

Stan Kurkovsky

Internet applications:  application, transport protocols
protocols
Internet applications:  application, transport 

Application

Application
layer protocol

Underlying
transport protocol

e-mail
remote terminal access
Web 
file transfer
streaming multimedia

Internet telephony

SMTP [RFC 2821]
Telnet [RFC 854]
HTTP [RFC 2616]
FTP [RFC 959]
proprietary
(e.g. RealNetworks)
proprietary
(e.g., Vonage, Dialpad)

TCP
TCP
TCP
TCP
TCP or UDP

typically UDP

Stan Kurkovsky

7

